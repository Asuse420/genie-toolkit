class @com.facebook
#_[name="Facebook"]
#_[canonical="facebook"] {
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.oauth2();

  action post(in req status: String
              #_[prompt="what do you want to post"]
              #_[canonical={
                 base=["status", "text", "content"],
                 preposition=["saying #"]
              }]
              #[string_values="tt:long_free_text"])
  #_[canonical=["post on facebook", "make a post on facebook", "update your facebook status"]]
  #_[confirmation="post $status on Facebook"]
  #[confirm=true];

  action post_picture(in req picture_url: Entity(tt:picture)
                      #_[prompt="upload the picture now"]
                      #_[canonical={
                         base=["picture", "image", "photo"],
                      }],
                      in req caption: String
                      #_[prompt="what should be the caption of the picture"]
                      #_[canonical={
                         base=["caption", "message", "description"],
                         preposition=["saying #"]
                      }]
                      #[string_values="com.instagram:caption"])
  #_[canonical=["post a picture on facebook", "upload a picture to facebook"]]
  #_[confirmation="upload a picture on Facebook with caption $caption"]
  #[confirm=true];
}
class @org.thingpedia.builtin.thingengine.builtin
#_[name="Miscellaneous Interfaces"]
#_[description="Commands that are always available and don't belong to any specific device or account. Mostly related to time and randomness, because the universe is chaos and those always there. Also debugging."]
#_[canonical="miscellaneous interfaces"]
{
  import loader from @org.thingpedia.builtin();
  import config from @org.thingpedia.config.builtin();

  monitorable query get_gps(out location: Location
                            #_[canonical={
                              default="preposition",
                              base=["coordinates"],
                              preposition=["in #", "at #", "around #"]
                            }],
                            out altitude: Measure(m)
                            #_[canonical={
                              default="base",
                              base=["altitude"],
                              preposition=["at # above sea level"]
                            }]
                            #[min_number=0m]
                            #[max_number=15000m], // not approved for use in the ISS
                            out bearing: Number
                            #_[canonical={
                              base=["bearing"],
                              passive_verb=["facing #"] // FIXME we want to say "facing 30 degrees north" but we can't quite do that...
                            }],
                            out speed: Measure(mps)
                            #_[canonical={
                              base=["speed"],
                              passive_verb=["going at #", "moving at #"],
                              preposition=["at #"]
                            }]
                            )
  #_[canonical=["my current location", "my current position", "my current geocoordinates"]]
  #_[confirmation="your location"]
  #_[formatted=[{type="text",text="Current Location: ${location}"}]]
  #[poll_interval=0ms]
  #[doc="get last known GPS location"]
  #[confirm=false];

  query get_time(out time: Time
                 #_[canonical=["time"]]
                 #[filterable=false])
  #[result=["it 's ${time}", "the current time is ${time}", "now it 's ${time}"]]
  #_[canonical=["time", "current time", "time of day"]]
  #_[confirmation="the current time"]
  #_[formatted=[{type="text",text="Current time is ${time:time}."}]]
  #[doc="get the current time"]
  #[confirm=false];

  query get_date(out date: Date
                 #_[canonical=["date"]]
                 #[filterable=false])
  #_[canonical=["date", "current date", "today 's date"]]
  #_[confirmation="today's date"]
  #_[formatted=[{type="text",text="Today is ${date:date}."}]]
  #[doc="get the current date"]
  #[confirm=false];

  query get_random_between(in opt low: Number
                           #_[canonical={
                             base=["lower bound", "minimum number"],
                             passive_verb=["higher than #", "more than #"] // the sentence is "give me a random number higher than X", so "higher than X" is pvp not apv
                           }],
                           in opt high: Number
                           #_[canonical={
                             base=["upper bound", "maximum number"],
                             passive_verb=["higher than #", "more than #"] // the sentence is "give me a random number higher than X", so "higher than X" is pvp not apv
                           }],
                           out random: Number
                           #_[canonical={
                             base=["number", "result"],
                           }]
                           #[filterable=false])
  #_[canonical=["random number", "random integer"]]
  #_[result=["${random}", "your number is ${random} .", "i chose ${random} ."]]
  #_[confirmation="a random integer between $low and $high"]
  #_[formatted=[{type="text",text="${random}"}]]
  #[doc="get a uniform random integer between `low` and `high`"]
  #[confirm=false];

  list query device(out id : Entity(tt:device)
                    #_[canonical={
                       base=["name"],
                       passive_verb=["named #", "called #"],
                    }],
                    out description : String
                    #_[canonical={
                       base=["description"]
                    }]
                    #[string_values="tt:short_free_text"],
                    out category : Enum(service, media, social_network, communication, home, health, data_management)
                    #_[canonical={
                       base=["category"],
                       adjective=["#"],
                       preposition=["in the # category"]
                    }],
                    out website : Entity(tt:url)
                    #_[canonical={
                       base=["website", "link", "url"]
                    }]
                    )
  #_[canonical=["device", "skill", "thingpedia device", "supported skill"]]
  #_[confirmation="Thingpedia devices"]
  #_[formatted=[{type="text",text="${random}"}]]
  #[doc="list supported Thingpedia devices"]
  #[confirm=false];

  list query commands(out id : Entity(tt:command_id),
                      out device: Entity(tt:device)
                      #_[canonical={
                        base=["device", "account", "skill"],
                        adjective=["# 's"],
                        preposition=["of #", "in #"]
                      }]
                      #_[prompt=["what device do you want help for", "for what device"]],
                      out program: Entity(tt:program)
                      #[filterable=false])
  #_[canonical="supported command"]
  #_[confirmation="the list of commands of $device"]
  #_[formatted=[{type="text",text="${program}"}]]
  #[doc="retrieve the list of supported commands for the given device"]
  #[confirm=false];

  action open_url(in req url: Entity(tt:url)
                  #_[prompt=["what url do you want to open", "what do you want to open"]]
                  #_[canonical={
                    base=["url", "link", "page"],
                    preposition=["to #"]
                  }])
  #_[canonical=["open a url", "open a link"]]
  #_[confirmation="open $url"]
  #[doc="open a file/link"]
  #[confirm=false];

  action say(in req message: String
             #_[prompt="what do you want me to say"]
             #[string_values="tt:long_free_text"],
             out message_output: String
             #_[canonical="message"])
  #_[result="${message_output}"]
  #_[canonical="say"]
  #_[confirmation="send me a message $message"]
  #[doc="makes Almond say something"]
  #[confirm=false];

  action debug_log(in req message: String
                   #_[prompt=["what should I write in the logs", "what do you want me to write"]]
                   #[string_values="tt:long_free_text"])
  #_[canonical=["log a message", "record a message", "write a message in the logs"]]
  #_[confirmation="write $message in the developer logs"]
  #[doc="log a message in the developer logs"]
  #[confirm=false];

/*
  action configure(in req device: Entity(tt:device) #_[prompt="What device do you want to configure?"])
  #_[canonical="configure"]
  #_[confirmation="configure a new $device"]
  #_[confirmation_remote="configure a new $device on $__person's Almond"]
  #[doc="configure a specific device by type"]
  #[confirm=false];

  action discover()
  #_[canonical="discover"]
  #_[confirmation="search for new devices"]
  #_[confirmation_remote="search for new devices on $__person's Almond"]
  #[doc="start interactive discovery for new devices"]
  #[confirm=false];
*/
}
class @com.spotify
#_[name="Spotify"]
#_[description="Play music on Spotify"]
#_[canonical="spotify"]
{

  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();

  entity song #_[description="Songs on Spotify"];
  entity artist #_[description="Artists in Spotify"];

  list query song(out id: Entity(com.spotify:song) #[string_values="tt:song_name"]
                  #[unique=true]
                  #_[canonical={
                    default="base",
                    base=["name"],
                    passive_verb=["named #", "called #"],
                    property=["name #"]
                  }],
                  out artists: Array(Entity(com.spotify:artist)) #[string_values="tt:song_artist"]
                  #_[canonical={
                    default="preposition",
                    base=["artist", "song writer"],
                    property=["artist #", "song writer #"],
                    preposition=["by #"],
                    passive_verb=["written by #", "released by #", "produced by #"],
                    verb = ["# wrote", "# released", "# produced"]
                  }],
                  out release_date : Date
                  #_[canonical={
                    default="preposition",
                    base=["date", "release date"],
                    property=["release date #"],
                    preposition=["from #", "in #"],
                    passive_verb=["released in #", "published in #"]
                  }],
                  out popularity: Number
                  #[min_number=0]
                  #[max_number=100]
                  #_[canonical={
                    default="base",
                    base=["popularity", "average popularity"],
                    passive_verb=["rated # popularity"],
                    property=["# popularity"]
                  }])
  #_[canonical="song"]
  #_[confirmation="songs on Spotify"]
  #[minimal_projection=["id"]]
  #_[formatted=[{type="text",text="${id} by ${artists}"}]]
  #[doc="search for songs on Spotify"]
  #[confirm=false];

}
class @com.twitter
#_[name="Twitter"]
#_[description="Connect your Mario with Twitter"]
#_[canonical="twitter"]
{
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.oauth2();

  entity tweet #_[description="Twitter Tweet ID"] #[has_ner=false];

  monitorable list query tweet(out id : Entity(com.twitter:tweet)
                               #[unique=true]
                               #_[canonical={
                                  base=["id", "tweet id"],
                               }],

                               out text: String
                               #_[canonical={
                                  base=["text", "content"],
                                  verb=["contain #", "say #", "talk about #"],
                                  passive_verb=["matching #", "containing #", "saying #"],
                                  preposition=["about #"]
                               }]
                               #[string_values="tt:long_free_text"],

                               out hashtags: Array(Entity(tt:hashtag))
                               #_[canonical={
                                 base=["hashtags"],
                                 property=["hashtag #", "# hashtag"],
                               }]
                               #[string_values="com.twitter:hashtag"],

                               out urls: Array(Entity(tt:url))
                               #_[canonical="urls"],

                               out author: Entity(tt:username)
                               #_[prompt="from which user do you want tweets"]
                               #_[canonical={
                                  base=["author", "user"],
                                  passive_verb=["authored by #", "written by #"],
                                  preposition=["from #", "by #"]
                               }]
                               #[string_values="com.twitter:username"],

                               out from_self : Boolean
                               #_[canonical={ preposition_true=["from me"], adjective_true=["my"] }],

                               out in_reply_to: Entity(tt:username)
                               #_[prompt="in reply to which user do you want tweets?"]
                               #_[canonical={
                                  base=["mentioned user", "mention"],
                                  passive_verb=["replying to #"],
                                  verb=["reply to #"],
                                  preposition=["in reply to #"]
                               }]
                               #[string_values="com.twitter:username"]
                               )
  #_[canonical=["tweet", "recent tweet"]]
  #_[result=["${author} tweeted : ${text}"]]
  #_[formatted=[{type="text",text="@${author} tweeted: ${text}"}]]
  #_[confirmation_remote="recent tweets"]
  #[related=["com.twitter:home_timeline"]]
  #[poll_interval=600000ms]
  #[doc="search recent tweets; default is 5"];

  monitorable list query home_timeline(out id: Entity(com.twitter:tweet)
                                       #[unique=true]
                                       #_[canonical={
                                          base=["id", "tweet id"],
                                       }],

                                       out text: String
                                       #_[canonical={
                                          base=["text", "content"],
                                          verb=["contain #", "say #", "talk about #"],
                                          passive_verb=["matching #", "containing #", "saying #"],
                                          preposition=["about #"]
                                       }]
                                       #[string_values="tt:long_free_text"],

                                       out hashtags: Array(Entity(tt:hashtag))
                                       #_[canonical={
                                         base=["hashtags"],
                                         property=["hashtag #", "# hashtag"],
                                       }]
                                       #[string_values="com.twitter:hashtag"],

                                       out urls: Array(Entity(tt:url))
                                       #_[canonical="urls"],

                                       out author: Entity(tt:username)
                                       #_[prompt="from which user do you want tweets"]
                                       #_[canonical={
                                          base=["author", "user"],
                                          passive_verb=["authored by #", "written by #"],
                                          preposition=["from #", "by #"]
                                       }]
                                       #[string_values="com.twitter:username"],

                                       out from_self : Boolean
                                       #_[canonical={ preposition_true=["from me"], adjective_true=["my"] }],

                                       out in_reply_to: Entity(tt:username)
                                       #_[prompt="in reply to which user do you want tweets?"]
                                       #_[canonical={
                                          base=["mentioned user", "mention"],
                                          passive_verb=["replying to #"],
                                          verb=["reply to #"],
                                          preposition=["in reply to #"]
                                       }]
                                       #[string_values="com.twitter:username"]
                                       )
  #_[canonical=["my twitter home timeline", "tweet in my timeline", "tweet from anyone i follow", "tweet from people i follow"]]
  #_[result=["${author} tweeted : ${text}"]]
  #_[confirmation="tweets from anyone you follow"]
  #_[formatted=[{type="text",text="@${author} tweeted: ${text}"}]]
  #[poll_interval=600000ms]
  #[doc="shows your Twitter timeline (the home page of Twitter)"];

  monitorable list query direct_messages(out sender: Entity(tt:username)
                                         #_[canonical={
                                            base=["sender", "author", "user"],
                                            passive_verb=["written by #"],
                                            preposition=["from #", "by #"]
                                         }]
                                         #[string_values="com.twitter:username"],
                                         out message: String
                                         #_[canonical={
                                           base=["text", "message", "content"],
                                           verb=["contain #", "say #", "talk about #"],
                                           passive_verb=["matching #", "containing #", "saying #"],
                                           preposition=["about #"]
                                         }]
                                         #[string_values="tt:long_free_text"]
                                         )
  #_[canonical=["twitter direct messages",
                "twitter dms",
                "my twitter direct messages",
                "the direct messages i received on twitter",
                "the messages i got on twitter",
                "my twitter messages",
                "my twitter dms"]]
  #_[confirmation="direct messages you received on Twitter"]
  #_[formatted=[{type="text",text="@${sender}: ${message}"}]]
  #[poll_interval=600000ms]
  #[doc="get recent direct messages you received"];

  action send_direct_message(in req to: Entity(tt:username)
                             #_[prompt="who do you want to send the message to"]
                             #_[canonical={
                               base=["recipient"],
                               preposition=["to #"]
                             }]
                             #[string_values="com.twitter:username"],
                             in req message: String
                             #_[prompt="what message do you want to send"]
                             #_[canonical={
                               base=["message", "text", "content"],
                               preposition=["saying #"]
                             }]
                             #[string_values="tt:message"])
  #_[canonical="send dm on twitter"]
  #_[confirmation="send a direct message on Twitter to $to saying $message"]
  #[doc="send a direct message"];

  action post(in req status: String
              #_[prompt="what do you want to tweet"]
              #_[canonical={
                 base=["status", "text", "content"],
                 preposition=["saying #"]
              }]
              #[string_values="tt:long_free_text"]
              )
  #_[canonical=["tweet something",
                "make a tweet",
                "make a twitter post",
                "post on twitter"]]
  #_[confirmation="tweet $status"]
  #[doc="post a tweet; use # to include a hashtag and @ to reply"];

  action post_picture(in req caption: String
                      #_[canonical={
                         base=["caption", "message", "description"],
                         preposition=["saying #"]
                      }]
                      #[string_values="com.instagram:caption"],
                      in req picture_url: Entity(tt:picture)
                      #_[prompt="upload the picture now"]
                      #_[canonical={
                         base=["picture", "image", "photo"],
                      }])
  #_[canonical="post picture on twitter"]
  #_[confirmation="tweet $caption with an attached picture"]
  #[doc="post a tweet with a picture"];

  action follow(in req user_name: Entity(tt:username)
                #_[prompt=["what user do you want to follow", "who do you want to follow"]]
                #_[canonical={
                   base=["user name", "user", "account"],
                }]
                #[string_values="com.twitter:username"])
  #_[canonical="follow on twitter"]
  #_[confirmation="follow $user_name on Twitter"]
  #[doc="follow the named user"];

  action unfollow(in req user_name: Entity(tt:username)
                  #_[prompt=["what user do you want to follow", "who do you want to follow"]]
                  #_[canonical={
                     base=["user name", "user", "account"],
                  }]
                  #[string_values="com.twitter:username"])
  #_[canonical="unfollow on twitter"]
  #_[confirmation="unfollow $user_name on Twitter"]
  #[doc="stop following the named user; this call succeeds even if the user was already followed before"];

  action retweet(in req tweet_id: Entity(com.twitter:id) #_[prompt="What tweet do you want to retweet?"] #_[canonical="tweet id"])
  #_[canonical="retweet"]
  #_[confirmation="retween $tweet_id"]
  #_[confirmation_remote="retweet $tweet_id on $__person's Twitter Account"]
  #[doc="retweet a given tweet, by id"];
}

class @org.thingpedia.weather
#_[name="Weather API"]
#_[description="Weather forecasts and information provided by met.no"]
#_[canonical="weather api"] {
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();

  monitorable query sunrise(in req location: Location
                            #_[prompt="what location do you want sun time info for?"]
                            #_[canonical={
                              default="preposition",
                              base=["location", "position", "place"],
                              property=[],
                              preposition=["in #", "at #", "around #", "for location #", "for #"]
                            }],
                            in opt date: Date
                            #_[canonical={
                              default="preposition",
                              default=["date"],
                              preposition=["on #"]
                            }],
                            out sunrise_time: Time
                            #_[canonical="sunrise time"],
                            out sunset_time: Time
                            #_[canonical="sunset time"],
                            // TODO what to do of these?
                            out sunset: Boolean
                            #_[canonical="sunset"],
                            out sunrisen: Boolean
                            #_[canonical="sunrisen"])
  #_[result=["in ${location} , the sun rises at ${sunrise_time} and sets at ${sunset_time}",
             "on ${date} the sun rises at ${sunrise_time} and sets at ${sunset_time} in ${location}",
             "on ${date} the sun rises at ${sunrise_time}",
             "on ${date} the sun sets at ${sunset_time}"]]
  #_[canonical=["sunrise and sunset time", "sunrise time", "sunset time"]]
  #_[confirmation="the sunrise and sunset time for location $location"]
  #_[formatted=[{type="text",text="Sun times on ${date:date} for ${location}: rises at ${sunrise_time}, sets at ${sunset_time}"}]]
  #[poll_interval=86400000ms]
  #[doc="Information about sunrise and sunset"];

  monitorable query moon(in req location: Location
                         #_[prompt="what location do you want moon time info for"]
                         #_[canonical={
                            default="preposition",
                            base=["location", "position", "place"],
                            property=[],
                            preposition=["in #", "at #", "around #", "for location #", "for #"]
                          }],
                         in opt date: Date
                         #_[canonical={
                            default="preposition",
                            default=["date"],
                            preposition=["on #"]
                         }],
                         out phase: Enum(new_moon,waxing_crescent,first_quarter,waxing_gibbous,full_moon,waning_gibbous,third_quarter,waning_crescent)
                         #_[canonical=["phase", "moon phase"]]
                         )
  #_[result=["in ${location} the moon is ${phase}",
             "in ${location} the moon phase is ${phase}",
             "on ${date} the moon is ${phase} in ${location}",
             "the moon is ${phase}"]]
  #_[canonical=["moon phase", "phase of the moon"]]
  #_[confirmation="the moon phase for $location"]
  #_[formatted=[{type="text",text="Moon phase on ${date:date} for ${location}: ${phase}."}]]
  #[poll_interval=86400000ms]
  #[doc="Information about moon times and moon phase"]
  #[confirm=false];

  monitorable query current(in req location: Location
                            #_[prompt="what location do you want the current weather for?"]
                            #_[canonical={
                              default="preposition",
                              base=["location", "position", "place"],
                              property=[],
                              preposition=["in #", "at #", "around #", "for location #", "for #"]
                            }],
                            out temperature: Measure(C)
                            #_[canonical="temperature"]
                            // from the coldest artic to the death valley, in one filter
                            #[min_number=-10C]
                            #[max_number=50C],
                            out wind_speed: Measure(mps)
                            #_[canonical="wind speed"]
                            #[min_number=0kmph]
                            #[max_number=150kmph],
                            out humidity: Number
                            #_[canonical="humidity"]
                            #[min_number=0]
                            #[max_number=100],
                            out cloudiness: Number
                            #_[canonical="cloudiness"]
                            #[min_number=0]
                            #[max_number=100],
                            out fog: Number
                            #_[canonical="fog"]
                            #[min_number=0]
                            #[max_number=100],
                            out status: Enum(raining,cloudy,sunny,snowy,sleety,drizzling,windy)
                            #_[canonical="status"],
                            out icon: Entity(tt:picture)
                            #_[canonical="icon"])
  #_[result=["the current weather in ${location} is ${status} . the temperature is ${temperature} and the humidity is ${humidity} % .",
             "the current weather in ${location} is ${status}",
             "the weather in ${location} is ${status}",
             "it is ${status} today in ${location} and the temperature is ${temperature}"]]
  #_[canonical=["current weather", "weather", "weather outside"]]
  #_[confirmation="the current weather for $location"]
  #_[formatted=[{type="text",text="Current weather for ${location}: ${status}, temperature ${temperature:C} C, wind speed ${wind_speed:mps} m/s, humidity ${humidity}%, cloudiness ${cloudiness}%, fog ${fog}%."}]]
  #[poll_interval=3600000ms]
  #[doc="Information about current weather"]
  #[confirm=false];
}

class @com.yelp
#_[name="Yelp"]
#_[description="Search restaurants on Yelp"]
#_[canonical="yelp"]
{
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();

  entity restaurant #_[description="Restaurants on Yelp"];
  entity restaurant_cuisine #_[description="Cuisines in Yelp"];

  list query restaurant(out id: Entity(com.yelp:restaurant)
                        #[conflict_filter=["cuisines", "price_range"]]
                        #[unique=true]
                        #[string_values="gov.data:restaurant_names"]
                        #_[canonical={
                          default="base",
                          base=["name"],
                          property=[]
                        }],
                        out image_url: Entity(tt:picture)
                        #[filterable=false]
                        #_[canonical={
                          default="base",
                          base=["picture", "image", "photo"]
                        }],
                        out link: Entity(tt:url)
                        #[filterable=false]
                        #_[canonical="link"],
                        out cuisines: Array(Entity(com.yelp:restaurant_cuisine))
                        #[conflict_filter=["id"]]
                        #_[canonical={
                          default="property",
                          base=["cuisines", "types of cuisine", "food", "types of food", "category"],
                          property=["# food", "# cuisine", "# category"],
                          adjective=["#"],
                          verb=["serves # cuisine", "serves # food", "offer # cuisine", "offer # food", "serves", "offers"],
                          preposition=["in the # category"]
                        }],
                        out price : Enum(cheap, moderate, expensive, luxury)
                        #[conflict_filter=["id"]]
                        #_[canonical={
                          default="adjective",
                          base=["price range", "price"],
                          property=[],
                          adjective=["#", "# -ly priced"],
                          adjective_enum={ luxury=["upscale", "fine-dining"] }
                        }],
                        out rating: Number
                        #[min_number=1]
                        #[max_number=5]
                        #_[canonical={
                          default="passive_verb",
                          base=["rating", "average rating"],
                          passive_verb=["rated # star"],
                          adjective=["# star"],
                          property=["rating", "# star rating"]
                        }]
                        #_[counted_object="stars"],
                        out reviewCount: Number
                        #_[canonical={
                          default="property",
                          base=["review count"],
                          property=["# reviews"]
                        }]
                        #_[counted_object="reviews"],
                        out geo: Location
                        #_[canonical={
                          default="preposition",
                          base=["address", "location"],
                          preposition=["near #", "in #", "around #"]
                        }],
                        out phone: Entity(tt:phone_number)
                        #[filterable=false]
                        #_[canonical={
                          default="npp",
                          base=["telephone", "phone number"]
                        }])
  #_[canonical="restaurant"]
  #_[confirmation="restaurants on Yelp"]
  #[minimal_projection=["id"]]
  #_[formatted=[{
    type="rdl",
    displayTitle="${id}",
    webCallback="${link}",
    displayText="Offers ${cuisines} food.",
    pictureUrl="${image_url}"
  }]]
  #[doc="search for restaurants on Yelp"]
  #[confirm=false];
}

