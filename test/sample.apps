// -* mode: js -*-

ParserTest() {
@sabrina.listen(text), $regex("^on\\s+hashtag\\s+([a-z0-9]+)", 42 = !!false && 7) => Val(42);
}

====

SabrinaTestCapturingGroup() {
@sabrina.listen(text), $regex(text, "^on\s+hashtag\\s+([a-z0-9]+)", "i", hashtag)
    => @sabrina.say("hashtag " + hashtag);
}

====

LinkedInApp-F() {
    @linkedin.profile(name, _, ind) => Company-F[self](name, ind);
    Company-F[self](_, ind), Company-F[m](name, ind), m in F =>
        NewColleague(name, ind);
    NewColleague(name, co) => @$notify(name, co);
}

====

WeightCompetition-F(stopTime: String) {
    var InitialWeight-F : (Measure(kg));

    @(type="scale").measure(w)
        => Weight(w);

    Weight(w), !InitialWeight-F[self](_)
        => InitialWeight-F[self](w);

    InitialWeight-F[self](w1), Weight(w2)
        => Loss-F[self]((w1 - w2)/w2);

    Loss-F[m](l), m in F
        => Winners($argMax(Loss-F));

    Winners(w)
        => @$notify(w);

    @$at(stopTime)
        => @$return(Winners);
}

/*
WeightCompApp(g : Group) {
  table weightHistory(time : Number, weight : Measure(kg));
  table weightBoard(name : String, delta : Measure(kg));

  scale = #scale() => weightHistory(time = scale.ts, weight = scale.weight);

  initial = min(weightHistory.alldata, time),
  current = max(weightHistory.oninsert, time) =>
  weightBoard(key_='name', name = @self.name, delta = (initial.weight - current.weight) / initial.weight);

  weightBoard.oninsert(), board = all(g.weightBoard.alldata, delta) =>
  g(title='Weight Competition', text='New results for the weight competition', callback='weightcomp',
    data=board);
}*/

====

TestComputeApp() {
    module random {
        event out(x : Number);
        function ask() {
            out(Math.floor(42 + Math.random() * 42));
        }
    }

    @$timer(30s) => @random.ask();
    @random.out(x) => @$logger('number: ' + $toString(x));
}

====

LinkedInApp(g : Group) {
    module compute() {
        event newcolleague(name : String, ind : String);
        function newmessage(name : String, ind :  String) {
            query1("linkedin()").then(function(v) {
                if (ind === v.industry)
                    newcolleague(name, ind);
            }).done();
        }
    }

    mylin = linkedin() => g.compute.newmessage(name = mylin.formattedName, ind = mylin.industry);
    (name, ind) = compute.newcolleague() => notify(message = name + " also works in " + ind);
}

====

/* This should not run directly, but it gives an idea of the syntax */
/* They should all at least parse successfully. */

Test() {
    test() => logger(message = "Test App received an event on Test Channel");
}

====

Weather() {
    // Observe weather predictions and log them

    weather = weather() => logger(message = "Weather forecast. Temperature "
                                  + weather.temperature + ", " +
                                  "humidity " + weather.humidity);
}

====

SmartThingsExample(g : Group) {
    // When everyone leaves, turn the lights off
    // This is the example in the SmartThings documentation

    import EdgeTrigger as ET;
    import Aggregation;

    mylocation = gps.location() => ET.update(value = distance(location, @home.location));
    ET.check(value > 50m) => g.Aggregation.all();
    Aggregation.all() => #light#livingroom(power = off);
}

====

ImperativeSmartThingsExample(g : Group) {
    // Same as SmartThingsExample, but with a bit of JS code instead

    module checkAllPeople() {
        var count;
        var personAway;

        event everyoneLeft();
        function update(dist : Measure(m)) {
            if (count === undefined)
                count = g.members.length;
            if (!senderId in people)
                personAway[senderId] = false;
            if (distance > 50) {
                if (personAway[senderId])
                    return;
                personAway[senderId] = true;
                count--;
                if (count == 0)
                    everyoneLeft();
            } else {
                if (!personAway[senderId])
                    return;
                personAway[senderId] = false;
                count++;
            }
        }
    }

    mylocation = gps.location() => checkAllPeople.update(dist = distance(mylocation, @home.location));
    checkAllPeople.everyoneLeft() => #light#livingroom(power = off);
}

====

AgingWithDignity() {
   // "When I fall in the bathtub"

    import ImageRecognition as IR;

    (picture) = #camera#bathroom() => IR.detect.in(picture = picture);
    IR.detect.tag(tag = "fall") => @phone.call(number = "555-MY-SON",
                                         voicemail = "I need urgent help, I fell and I can't get up!");
}

====

/* Another take on the "Aging with Dignity" demo */
@name "When I fall in the bathtub (v2)";

.camera.bathroom as in {
    detects(picture) ~= "fall";
}
=>
#phone:sms {
    number: "555-MY-SON";
    message: in.picture;
}

====

/* An often mentioned example */
@name "When a friend suggests something to watch on TV, change the channel";

.omlet as in {
    type: "link";
    from: "my.friend@omlet.com";
    message ~= "watch this show";
}
=>
/* nearby would be an automatically added tag for devices that are effectively
   nearby, like within control range
*/
.television.nearby {
    power: on;
    /* tricky part: from Omlet we get an RDL, which is easy to obtain as
       in.link - but we don't know necessarily the format of it unless we
       open it
       this assumes some kind of agreement beforehand on what kind of links
       are shared, which would mean this rule is of the installed kind, not
       a rule someone would write for himself

       also note the syntactic trickery here: we can't do
       url(in.link).query.channel
       because the lhs of a member_expression must be a primary expression,
       not another member_expression
       (otherwise you get left recursion which PEG does not allow)
     */
    channel: (url(in.link).query).channel;
}

====

/* A bunch of examples from the ThingPedia website */

@name "Remind me to take pills";

:timer(1day) {}
=>
:notify {
    message: "Did you take your pills?";
}

====

@name "Call Doctor if Blood Pressure over 139/89mmHg";

.blood-pressure {
    high-pressure > 139mmHg;
    low-pressure > 89mmHg;
}
=>
#phone:call {
    number: "555-DOCTOR";
}

====

@name "Call a Taxi if there is a storm";

:weather {
    forecast ~= "storm";
}
=>
#phone:call {
    number: "555-TAXI";
}

====

@name "Turn on Lights at Dusk";

:calendar-time("18:00") { }
=>
.light {
    power: on;
}

====

@name "Send a Tweet if the Weather's Good";

:weather {
    forecast ~= "sun";
}
=>
/* NOTE: twitter is an account, aka a device, so .twitter, not :twitter!
 This sends the tweet through all accounts, if one needs a specific account
 it can be specified with #twitter-XXXXXX where XXXXX is the account ID.
 */
.twitter {
    tweet: "It's always sunny in Philadelphia";
}

====

@name "Send me a Text when my Credit Card gets charged";

.credit-card:charged as charge {
    amount > 25usd;
}
=>
/* This rule, as written, does not make much sense: it will send a sms from
   my phone to my phone.

   Maybe we'll need a different kind of :sms channel?
   Or just tell people to use :notify instead?
*/
#phone:sms {
    to: "555-MY-NUMBER";
    message: "You just paid " charge.amount " $ to someone";
}

====

@name "Send me a notification when my stock goes up";

.stock {
    /* < -1% would say when it goes down */
    delta-increase > 1%;
}
=>
:notify {
    message: "You're making money";
}

====

@name "Share my activity when I work out";

/* Like the twitter case, this watches all configured google accounts */
.google-account:new-fit-activity { }
=>
.instagram {
    post: selfie(#camera-front1);
}

====

@name "Call My number when Fido is lost";

/* 'fido' is a custom tag applied to Fido's tracker. One can't really
   use #something (unless generating the rule automatically) because
   likely that would be #uuid-random-garbage.
   Technically, this means that if one has two dogs, both tagged as Fido,
   both would trigger the action. I'm not sure that's necessarily wrong
   though.

   I'm assuming .dog.fido.location matches a location tracker sensor
   (like .person.location above) so the implicit trigger is ok.
*/
.dog.fido.location {
    distance(location, #home.location) > 5km;
}
=>
#phone:call {
    number: "555-MY-NUMBER";
}

====

/* More examples from the first Rulepedia presentation */

@name "Tweet happy new year at midnight on new year's eve";

/* for calendar time we should reuse the systemd.time syntax, which
   in turn is based on cron's syntax, with some extensions
   very powerful and kind of easy to understand
*/
:calendar-time("*-01-01") { }
=>
.twitter {
    tweet: "Happy new year!";
}

====

/* This one is tricky to do because our semantics don't cover
   the negated case, ie, the negation of a trigger does not negate
   an action.
   In the specific case one can do with two rules, one to do and one
   to undo. Not sure if it generalizes.
   Maybe it can be solved at the UI level, where we generate this
   kind of rule.
*/

@name "Turn phone into vibration mode during lecture";

/* time based */
:calendar-time("Mon,Wed 10:30") {}
=>
#phone {
    vibrate: on;
    sound: off;
}

====

@name "Turn phone into normal mode after lecture";

/* time based */
:calendar-time("Mon,Wed 11:30") {}
=>
#phone {
    vibrate: off;
    sound: on;
}

====

/* Same thing but smarter. I think it's technically doable, but
   I'm not sure how generally useful this would be

   Assumes that one has all classes into Google Calendar, and then
   we pull from it, keep it sync, and schedule stuff at the beginning
   of calendar events.
*/

@name "Turn phone into vibration mode during lecture";

.google-account:begin-calendar-event {
    description ~= "class";
}
=>
#phone {
    vibrate: on;
    sound: off;
}

====

/* Again we don't have negation so we need a separate off rule */

@name "Turn phone into vibration mode after lecture";

.google-account:end-calendar-event {
    description ~= "class";
}
=>
#phone {
    vibrate: off;
    sound: on;
}

====

@name "When bank balance falls below $500, notify via Omlet message";

.bank-account {
    balance < 500usd;
}
=>
.omlet:message {
    to: "my-omlet-id";
    message: "You're broke!";
}

====

@name "Turn off sprinkler if it's going to rain tomorrow";

:weather(1day) {
    forecast ~= "rain";
}
=>
.sprinkler {
    power: off;
}

====

/* The final Rulepedia demos */

@name "Show steps on Corktastic";
@name "When every 30s, compute the aggregate statistics of step-count over the last 30 m, post a message to Corktastic containing \"In the last 30 minutes, Rocco walked {{...}} steps!\" to the closest device";

/* Not sure about this. This is one way to do it */
:timer(30s) { }
/* The semantics of this "channel" would be kind of weird: it never emits any
   data, but if you read .event it will give you the value you want.

   In practice, this would give the rule the exact semantics that we need,
   but would also screw the current implementation pretty badly, as proxies
   would never see any data and .event would need to be async to query the
   web service...

   (OTOH, if we introduce this kind of "manual poll" channels, we get back
   exactly what we had in Rulepedia with no-op actions that updated the
   context)
*/
.google-account:fit-aggregate(30m) as fit {
    steps > 0;
}
=>
/* like .nearby, .closest is an automatically added tag */
.corktastic.closest {
    post: "In the last 30 minutes, Rocco walked " fit.steps " steps!";
}

====

/* Another take on this rule */
@name "Show steps on Corktastic";

/* This is the simpler (from an impl perspective) way to implement the
   same rule: the polling happens inside the channel, and the channel emits
   an event when it has new/different data.

   Potentially the 30s can be hard-coded, so the semantics of this rule
   would change to "When you have walked more than 0 steps in the last 30m,
   post a message on Corktastic".
   Hard-coding the polling has the problem of potentially flooding the sink
   device with rapid messages. Jiwon for this proposed rate-limiting the sink
   instead of controlling the source.
*/
.google-account:fit-aggregate(30s, 30m) as fit {
    steps > 0;
}
=>
/* like .nearby, .closest is an automatically added tag */
.corktastic.closest {
    post: "In the last 30 minutes, Rocco walked " fit.steps " steps!";
}

====

@name "Show the picture of the UPS guy at the door in Sabrina";

.camera.doorbell as in {
    ringing: true;
    detects(picture) ~= "face";
    detects(picture) ~= "ups";
}
=>
#sabrina {
    message: in.picture;
}

====

/* A bunch of recommended rules from ifttt.com
   (the ones that are not duplicate or boring)
*/

@name "Email me my Android pictures";

#phone:picture-taken as in {
}
=>
/* this could be .email, but it would send an email through all
   accounts capable of email
   not sure that would ever make sense
*/
.google-account:email {
    to: "my.account@example.com";
    subject: "Look at my Pic!";
    /* do we need the picture call? can we do some clever by
       default conversion of the argument? */
    body: picture(in.picture);
}

====

@name "Turn hue lights on with Siri";
@description "Add an IFTTT contact in your iPhone with the email address trigger@recipe.ifttt.com. Tell Siri to send an email to I.F.T.T.T and say you want #hue as the subject when prompted";

/* Yes, this is a real rule. Yes, ifttt.com is a production system. Gosh */

/* This rule watches your real email, not trigger@recipe.ifttt.com or any other
   fake account. Not sure if it matters */
.email {
    subject ~= "#hue";
}
=>
.light.hue {
    power: on;
}

====

@name "Turn hue lights on with Sabrina";
/* This is how you would actually do it, if ifttt wasn't braindead - see below
   for comments on #sabrina */

#sabrina {
    command ~= "hue";
    command ~= "on";
}
=>
.light.hue {
    power: on;
}

====

@name "Turn ringtone back up when I leave work";

/* Location based */

@setting work {
    title: "Your work location";
    description: "Insert where you work here";
    type: location;
}

#me:location {
    distance(location, @work) > 100m;
}
=>
/* The difference between #me and #phone is that phone only tracks settings
   (ie, #phone turns into a phone-sink channel instantiated with a #phone device),
   but attempting to create a me-sink channel, or really thingengine-sink, fails.
   #phone also has a bunch of other phone specific channels, like :call and :sms.

   Not sure any of this makes sense.
   #me { vibrate: off; }
   reads awkward though.
*/
#phone {
    vibrate: off;
    sound: on;
}

====

/* IFTTT also has Do recipes. This is how some of the popular ones could
   be implemented
*/

/* This assumes sabrina just produces the voice-to-text result, or even
   just the typed result.
   Not sure how we could have Sabrina do something more semantic.
   Investigation welcome.

   Also, this uses the # syntax instead of . to mean exactly the one device
   with uniqueId 'sabrina', on the assumption that Sabrina is a special
   device cognate of the thingengine-phone (which it is in practice).
   If Sabrina grows independently of ThingEngine as an entity, then one
   could conceivably have more Sabrina accounts configured and this
   would be .sabrina. Not a big difference probably.
*/
#sabrina {
    /* yes, you can filter on the same property more than once */
    command ~= "hue";
    command ~= "color dance";
}
=>
/* This uses the "color dance" feature of Philips Hue lights.
   Can we instead have this be ThingEngine driven?

   Ie, can we say
   .light.hue {
        color: dance(rgb(255, 0, 0), rgb(0, 255, 0), rgb(0, 0, 255));
   }
   ?

    What would the semantics be of this "animation" setting?
    Would it be a special value the channel code recognizes and that
    drives an animation there (not different from driving it in the
    device)? Or would the AppExecutor know about running animations?
    Are there other cases where we want to drive animations from the
    engine?
*/
.light.hue {
    color: "dance";
}
