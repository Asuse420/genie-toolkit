dataset @org.thingpedia.everything {
    program (p_hashtag : Entity(tt:hashtag)) := monitor(@com.twitter.home_timeline(), contains(hashtags, p_hashtag)) => @com.twitter.retweet(tweet_id=tweet_id)
    #[id=-1]
    #_[preprocessed=["autoretweet tweets with $p_hashtag", "autoretweet $p_hashtag"]];

    action () := @com.twitter.post()
    #[id=0]
    #_[preprocessed=["tweet something", "post on twitter"]];

    action (p_status : String) := @com.twitter.post(status=p_status)
    #[id=1]
    #_[preprocessed=["tweet ${p_status}", "post ${p_status} on twitter"]];

    action (p_caption : String, p_picture_url : Entity(tt:picture)) := @com.twitter.post_picture(caption=p_caption, picture_url=p_picture_url)
    #[id=1.5]
    #_[preprocessed=["tweet ${p_picture_url} with caption ${p_caption}"]];

    query (p_query : String) := @com.bing.web_search(query=p_query)
    #[id=2]
    #_[preprocessed=["websites matching ${p_query}", "${p_query:const} websites", "${p_query:const} on bing"]];

    query (p_query : String) := @com.bing.image_search(query=p_query)
    #[id=3]
    #_[preprocessed=["images matching ${p_query}", "${p_query:const} images"]];

    query (p_query : String) := sort(title asc of @com.bing.image_search(query=p_query))
    #[id=3]
    #_[preprocessed=["images matching ${p_query} sorted by title", "${p_query:const} images sorted by title"]];

    query (p_query : String) := count(@com.bing.image_search(query=p_query))
    #[id=4]
    #_[preprocessed=["the number of images that match ${p_query}", "the count of images that match ${p_query:const}"]];

    query (p_query : String) := [link] of @com.bing.image_search(query=p_query)
    #[id=5]
    #_[preprocessed=["the link to images that match ${p_query}"]];
    
    action := @light-bulb.set_power(power=enum(on))
    #[id=6]
    #_[preprocessed=["turn on my lights"]];
    
    action (p_name : String) := @light-bulb(name=p_name).set_power(power=enum(on))
    #[id=7]
    #_[preprocessed=["turn on my $p_name lights"]];
}
dataset @com.spotify2 {
    // this combination is so common it warrants its own primitive template...
    query (p_song :String, p_artist :Entity(com.spotify2:artist)) := @com.spotify2.song(), id =~ p_song && contains(artists, p_artist)
    #_[utterances=["${p_song:no-undefined} by ${p_artist}",
                   "${p_song:no-undefined} from ${p_artist}"]];

    program := @com.spotify2.play_song(song=$?)
    #_[utterances=["play some music on spotify",
                   "open spotify and play some music",
                   "use spotify to play some music"]]
    #[id=27924738]
    #[name=""];

    action (p_song :Entity(com.spotify2:song)) := @com.spotify2.play_song(song=p_song)
    #_[utterances=["play ${p_song} on spotify",
                   "on spotify play ${p_song}",
                   "play ${p_song}",
                   "i would like to hear ${p_song}",
                   "i would like to listen to ${p_song}"]]
    #[id=27924741]
    #[name=""];

    /*action (p_state :Enum(on,off)) := @com.spotify2.player_shuffle(shuffle=p_state)
    #_[utterances=["turn shuffle ${p_state}",
                   "turn ${p_state} shuffle"]]
    #[id=27924854]
    #[name=""];*/

    action := @com.spotify2.player_shuffle(shuffle=enum(on))
    #_[utterances=["shuffle my spotify"]]
    #[id=27924856]
    #[name=""];

    action := @com.spotify2.player_repeat(repeat=enum(track))
    #_[utterances=["repeat this song",
                   "turn on repeat"]]
    #[id=27924857]
    #[name=""];

    action := @com.spotify2.player_repeat(repeat=enum(off))
    #_[utterances=["turn off repeat"]]
    #[id=27924859]
    #[name=""];

    action := @com.spotify2.player_next()
    #_[utterances=["play the next song",
                   "skip this song"]]
    #[id=27924859]
    #[name=""];

    action := @com.spotify2.player_previous()
    #_[utterances=["play the previous song",
                   "go back a song"]]
    #[id=27924859]
    #[name=""];

    action := @com.spotify2.player_play()
    #_[utterances=["continue playback",
                   "continue playing"]]
    #[id=27924859]
    #[name=""];

    action := @com.spotify2.player_pause()
    #_[utterances=["paused playback",
                   "paused playing"]]
    #[id=27924859]
    #[name=""];

    // TODO: use "action" here so we can combine with streams
    program (p_artist :Entity(com.spotify2:artist)) :=
      @com.spotify2.song(), contains(artists, p_artist) => @com.spotify2.play_song(song=id)
    #_[utterances=["play ${p_artist:no-undefined}",
                   "play music by ${p_artist:no-undefined}",
                   "play some ${p_artist:no-undefined}",
                   "play the artist ${p_artist:no-undefined}",
                   "i would like to hear ${p_artist:no-undefined}",
                   "i would like to listen to ${p_artist:no-undefined}",
                   "i would like to listen to the artist ${p_artist:no-undefined}"]]
    #[id=27924875]
    #[name=""];

    program (p_album :Entity(com.spotify2:album)) :=
      @com.spotify2.song(), album == p_album => @com.spotify2.play_song(song=id)
    #_[utterances=["play ${p_album:no-undefined}",
                   "play the album ${p_album:no-undefined}",
                   "i would like to hear ${p_album:no-undefined}",
                   "i would like to hear the album ${p_album:no-undefined}",
                   "i would like to listen to ${p_album:no-undefined}"]]
    #[id=27924878]
    #[name=""];

    program (p_album :Entity(com.spotify2:album), p_artist :Entity(com.spotify2:artist)) :=
      @com.spotify2.song(), album == p_album && contains(artists, p_artist) => @com.spotify2.play_song(song=id)
    #_[utterances=["play ${p_album:no-undefined} by ${p_artist:no-undefined}",
                   "play the album ${p_album:no-undefined} by ${p_artist:no-undefined}",
                   "i would like to listen the album ${p_album:no-undefined} by ${p_artist:no-undefined}",
                   "i would like to listen the album ${p_album:no-undefined} from ${p_artist:no-undefined}"]]
    #[id=27924878]
    #[name=""];

    stream := monitor (@com.spotify2.get_user_top_tracks())
    #_[utterances=["when my top tracks changes",
                   "when I have new favorite songs"]]
    #[id=27924898]
    #[name=""];

    stream := monitor (@com.spotify2.get_currently_playing())
    #_[utterances=["when a song is playing"]]
    #[id=27924900]
    #[name=""];
}
