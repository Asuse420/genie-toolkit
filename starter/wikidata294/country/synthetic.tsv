S4000000000	get an country	now => @org.wikidata.country => notify
S4000000001	please search for any country .	now => @org.wikidata.country => notify
S4000000002	get an country .	now => @org.wikidata.country => notify
S4000000003	please search for any country	now => @org.wikidata.country => notify
S4000000004	please list country	now => @org.wikidata.country => notify
S4000000005	please list country .	now => @org.wikidata.country => notify
S4000000006	get an country	now => @org.wikidata.country => notify
S4000000007	get an country .	now => @org.wikidata.country => notify
S4000000008	please search for any country .	now => @org.wikidata.country => notify
S4000000009	please list country	now => @org.wikidata.country => notify
S4000000010	get an country .	now => @org.wikidata.country => notify
S4000000011	please list country .	now => @org.wikidata.country => notify
S4000000012	what are country which have age of candidacy 0	now => ( @org.wikidata.country ) filter param:age_of_candidacy:Number == 0 => notify
S4000000013	retrieve a list of all country	now => @org.wikidata.country => notify
S4000000014	list country	now => @org.wikidata.country => notify
S4000000015	please search for any country	now => @org.wikidata.country => notify
S5000000016	i need the list of country with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000017	get a country digital atlas of the roman empire id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 => notify
S5000000018	search the country having insee countries and foreign territories code including QUOTED_STRING_0 and the minimum minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) asc of ( ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S5000000019	i need the list of country with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000020	i 'm looking for the country with the most participant in	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000021	i am looking for the country with the most participant in	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000022	are there country having insee countries and foreign territories code including QUOTED_STRING_0 which is subclass of QUOTED_STRING_0 ?	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 and param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000023	i am looking for the country with the most participant in	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000024	i am looking for the country with the most participant in	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000025	i 'm looking for the list of all country which have insee countries and foreign territories code including QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S5000000026	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000027	please search for the list of country pactols thesaurus id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:pactols_thesaurus_id:String =~ QUOTED_STRING_0 => notify
S5000000028	i 'm looking for the country with the most participant in .	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000029	i 'm looking for the list of all country which have insee countries and foreign territories code including QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S5000000030	i 'm looking for the country with the most participant in .	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000031	please search for the list of country pactols thesaurus id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:pactols_thesaurus_id:String =~ QUOTED_STRING_0 => notify
S5000000032	i need the list of country with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000033	retrieve a country located in the administrative territorial entity LOCATION_0 .	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == LOCATION_0 => notify
S5000000034	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000035	which country is QUOTED_STRING_0 part , and get basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy and param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000036	search the country having insee countries and foreign territories code including QUOTED_STRING_0 and the minimum minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) asc of ( ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S5000000037	get all the country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000038	i am looking for the list of all country which have insee countries and foreign territories code including QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S5000000039	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000040	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000041	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000042	i 'm looking to search for the list of country with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000043	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S5000000044	i am looking for the list of all country which have insee countries and foreign territories code including QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S5000000045	find all country which have insee countries and foreign territories code including QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S5000000046	what are country pactols thesaurus id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:pactols_thesaurus_id:String =~ QUOTED_STRING_0 => notify
S5000000047	i 'm looking for the country with the most participant in .	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S6000000048	search every country digital atlas of the roman empire id QUOTED_STRING_0 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000049	please enumerate country digital atlas of the roman empire id QUOTED_STRING_0 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000050	find some country digital atlas of the roman empire id QUOTED_STRING_0 driving side left .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000051	i 'd like the list of all country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S6000000052	which patron saint does the country with the minimum minimum temperature record have ?	now => [ param:patron_saint:Entity(org.wikidata:human) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000053	retrieve the list of country that have greater population than 0 and having insee countries and foreign territories code including QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 and param:population:Number >= 0 => notify
S6000000054	search for the country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000055	which country get inception now and are QUOTED_STRING_0 part ?	now => ( @org.wikidata.country ) filter param:inception:Date == now and param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S6000000056	which head of governments do country with the minimum minimum temperature record have	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000057	i need any country digital atlas of the roman empire id QUOTED_STRING_0 driving side left .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000058	what 's the inception of the country with the minimum minimum temperature record ?	now => [ param:inception:Date ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000059	search for the country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000060	i am looking for the country digital atlas of the roman empire id QUOTED_STRING_0 with the smallest count of participant in	now => ( sort param:count:Number asc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000061	tell me the category of associated people of the country with the minimum minimum temperature record .	now => [ param:category_of_associated_people:Entity(org.wikidata:category_of_associated_people) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000062	which head of governments do country with the minimum minimum temperature record have	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000063	which are the country which have inception now and have speed limit 0 kph	now => ( @org.wikidata.country ) filter param:inception:Date == now and param:speed_limit:Measure(mps) == 0 unit:kmph => notify
S6000000064	what is country with basic form of government monarchy which have inception 0 s before now ?	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy and param:inception:Date == now - 0 unit:s => notify
S6000000065	find some country digital atlas of the roman empire id QUOTED_STRING_0 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000066	i need any country digital atlas of the roman empire id QUOTED_STRING_0 driving side left .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000067	retrieve the list of country that have greater population than 0 and having insee countries and foreign territories code including QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 and param:population:Number >= 0 => notify
S6000000068	which category of people buried here does the country with the minimum minimum temperature record have ?	now => [ param:category_of_people_buried_here:Entity(org.wikidata:category_of_people_buried_here) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000069	i am looking for the main regulatory text of country .	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( @org.wikidata.country ) => notify
S6000000070	which ethnic groups does country have ?	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( @org.wikidata.country ) => notify
S6000000071	get the list of country driving side left , which have inception now	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:inception:Date == now => notify
S6000000072	i am looking for the country digital atlas of the roman empire id QUOTED_STRING_0 with the smallest count of participant in .	now => ( sort param:count:Number asc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000073	which country get cooler minimum temperature record than 0 f and greater population than 0 ?	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) <= 0 unit:F and param:population:Number >= 0 => notify
S6000000074	i would like the list of all country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S6000000075	search a list of country having insee countries and foreign territories code including QUOTED_STRING_0 which is subclass of QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 and param:subclass_of:String =~ QUOTED_STRING_0 => notify
S6000000076	which is the country that have time of earliest written record 0 s before now	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == now - 0 unit:s => notify
S6000000077	retrieve every country digital atlas of the roman empire id QUOTED_STRING_0 driving side left .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000078	i 'm looking for the country digital atlas of the roman empire id QUOTED_STRING_0 with the smallest count of participant in .	now => ( sort param:count:Number asc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000079	search for the country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 and have the highest minimum temperature record	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000080	get the country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S6000000081	search for the country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000082	search every country digital atlas of the roman empire id QUOTED_STRING_0 driving side left .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000083	what is the anthem of the country with the minimum minimum temperature record ?	now => [ param:anthem:Entity(org.wikidata:song) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000084	i 'm looking for the main regulatory text of country .	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( @org.wikidata.country ) => notify
S6000000085	is there any country that have earlier inception than 0 weeks before now	now => ( @org.wikidata.country ) filter param:inception:Date <= now - 0 unit:week => notify
S6000000086	i 'd like the country with basic form of government monarchy that have age of candidacy 0	now => ( @org.wikidata.country ) filter param:age_of_candidacy:Number == 0 and param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S6000000087	tell me the category of associated people of the country with the minimum minimum temperature record	now => [ param:category_of_associated_people:Entity(org.wikidata:category_of_associated_people) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000088	search for the country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000089	get some country which have insee countries and foreign territories code including QUOTED_STRING_0 , and have bigger area than 0 square meters	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 0 unit:m2 and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S6000000090	i 'd like the country which have inception now and have the minimum minimum temperature record	now => ( sort param:minimum_temperature_record:Measure(C) asc of ( ( @org.wikidata.country ) filter param:inception:Date == now ) ) [ 1 ] => notify
S6000000091	please enumerate country with minimum temperature record 0 f	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == 0 unit:F => notify
S6000000092	search for the country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 and have the highest minimum temperature record	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000093	find some country digital atlas of the roman empire id QUOTED_STRING_0 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000094	what are the shares border with of the country with the minimum minimum temperature record ?	now => [ param:shares_border_with:Array(Entity(org.wikidata:country)) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000095	search for the country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000096	i 'd like the list of all country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S6000000097	search for the country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000098	i am looking for the country digital atlas of the roman empire id QUOTED_STRING_0 with the smallest count of participant in .	now => ( sort param:count:Number asc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000099	i need any country digital atlas of the roman empire id QUOTED_STRING_0 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000100	tell me what is the main regulatory text of country .	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( @org.wikidata.country ) => notify
S6000000101	what are the nicknames of the country with the minimum minimum temperature record	now => [ param:nickname:Array(String) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000102	get the country driving side left which have insee countries and foreign territories code including QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 => notify
S6000000103	enumerate country which is subclass of QUOTED_STRING_0 , with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy and param:subclass_of:String =~ QUOTED_STRING_0 => notify
S6000000104	i 'd like the country with basic form of government monarchy that have age of candidacy 0 .	now => ( @org.wikidata.country ) filter param:age_of_candidacy:Number == 0 and param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S6000000105	please enumerate country with minimum temperature record 0 f .	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == 0 unit:F => notify
S6000000106	enumerate country which is subclass of QUOTED_STRING_0 , with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy and param:subclass_of:String =~ QUOTED_STRING_0 => notify
S6000000107	i need any country digital atlas of the roman empire id QUOTED_STRING_0 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ QUOTED_STRING_0 and param:driving_side:Enum(Left,Right) == enum:Left => notify
S6000000108	what topic's main wikimedia portal does country with the minimum minimum temperature record have	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000109	i 'd like the country with basic form of government monarchy that have age of candidacy 0 .	now => ( @org.wikidata.country ) filter param:age_of_candidacy:Number == 0 and param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
S6000000110	retrieve the list of country that have greater population than 0 and having insee countries and foreign territories code including QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ QUOTED_STRING_0 and param:population:Number >= 0 => notify
S6000000111	i 'm looking for the main regulatory text of country	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( @org.wikidata.country ) => notify
S4000000000	search all the country .	now => @org.wikidata.country => notify
S4000000001	get a list of country .	now => @org.wikidata.country => notify
S4000000002	i would like to find any country .	now => @org.wikidata.country => notify
S4000000003	i 'm looking for every country	now => @org.wikidata.country => notify
S4000000004	get the country	now => @org.wikidata.country => notify
S4000000005	get the country .	now => @org.wikidata.country => notify
S4000000006	get the country .	now => @org.wikidata.country => notify
S4000000007	i 'd like to find any country	now => @org.wikidata.country => notify
S4000000008	get the country .	now => @org.wikidata.country => notify
S4000000009	i 'm looking to search every country	now => @org.wikidata.country => notify
S4000000010	i 'd like to find any country	now => @org.wikidata.country => notify
S4000000011	i am looking for every country	now => @org.wikidata.country => notify
S4000000012	i would like to find any country	now => @org.wikidata.country => notify
S4000000013	i am looking for every country .	now => @org.wikidata.country => notify
S4000000014	i 'm looking to search every country .	now => @org.wikidata.country => notify
S4000000015	i 'm looking for every country .	now => @org.wikidata.country => notify
S5000000016	i would like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
S5000000017	i 'd like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
S5000000018	i 'd like to search some country having gini coefficient NUMBER_0	now => ( @org.wikidata.country ) filter param:gini_coefficient:Number == NUMBER_0 => notify
S5000000019	i would like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
S5000000020	i want the country with suicide rate NUMBER_0 and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 ) ) [ 1 ] => notify
S5000000021	search any country treccani id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ QUOTED_STRING_0 => notify
S5000000022	get an country treccani id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ QUOTED_STRING_0 => notify
S5000000023	get the list of all country maintained by wiki project QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:maintained_by_wikiproject:String =~ QUOTED_STRING_0 => notify
S5000000024	i am looking to retrieve a list of all country driving side left .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left => notify
S5000000025	get an country treccani id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ QUOTED_STRING_0 => notify
S5000000026	i would like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
S5000000027	i want the country with suicide rate NUMBER_0 and the latest inception .	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 ) ) [ 1 ] => notify
S5000000028	i 'd like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
S5000000029	i would like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
S5000000030	i need any country maintained by wiki project QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:maintained_by_wikiproject:String =~ QUOTED_STRING_0 => notify
S5000000031	search any country treccani id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ QUOTED_STRING_0 => notify
S5000000032	i 'm looking to retrieve a list of all country driving side left .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left => notify
S5000000033	are there country that have more slowly speed limit than NUMBER_0 kilometers per hour ?	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:kmph => notify
S5000000034	search for a list of all country treccani id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ QUOTED_STRING_0 => notify
S5000000035	i 'd like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
S5000000036	what country have minimum temperature record NUMBER_0 fahrenheit ?	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:F => notify
S5000000037	i need to retrieve the country which are QUOTED_STRING_0 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000038	search any country treccani id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ QUOTED_STRING_0 => notify
S5000000039	search any country treccani id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ QUOTED_STRING_0 => notify
S5000000040	i want the country with suicide rate NUMBER_0 and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 ) ) [ 1 ] => notify
S5000000041	i want the country with suicide rate NUMBER_0 and the latest inception .	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 ) ) [ 1 ] => notify
S5000000042	search for a list of all country treccani id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ QUOTED_STRING_0 => notify
S5000000043	i need to retrieve the country which are QUOTED_STRING_0 's part	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000044	search any country treccani id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ QUOTED_STRING_0 => notify
S5000000045	i need to retrieve the country which are QUOTED_STRING_0 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000046	i want the country with suicide rate NUMBER_0 and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 ) ) [ 1 ] => notify
S5000000047	search any country treccani id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ QUOTED_STRING_0 => notify
S6000000048	i would like some country with less unemployment rate than NUMBER_0 that have life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms and param:unemployment_rate:Number <= NUMBER_0 => notify
S6000000049	i 'm looking to search a list of country with life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
S6000000050	i need the country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
S6000000051	search the country having maximum temperature record NUMBER_0 degrees and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature ) ) [ 1 ] => notify
S6000000052	i need the country treccani id QUOTED_STRING_0 that are QUOTED_STRING_0 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 and param:treccani_id:String =~ QUOTED_STRING_0 => notify
S6000000053	tell me the foundational text of the country which has the most slowly speed limit .	now => [ param:foundational_text:Entity(org.wikidata:foundational_text) ] of ( ( sort param:speed_limit:Measure(mps) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000054	search an country with life expectancy NUMBER_0 seconds	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
S6000000055	i need the country that have life expectancy NUMBER_0 seconds and have the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
S6000000056	i 'd like a list of all country having speed limit slower than NUMBER_0 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
S6000000057	i 'd like some country with less unemployment rate than NUMBER_0 that have life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms and param:unemployment_rate:Number <= NUMBER_0 => notify
S6000000058	what is country which have time of earliest written record NUMBER_0 seconds before today	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - NUMBER_0 unit:s => notify
S6000000059	what are country that have time of earliest written record NUMBER_0 ms before today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - NUMBER_0 unit:ms => notify
S6000000060	i need the country that have life expectancy NUMBER_0 seconds and have the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
S6000000061	i need the country treccani id QUOTED_STRING_0 that are QUOTED_STRING_0 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 and param:treccani_id:String =~ QUOTED_STRING_0 => notify
S6000000062	which country get life expectancy longer than NUMBER_0 ms and inception before NUMBER_0 ms ago ?	now => ( @org.wikidata.country ) filter param:inception:Date <= now - NUMBER_0 unit:ms and param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
S6000000063	i would like to retrieve all country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
S6000000064	i want any country treccani id QUOTED_STRING_0 jewish encyclopedia id ( russian) QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:jewish_encyclopedia_id_russian_:String =~ QUOTED_STRING_0 and param:treccani_id:String =~ QUOTED_STRING_0 => notify
S6000000065	search the country having maximum temperature record NUMBER_0 degrees and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature ) ) [ 1 ] => notify
S6000000066	search an country with life expectancy NUMBER_0 seconds	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
S6000000067	what are country that have minimum temperature record NUMBER_0 fahrenheit and have time of earliest written record NUMBER_0 ms before today	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:F and param:time_of_earliest_written_record:Date == start_of unit:day - NUMBER_0 unit:ms => notify
S6000000068	get all the country having speed limit slower than NUMBER_0 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
S6000000069	i am looking to search a list of country with life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
S6000000070	i need the country that have life expectancy NUMBER_0 seconds and have the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
S6000000071	i need all country with life expectancy NUMBER_0 seconds	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
S6000000072	enumerate country with life expectancy NUMBER_0 seconds .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
S6000000073	what 's the topic's main wikimedia portal of the country which has the most slowly speed limit	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:speed_limit:Measure(mps) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000074	enumerate country that have more slowly speed limit than NUMBER_0 kilometers per hour .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:kmph => notify
S6000000075	search the country with life expectancy NUMBER_0 seconds and the most slowly speed limit	now => ( sort param:speed_limit:Measure(mps) asc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
S6000000076	i need the country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
S6000000077	i would like a list of all country having speed limit slower than NUMBER_0 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
S6000000078	search the country with life expectancy NUMBER_0 seconds and the most slowly speed limit .	now => ( sort param:speed_limit:Measure(mps) asc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
S6000000079	i 'm looking to search a list of country with life expectancy longer than NUMBER_0 ms .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
S6000000080	enumerate country with life expectancy NUMBER_0 seconds .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
S6000000081	i 'd like a list of all country having speed limit slower than NUMBER_0 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
S6000000082	what are the head of governments of country	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( @org.wikidata.country ) => notify
S6000000083	i need the country treccani id QUOTED_STRING_0 that are QUOTED_STRING_0 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 and param:treccani_id:String =~ QUOTED_STRING_0 => notify
S6000000084	i want to know the speed limit of country .	now => [ param:speed_limit:Measure(mps) ] of ( @org.wikidata.country ) => notify
S6000000085	enumerate country with life expectancy NUMBER_0 seconds .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
S6000000086	what is the motto of country ?	now => [ param:motto:Entity(org.wikidata:motto) ] of ( @org.wikidata.country ) => notify
S6000000087	i need the country that have life expectancy NUMBER_0 seconds and have the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
S6000000088	what is the topic's main wikimedia portal of the country which has the most slowly speed limit	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:speed_limit:Measure(mps) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000089	i would like a list of all country having speed limit slower than NUMBER_0 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
S6000000090	i am looking to search a list of country with life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
S6000000091	search the country having maximum temperature record NUMBER_0 degrees and the latest inception .	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature ) ) [ 1 ] => notify
S6000000092	i would like some country with less unemployment rate than NUMBER_0 that have life expectancy longer than NUMBER_0 ms .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms and param:unemployment_rate:Number <= NUMBER_0 => notify
S6000000093	i 'm looking to search a list of country with life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
S6000000094	i need the country that have life expectancy NUMBER_0 seconds and have the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
S6000000095	i want any country treccani id QUOTED_STRING_0 jewish encyclopedia id ( russian) QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:jewish_encyclopedia_id_russian_:String =~ QUOTED_STRING_0 and param:treccani_id:String =~ QUOTED_STRING_0 => notify
S6000000096	i 'd like a list of all country having speed limit slower than NUMBER_0 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
S6000000097	i need the country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
S6000000098	i would like a list of all country having speed limit slower than NUMBER_0 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
S6000000099	i 'm looking to search a list of country with life expectancy longer than NUMBER_0 ms .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
S6000000100	i need the country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
S6000000101	i am looking to get an country having speed limit slower than NUMBER_0 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
S6000000102	what are the head of governments of country	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( @org.wikidata.country ) => notify
S6000000103	i want to get every country with less unemployment rate than NUMBER_0 that have life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms and param:unemployment_rate:Number <= NUMBER_0 => notify
S6000000104	i need the country treccani id QUOTED_STRING_0 that are QUOTED_STRING_0 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 and param:treccani_id:String =~ QUOTED_STRING_0 => notify
S6000000105	i need the country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
S6000000106	please retrieve an country driving side left treccani id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:treccani_id:String =~ QUOTED_STRING_0 => notify
S6000000107	search the country having maximum temperature record NUMBER_0 degrees and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature ) ) [ 1 ] => notify
S6000000108	how many short names are there in the country with the most short names	now => [ param:count:Number ] of ( ( sort param:count:Number desc of ( compute count ( param:short_name:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S6000000109	is there country that have more slowly speed limit than NUMBER_0 kilometers per hour , with inception before NUMBER_0 ms ago	now => ( @org.wikidata.country ) filter param:inception:Date <= now - NUMBER_0 unit:ms and param:speed_limit:Measure(mps) <= NUMBER_0 unit:kmph => notify
S6000000110	enumerate country with life expectancy NUMBER_0 seconds .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
S6000000111	i would like some country with less unemployment rate than NUMBER_0 that have life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms and param:unemployment_rate:Number <= NUMBER_0 => notify
S4000000000	search for all countries .	now => @org.wikidata.country => notify
S4000000001	i want a list of countries	now => @org.wikidata.country => notify
S4000000002	get a list of all countries .	now => @org.wikidata.country => notify
S4000000003	get a list of all countries .	now => @org.wikidata.country => notify
S4000000004	i am looking for every countries	now => @org.wikidata.country => notify
S4000000005	i want a list of countries	now => @org.wikidata.country => notify
S4000000006	retrieve the countries .	now => @org.wikidata.country => notify
S4000000007	i 'm looking for every countries	now => @org.wikidata.country => notify
S4000000008	i want a list of countries	now => @org.wikidata.country => notify
S4000000009	i want a list of countries .	now => @org.wikidata.country => notify
S4000000010	i want a list of countries .	now => @org.wikidata.country => notify
S4000000011	retrieve the countries	now => @org.wikidata.country => notify
S4000000012	retrieve the countries	now => @org.wikidata.country => notify
S4000000013	i want a list of countries	now => @org.wikidata.country => notify
S4000000014	is there countries having age of consent NUMBER_0 ?	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
S4000000015	i am looking for every countries	now => @org.wikidata.country => notify
S5000000016	get a list of countries that have age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
S5000000017	i want some countries located in the administrative territorial entity my home .	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
S5000000018	i need to find an countries which is QUOTED_STRING_0 's part	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000019	find all countries that have age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
S5000000020	get a list of countries that have age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
S5000000021	find some countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
S5000000022	i need to find an countries which is QUOTED_STRING_0 's part	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000023	which are countries historical gazetteer ( gov) id QUOTED_STRING_0 driving side left ?	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 => notify
S5000000024	i want some countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
S5000000025	i am looking for the countries driving side left which have the longest life expectancy	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left ) ) [ 1 ] => notify
S5000000026	please list countries that have age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
S5000000027	i need to find an countries which is QUOTED_STRING_0 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000028	i need to find an countries which is QUOTED_STRING_0 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000029	i 'd like an countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
S5000000030	i am looking for the countries driving side left which have the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left ) ) [ 1 ] => notify
S5000000031	i want some countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
S5000000032	i need to get an countries named QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:id:Entity(org.wikidata:country) =~ QUOTED_STRING_0 => notify
S5000000033	i am looking for the countries which is QUOTED_STRING_0 's part and have the longest life expectancy	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S5000000034	i want some countries located in the administrative territorial entity my home .	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
S5000000035	i am looking for the countries which is QUOTED_STRING_0 's part and have the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S5000000036	i 'm looking for the countries driving side left which have the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left ) ) [ 1 ] => notify
S5000000037	i need to find an countries which is QUOTED_STRING_0 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000038	find all countries that have age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
S5000000039	i want some countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
S5000000040	i want some countries located in the administrative territorial entity my home .	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
S5000000041	i 'd like an countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
S5000000042	what are countries which is QUOTED_STRING_0 's part , and have age of consent NUMBER_0 ?	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000043	i want a list of countries which is QUOTED_STRING_0 's part	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 => notify
S5000000044	i 'm looking for the countries which is QUOTED_STRING_0 's part and have the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S5000000045	please list countries that have age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
S5000000046	i 'm looking for the countries driving side left which have the longest life expectancy	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left ) ) [ 1 ] => notify
S5000000047	is there any countries named QUOTED_STRING_0 that have earlier time of earliest written record than yesterday	now => ( @org.wikidata.country ) filter param:id:Entity(org.wikidata:country) =~ QUOTED_STRING_0 and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day => notify
S6000000048	please search some countries with world cat identities id QUOTED_STRING_0 which have earlier time of earliest written record than yesterday .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000049	i need to retrieve the list of countries that have minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000050	i 'm looking for the list of countries that have minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000051	list countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000052	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000053	i would like any countries historical gazetteer ( gov) id QUOTED_STRING_0 , with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000054	get all countries historical gazetteer ( gov) id QUOTED_STRING_0 , with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000055	i 'd like all countries with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000056	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000057	i want the countries which have time of earliest written record tue	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
S6000000058	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000059	i want the countries which have time of earliest written record tue	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
S6000000060	is there countries having time of earliest written record NUMBER_0 milliseconds ago ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == now - NUMBER_0 unit:ms => notify
S6000000061	please search some countries with world cat identities id QUOTED_STRING_0 which have earlier time of earliest written record than yesterday	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000062	i want the countries which have time of earliest written record tue .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
S6000000063	list countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000064	list countries that have minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000065	tell me the language used of countries	now => [ param:language_used:Entity(tt:iso_lang_code) ] of ( @org.wikidata.country ) => notify
S6000000066	get all countries historical gazetteer ( gov) id QUOTED_STRING_0 , with minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000067	i need all the countries which have time of earliest written record tue .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
S6000000068	get all countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000069	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000070	i would like any countries historical gazetteer ( gov) id QUOTED_STRING_0 , with minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000071	get all countries historical gazetteer ( gov) id QUOTED_STRING_0 , with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000072	what is the currency of the countries with the highest annual number of weddings	now => [ param:currency:Entity(org.wikidata:currency) ] of ( ( sort param:annual_number_of_weddings:Number desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000073	please search some countries with world cat identities id QUOTED_STRING_0 which have earlier time of earliest written record than yesterday	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000074	i would like to get all countries which have world cat identities id QUOTED_STRING_0 and have zero annual number of weddings	now => ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000075	i need to retrieve the list of countries that have minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000076	search for the countries with world cat identities id QUOTED_STRING_0 which have earlier time of earliest written record than yesterday and have the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day and param:worldcat_identities_id:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000077	what 's the legislative body of the countries with the longest life expectancy	now => [ param:legislative_body:Entity(org.wikidata:legislative_body) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000078	i would like to get all countries which have world cat identities id QUOTED_STRING_0 and have zero annual number of weddings	now => ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000079	please search some countries with world cat identities id QUOTED_STRING_0 which have earlier time of earliest written record than yesterday	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000080	what is the area of countries	now => [ param:area:Measure(m2) ] of ( @org.wikidata.country ) => notify
S6000000081	find the countries with time of earliest written record earlier than DATE_0 and zero annual number of weddings and the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:time_of_earliest_written_record:Date <= DATE_0 ) ) [ 1 ] => notify
S6000000082	what are the countries which have world cat identities id QUOTED_STRING_0 and have zero annual number of weddings ?	now => ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000083	get the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000084	list countries that have minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000085	get all countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000086	is there countries with time of earliest written record tue ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
S6000000087	what countries have inception NUMBER_0 milliseconds ago	now => ( @org.wikidata.country ) filter param:inception:Date == now - NUMBER_0 unit:ms => notify
S6000000088	i want the countries which have time of earliest written record tue	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
S6000000089	show me what 's the quality of countries	now => [ param:has_quality:Entity(org.wikidata:has_quality) ] of ( @org.wikidata.country ) => notify
S6000000090	i want the countries which have time of earliest written record tue .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
S6000000091	get all countries historical gazetteer ( gov) id QUOTED_STRING_0 , with minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000092	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000093	i would like to get all countries which have world cat identities id QUOTED_STRING_0 and have zero annual number of weddings .	now => ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000094	i would like any countries historical gazetteer ( gov) id QUOTED_STRING_0 , with minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000095	get the countries with world cat identities id QUOTED_STRING_0 with the most award received .	now => ( sort param:count:Number desc of ( compute count ( param:award_received:Array(Entity(org.wikidata:award)) ) of ( ( @org.wikidata.country ) filter param:worldcat_identities_id:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000096	what category for people who died here does the countries with the longest life expectancy have	now => [ param:category_for_people_who_died_here:Entity(org.wikidata:category_for_people_who_died_here) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000097	i want the countries which have time of earliest written record tue .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
S6000000098	i 'm looking for the list of countries that have minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000099	get all countries historical gazetteer ( gov) id QUOTED_STRING_0 , with minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000100	are there countries having inception NUMBER_0 milliseconds ago ?	now => ( @org.wikidata.country ) filter param:inception:Date == now - NUMBER_0 unit:ms => notify
S6000000101	get the countries with world cat identities id QUOTED_STRING_0 with the most award received	now => ( sort param:count:Number desc of ( compute count ( param:award_received:Array(Entity(org.wikidata:award)) ) of ( ( @org.wikidata.country ) filter param:worldcat_identities_id:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000102	i want the countries which have time of earliest written record tue .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
S6000000103	i would like to get all countries which have world cat identities id QUOTED_STRING_0 and have zero annual number of weddings	now => ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000104	is there any countries having time of earliest written record after NUMBER_0 ms before yesterday	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= ( start_of unit:day - 1 unit:day ) - NUMBER_0 unit:ms => notify
S6000000105	get the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000106	i 'm looking for the list of countries that have minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000107	i would like any countries historical gazetteer ( gov) id QUOTED_STRING_0 , with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000108	get all countries historical gazetteer ( gov) id QUOTED_STRING_0 , with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ QUOTED_STRING_0 and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000109	i want to search for any countries that have minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
S6000000110	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S6000000111	list countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
S4000000000	find every countries	now => @org.wikidata.country => notify
S4000000001	i 'd like to search any countries .	now => @org.wikidata.country => notify
S4000000002	find every countries	now => @org.wikidata.country => notify
S4000000003	i want to search for all countries	now => @org.wikidata.country => notify
S4000000004	find the countries with the most lasting life expectancy	now => ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] => notify
S4000000005	find every countries .	now => @org.wikidata.country => notify
S4000000006	i want the list of all countries	now => @org.wikidata.country => notify
S4000000007	i want to search for all countries .	now => @org.wikidata.country => notify
S4000000008	what 's the countries which have twitter username being QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:twitter_username:String =~ QUOTED_STRING_0 => notify
S4000000009	is there any countries maintained by wiki project QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:maintained_by_wikiproject:String =~ QUOTED_STRING_0 => notify
S4000000010	find every countries	now => @org.wikidata.country => notify
S4000000011	i want the list of all countries	now => @org.wikidata.country => notify
S4000000012	find every countries	now => @org.wikidata.country => notify
S4000000013	find every countries .	now => @org.wikidata.country => notify
S4000000014	i want to search for all countries	now => @org.wikidata.country => notify
S4000000015	find every countries .	now => @org.wikidata.country => notify
S5000000016	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000017	search for the countries with the fewest nicknames	now => ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000018	get a countrie wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000019	get a countrie wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000020	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000021	please enumerate countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000022	is there any countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000023	retrieve the countries with the most nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000024	please list countries that are QUOTED_STRING_0 subclass	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000025	search a list of countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000026	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000027	retrieve the countries with the most nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000028	search for the countries with the fewest nicknames	now => ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000029	i would like all the countries which are instance of human	now => ( @org.wikidata.country ) filter param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
S5000000030	get a countrie wipo st.3 QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000031	search all countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000032	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000033	i want to get every countries wipo st.3 QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000034	is there any countries that have time of earliest written record earlier than today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day => notify
S5000000035	list countries having continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
S5000000036	i am looking for every countries which have twitter username being QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:twitter_username:String =~ QUOTED_STRING_0 => notify
S5000000037	list countries having continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
S5000000038	i am looking for every countries which have twitter username being QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:twitter_username:String =~ QUOTED_STRING_0 => notify
S5000000039	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000040	retrieve the countries with the most nicknames .	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000041	list countries having continent north america .	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
S5000000042	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000043	please enumerate countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000044	list countries having continent north america .	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
S5000000045	which countries has the hottest maximum temperature record ?	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] => notify
S5000000046	are there any countries which have twitter username being QUOTED_STRING_0 , and with smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S5000000047	retrieve the countries with the most nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S6000000048	get the list of all countries with smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 => notify
S6000000049	what are the ethnic groups of the countries with the most lasting life expectancy	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000050	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000051	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000052	please enumerate countries that have time of earliest written record earlier than today .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day => notify
S6000000053	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000054	i want to retrieve every countries with twitter username being QUOTED_STRING_0 , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000055	i need to know the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000056	i 'd like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000057	search the nicknames of the countries with the most lasting life expectancy .	now => [ param:nickname:Array(String) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000058	i want to search for a countrie wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000059	i need to know the ethnic groups of the countries with the hottest maximum temperature record .	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000060	what are the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000061	i want to retrieve every countries with twitter username being QUOTED_STRING_0 , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000062	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000063	enumerate countries with smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 => notify
S6000000064	i want to retrieve every countries with twitter username being QUOTED_STRING_0 , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000065	are there countries having time of earliest written record 1 m before today	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms => notify
S6000000066	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000067	i want a list of all countries that have QUOTED_STRING_0 as twitter username , and with maximum temperature record 1 fahrenheit .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000068	search for a list of countries with area larger than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 => notify
S6000000069	i want to search for a countrie wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000070	are there any countries which have time of earliest written record 1 m before today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms => notify
S6000000071	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000072	i want to retrieve every countries with twitter username being QUOTED_STRING_0 , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000073	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000074	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000075	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000076	i 'd like to know the life expectancy of countries	now => [ param:life_expectancy:Measure(ms) ] of ( @org.wikidata.country ) => notify
S6000000077	how many countries that are QUOTED_STRING_0 subclass are there ?	now => aggregate count of ( ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 ) => notify
S6000000078	i need to know the ethnic groups of the countries with the hottest maximum temperature record .	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000079	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000080	i want to retrieve the list of countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000081	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames .	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000082	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000083	i 'd like to retrieve an countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000084	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000085	what are the nicknames of the countries with the most lasting life expectancy	now => [ param:nickname:Array(String) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000086	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000087	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000088	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000089	retrieve any countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000090	i want a list of all countries that have QUOTED_STRING_0 as twitter username , and with maximum temperature record 1 fahrenheit	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000091	i need to know the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000092	are there countries having time of earliest written record earlier than 1 min before today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S6000000093	are there any countries that have sooner time of earliest written record than 1 min ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
S6000000094	i 'd like to retrieve an countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000095	what countries have name QUOTED_STRING_0 and continent north america and the most lasting life expectancy ?	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:id:Entity(org.wikidata:country) =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000096	what are the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000097	retrieve any countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000098	i want to search for a countrie wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000099	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000100	i am looking for the list of all countries with twitter username being QUOTED_STRING_0 , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000101	i 'd like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000102	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000103	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000104	i would like to know the life expectancy of countries	now => [ param:life_expectancy:Measure(ms) ] of ( @org.wikidata.country ) => notify
S6000000105	i would like to retrieve an countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000106	what 's the life expectancy of countries	now => [ param:life_expectancy:Measure(ms) ] of ( @org.wikidata.country ) => notify
S6000000107	what countries have name QUOTED_STRING_0 and continent north america and the most lasting life expectancy ?	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:id:Entity(org.wikidata:country) =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000108	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000109	get the countries with area larger than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 => notify
S6000000110	what are the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000111	search the nicknames of the countries with the most lasting life expectancy	now => [ param:nickname:Array(String) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S7000000112	show me what is the main regulatory text of the countries wipo st.3 QUOTED_STRING_0 with the hottest maximum temperature record .	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) [ 1 ] ) => notify
S7000000113	get any countries that have time of earliest written record later than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S7000000114	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
S7000000115	tell me what 's the life expectancy of the countries with the least nicknames	now => [ param:life_expectancy:Measure(ms) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000116	i need all countries which have speed limit 1 m/s , and have later time of earliest written record than 1 min ago	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:min => notify
S7000000117	i need the topic's main wikimedia portal of the countries with the fewest nicknames	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000118	get the countries wipo st.3 QUOTED_STRING_0 having twitter username being QUOTED_STRING_0 , which have inception 1 m ago .	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S7000000119	please retrieve any countries with twitter username being QUOTED_STRING_0 , that have time of earliest written record earlier than 1 min before today .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000120	what are the participant in of the countries having QUOTED_STRING_0 as twitter username and the hottest maximum temperature record	now => [ param:participant_in:Array(Entity(org.wikidata:event)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:twitter_username:String =~ QUOTED_STRING_0 ) ) [ 1 ] ) => notify
S7000000121	i am looking to search for an countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
S7000000122	please list countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S7000000123	i 'd like some countries that have time of earliest written record earlier than today , and are QUOTED_STRING_0 subclass	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 and param:time_of_earliest_written_record:Date <= start_of unit:day => notify
S7000000124	get the list of all countries having time of earliest written record later than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S7000000125	tell me what 's the twitter username of the countries with the least nicknames .	now => [ param:twitter_username:String ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000126	please retrieve any countries with twitter username being QUOTED_STRING_0 , that have time of earliest written record earlier than 1 min before today	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000127	i need a list of all countries that have QUOTED_STRING_0 as twitter username , and have sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000128	please list countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S7000000129	i would like some countries that have time of earliest written record earlier than today , and are QUOTED_STRING_0 subclass	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 and param:time_of_earliest_written_record:Date <= start_of unit:day => notify
S7000000130	i want the countries having speed limit 1 m/s , which have area larger than 1 square kilometers and have the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 and param:speed_limit:Measure(mps) == 1 unit:mps ) ) [ 1 ] => notify
S7000000131	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
S7000000132	what are the nicknames of the countries with the least nicknames	now => [ param:nickname:Array(String) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000133	i want the countries having time of earliest written record 1 m before today and the hottest maximum temperature record .	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms ) ) [ 1 ] => notify
S7000000134	what main regulatory text do countries having QUOTED_STRING_0 as twitter username have ?	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( ( @org.wikidata.country ) filter param:twitter_username:String =~ QUOTED_STRING_0 ) => notify
S7000000135	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
S7000000136	tell me what 's the time of earliest written record of countries wipo st.3 QUOTED_STRING_0	now => [ param:time_of_earliest_written_record:Date ] of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
S7000000137	tell me what is the head of governments of the countries wipo st.3 QUOTED_STRING_0 with the hottest maximum temperature record .	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) [ 1 ] ) => notify
S7000000138	i need a list of all countries that have QUOTED_STRING_0 as twitter username , and have sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000139	i want to retrieve a list of all countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
S7000000140	i need a list of all countries that have QUOTED_STRING_0 as twitter username , and have sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000141	i need to search all countries with area larger than 1 square kilometers and time of earliest written record 1 m before today	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 and param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms => notify
S7000000142	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
S7000000143	i need a list of all countries with smaller area than 1 square kilometers and longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:life_expectancy:Measure(ms) >= 1 unit:ms => notify
S7000000144	search all the countries having sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
S7000000145	get the countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S7000000146	which countries get time of earliest written record earlier than 1 min before today and longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S7000000147	i need the topic's main wikimedia portal of the countries with the fewest nicknames .	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000148	what is countries that have time of earliest written record earlier than 1 min before today , , with time of earliest written record later than 1 m ago ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S7000000149	retrieve all countries which have speed limit 1 m/s , and have later time of earliest written record than 1 min ago .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:min => notify
S7000000150	get the countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S7000000151	enumerate countries that have smaller area than 1 square kilometers , and have speed limit 1 m/s	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:speed_limit:Measure(mps) == 1 unit:mps => notify
S7000000152	i would like the countries that have QUOTED_STRING_0 as twitter username , and have later time of earliest written record than 1 m before today and have the most lasting life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S7000000153	i need the topic's main wikimedia portal of the countries with the fewest nicknames	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000154	i 'm looking to search for an countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
S7000000155	get the countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S7000000156	i want the countries having speed limit 1 m/s , which have area larger than 1 square kilometers and have the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 and param:speed_limit:Measure(mps) == 1 unit:mps ) ) [ 1 ] => notify
S7000000157	what countries have time of earliest written record last and twitter username being QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000158	i need the topic's main wikimedia portal of the countries with the fewest nicknames	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000159	what are the nicknames of countries wipo st.3 QUOTED_STRING_0	now => [ param:nickname:Array(String) ] of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
S7000000160	i want the countries that have QUOTED_STRING_0 as twitter username , and have later time of earliest written record than 1 m before today and have the most lasting life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S7000000161	what are the nicknames of countries wipo st.3 QUOTED_STRING_0	now => [ param:nickname:Array(String) ] of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
S7000000162	what is the countries with later time of earliest written record than 1 min ago and the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= now - 1 unit:min ) ) [ 1 ] => notify
S7000000163	i need a list of all countries that have QUOTED_STRING_0 as twitter username , and have sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S8000000164	get a countrie with inception 1 m before today and time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S8000000165	i want the countries which have inception 1 m before today , with QUOTED_STRING_0 as twitter username and the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S8000000166	search for a list of all countries that have inception 1 m ago , , with QUOTED_STRING_0 as twitter username	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S8000000167	i want the countries which have inception 1 m before today , with QUOTED_STRING_0 as twitter username and the hottest maximum temperature record .	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S8000000168	get a countrie with inception 1 m before today and time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S8000000169	i need to search for all the countries having inception 1 m ago which are instance of human .	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
S8000000170	i would like the list of all countries having time of earliest written record earlier than 1 min before today and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S8000000171	find the countries that have later time of earliest written record than 1 min ago and have earlier time of earliest written record than 1 m before today and have the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date >= now - 1 unit:min ) ) [ 1 ] => notify
S8000000172	i am looking to search for a list of all countries having time of earliest written record later than 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000173	list countries having time of earliest written record earlier than 1 min before today which have continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S8000000174	get an countries having time of earliest written record earlier than 1 min before today and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S8000000175	list countries that have earlier time of earliest written record than 1 m before today , and having later time of earliest written record than 1 min ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date >= now - 1 unit:min => notify
S8000000176	what is the patron saint of countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => [ param:patron_saint:Entity(org.wikidata:human) ] of ( ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
S8000000177	i want a countrie that have inception 1 m ago and have earlier time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:ms => notify
S8000000178	please list countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000179	tell me what 's the category for films shot at this location of the countries having continent north america and smaller area than 1 square kilometers and the most lasting life expectancy .	now => [ param:category_for_films_shot_at_this_location:Entity(org.wikidata:category_for_films_shot_at_this_location) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica ) ) [ 1 ] ) => notify
S8000000180	search for a list of all countries that have inception 1 m ago , , with QUOTED_STRING_0 as twitter username	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S8000000181	get a countrie with inception 1 m before today and time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S8000000182	are there any countries with inception 1 m before today and continent north america ?	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:inception:Date == start_of unit:day - 1 unit:ms => notify
S8000000183	list countries having time of earliest written record earlier than 1 min before today which have continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S8000000184	get a countrie having sooner time of earliest written record than 1 min ago that have smaller area than 1 square kilometers .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
S8000000185	i need to search for all the countries having inception 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
S8000000186	please list countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000187	i need to search for all the countries having inception 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
S8000000188	retrieve any countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today , and have sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
S8000000189	get the countries having time of earliest written record 1 m before today with the smallest count of nicknames	now => ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms ) ) ) [ 1 ] => notify
S8000000190	search for a list of all countries that have inception 1 m ago , , with QUOTED_STRING_0 as twitter username .	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S8000000191	i need all the countries that are QUOTED_STRING_0 subclass , with sooner time of earliest written record than 1 min ago and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:subclass_of:String =~ QUOTED_STRING_0 and param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
S8000000192	get an countries having time of earliest written record earlier than 1 min before today and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S8000000193	count the countries having longer life expectancy than 1 m and time of earliest written record last	now => aggregate count of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week ) => notify
S8000000194	get a countrie having sooner time of earliest written record than 1 min ago that have smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
S8000000195	search the ethnic groups of countries with smaller area than 1 square kilometers .	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 ) => notify
S8000000196	retrieve the list of countries having later time of earliest written record than 1 m ago and speed limit 1 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000197	i want to retrieve an countries having time of earliest written record later than 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000198	i 'm looking for the category of associated people of the countries that have time of earliest written record earlier than today and have the hottest maximum temperature record .	now => [ param:category_of_associated_people:Entity(org.wikidata:category_of_associated_people) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day ) ) [ 1 ] ) => notify
S8000000199	search for a list of all countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000200	please search a list of countries which have inception 1 m before today , with QUOTED_STRING_0 as twitter username	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S8000000201	retrieve the list of countries having later time of earliest written record than 1 m ago and speed limit 1 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000202	i 'd like any countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000203	what 's the highest point of countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 ?	now => [ param:highest_point:Location ] of ( ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
S8000000204	what 's the category of associated people of countries that have QUOTED_STRING_0 as twitter username , and with maximum temperature record 1 fahrenheit ?	now => [ param:category_of_associated_people:Entity(org.wikidata:category_of_associated_people) ] of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:twitter_username:String =~ QUOTED_STRING_0 ) => notify
