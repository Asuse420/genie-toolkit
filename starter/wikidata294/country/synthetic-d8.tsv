S4000000000	find every countries	now => @org.wikidata.country => notify
S4000000001	i 'd like to search any countries .	now => @org.wikidata.country => notify
S4000000002	find every countries	now => @org.wikidata.country => notify
S4000000003	i want to search for all countries	now => @org.wikidata.country => notify
S4000000004	find the countries with the most lasting life expectancy	now => ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] => notify
S4000000005	find every countries .	now => @org.wikidata.country => notify
S4000000006	i want the list of all countries	now => @org.wikidata.country => notify
S4000000007	i want to search for all countries .	now => @org.wikidata.country => notify
S4000000008	what 's the countries which have twitter username being QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:twitter_username:String =~ QUOTED_STRING_0 => notify
S4000000009	is there any countries maintained by wiki project QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:maintained_by_wikiproject:String =~ QUOTED_STRING_0 => notify
S4000000010	find every countries	now => @org.wikidata.country => notify
S4000000011	i want the list of all countries	now => @org.wikidata.country => notify
S4000000012	find every countries	now => @org.wikidata.country => notify
S4000000013	find every countries .	now => @org.wikidata.country => notify
S4000000014	i want to search for all countries	now => @org.wikidata.country => notify
S4000000015	find every countries .	now => @org.wikidata.country => notify
S5000000016	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000017	search for the countries with the fewest nicknames	now => ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000018	get a countrie wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000019	get a countrie wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000020	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000021	please enumerate countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000022	is there any countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000023	retrieve the countries with the most nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000024	please list countries that are QUOTED_STRING_0 subclass	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000025	search a list of countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000026	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000027	retrieve the countries with the most nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000028	search for the countries with the fewest nicknames	now => ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000029	i would like all the countries which are instance of human	now => ( @org.wikidata.country ) filter param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
S5000000030	get a countrie wipo st.3 QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000031	search all countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000032	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000033	i want to get every countries wipo st.3 QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000034	is there any countries that have time of earliest written record earlier than today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day => notify
S5000000035	list countries having continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
S5000000036	i am looking for every countries which have twitter username being QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:twitter_username:String =~ QUOTED_STRING_0 => notify
S5000000037	list countries having continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
S5000000038	i am looking for every countries which have twitter username being QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:twitter_username:String =~ QUOTED_STRING_0 => notify
S5000000039	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000040	retrieve the countries with the most nicknames .	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S5000000041	list countries having continent north america .	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
S5000000042	please list countries that are QUOTED_STRING_0 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 => notify
S5000000043	please enumerate countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S5000000044	list countries having continent north america .	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
S5000000045	which countries has the hottest maximum temperature record ?	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] => notify
S5000000046	are there any countries which have twitter username being QUOTED_STRING_0 , and with smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S5000000047	retrieve the countries with the most nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
S6000000048	get the list of all countries with smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 => notify
S6000000049	what are the ethnic groups of the countries with the most lasting life expectancy	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000050	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000051	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000052	please enumerate countries that have time of earliest written record earlier than today .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day => notify
S6000000053	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000054	i want to retrieve every countries with twitter username being QUOTED_STRING_0 , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000055	i need to know the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000056	i 'd like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000057	search the nicknames of the countries with the most lasting life expectancy .	now => [ param:nickname:Array(String) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000058	i want to search for a countrie wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000059	i need to know the ethnic groups of the countries with the hottest maximum temperature record .	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000060	what are the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000061	i want to retrieve every countries with twitter username being QUOTED_STRING_0 , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000062	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000063	enumerate countries with smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 => notify
S6000000064	i want to retrieve every countries with twitter username being QUOTED_STRING_0 , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000065	are there countries having time of earliest written record 1 m before today	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms => notify
S6000000066	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000067	i want a list of all countries that have QUOTED_STRING_0 as twitter username , and with maximum temperature record 1 fahrenheit .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000068	search for a list of countries with area larger than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 => notify
S6000000069	i want to search for a countrie wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000070	are there any countries which have time of earliest written record 1 m before today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms => notify
S6000000071	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000072	i want to retrieve every countries with twitter username being QUOTED_STRING_0 , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000073	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000074	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000075	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000076	i 'd like to know the life expectancy of countries	now => [ param:life_expectancy:Measure(ms) ] of ( @org.wikidata.country ) => notify
S6000000077	how many countries that are QUOTED_STRING_0 subclass are there ?	now => aggregate count of ( ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 ) => notify
S6000000078	i need to know the ethnic groups of the countries with the hottest maximum temperature record .	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000079	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000080	i want to retrieve the list of countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000081	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames .	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000082	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000083	i 'd like to retrieve an countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000084	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000085	what are the nicknames of the countries with the most lasting life expectancy	now => [ param:nickname:Array(String) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000086	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000087	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
S6000000088	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000089	retrieve any countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000090	i want a list of all countries that have QUOTED_STRING_0 as twitter username , and with maximum temperature record 1 fahrenheit	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000091	i need to know the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000092	are there countries having time of earliest written record earlier than 1 min before today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S6000000093	are there any countries that have sooner time of earliest written record than 1 min ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
S6000000094	i 'd like to retrieve an countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000095	what countries have name QUOTED_STRING_0 and continent north america and the most lasting life expectancy ?	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:id:Entity(org.wikidata:country) =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000096	what are the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000097	retrieve any countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000098	i want to search for a countrie wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000099	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000100	i am looking for the list of all countries with twitter username being QUOTED_STRING_0 , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S6000000101	i 'd like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000102	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000103	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S6000000104	i would like to know the life expectancy of countries	now => [ param:life_expectancy:Measure(ms) ] of ( @org.wikidata.country ) => notify
S6000000105	i would like to retrieve an countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000106	what 's the life expectancy of countries	now => [ param:life_expectancy:Measure(ms) ] of ( @org.wikidata.country ) => notify
S6000000107	what countries have name QUOTED_STRING_0 and continent north america and the most lasting life expectancy ?	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:id:Entity(org.wikidata:country) =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S6000000108	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
S6000000109	get the countries with area larger than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 => notify
S6000000110	what are the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S6000000111	search the nicknames of the countries with the most lasting life expectancy	now => [ param:nickname:Array(String) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
S7000000112	show me what is the main regulatory text of the countries wipo st.3 QUOTED_STRING_0 with the hottest maximum temperature record .	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) [ 1 ] ) => notify
S7000000113	get any countries that have time of earliest written record later than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S7000000114	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
S7000000115	tell me what 's the life expectancy of the countries with the least nicknames	now => [ param:life_expectancy:Measure(ms) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000116	i need all countries which have speed limit 1 m/s , and have later time of earliest written record than 1 min ago	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:min => notify
S7000000117	i need the topic's main wikimedia portal of the countries with the fewest nicknames	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000118	get the countries wipo st.3 QUOTED_STRING_0 having twitter username being QUOTED_STRING_0 , which have inception 1 m ago .	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
S7000000119	please retrieve any countries with twitter username being QUOTED_STRING_0 , that have time of earliest written record earlier than 1 min before today .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000120	what are the participant in of the countries having QUOTED_STRING_0 as twitter username and the hottest maximum temperature record	now => [ param:participant_in:Array(Entity(org.wikidata:event)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:twitter_username:String =~ QUOTED_STRING_0 ) ) [ 1 ] ) => notify
S7000000121	i am looking to search for an countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
S7000000122	please list countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S7000000123	i 'd like some countries that have time of earliest written record earlier than today , and are QUOTED_STRING_0 subclass	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 and param:time_of_earliest_written_record:Date <= start_of unit:day => notify
S7000000124	get the list of all countries having time of earliest written record later than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S7000000125	tell me what 's the twitter username of the countries with the least nicknames .	now => [ param:twitter_username:String ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000126	please retrieve any countries with twitter username being QUOTED_STRING_0 , that have time of earliest written record earlier than 1 min before today	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000127	i need a list of all countries that have QUOTED_STRING_0 as twitter username , and have sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000128	please list countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S7000000129	i would like some countries that have time of earliest written record earlier than today , and are QUOTED_STRING_0 subclass	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ QUOTED_STRING_0 and param:time_of_earliest_written_record:Date <= start_of unit:day => notify
S7000000130	i want the countries having speed limit 1 m/s , which have area larger than 1 square kilometers and have the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 and param:speed_limit:Measure(mps) == 1 unit:mps ) ) [ 1 ] => notify
S7000000131	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
S7000000132	what are the nicknames of the countries with the least nicknames	now => [ param:nickname:Array(String) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000133	i want the countries having time of earliest written record 1 m before today and the hottest maximum temperature record .	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms ) ) [ 1 ] => notify
S7000000134	what main regulatory text do countries having QUOTED_STRING_0 as twitter username have ?	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( ( @org.wikidata.country ) filter param:twitter_username:String =~ QUOTED_STRING_0 ) => notify
S7000000135	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
S7000000136	tell me what 's the time of earliest written record of countries wipo st.3 QUOTED_STRING_0	now => [ param:time_of_earliest_written_record:Date ] of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
S7000000137	tell me what is the head of governments of the countries wipo st.3 QUOTED_STRING_0 with the hottest maximum temperature record .	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) [ 1 ] ) => notify
S7000000138	i need a list of all countries that have QUOTED_STRING_0 as twitter username , and have sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000139	i want to retrieve a list of all countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
S7000000140	i need a list of all countries that have QUOTED_STRING_0 as twitter username , and have sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000141	i need to search all countries with area larger than 1 square kilometers and time of earliest written record 1 m before today	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 and param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms => notify
S7000000142	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
S7000000143	i need a list of all countries with smaller area than 1 square kilometers and longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:life_expectancy:Measure(ms) >= 1 unit:ms => notify
S7000000144	search all the countries having sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
S7000000145	get the countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S7000000146	which countries get time of earliest written record earlier than 1 min before today and longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S7000000147	i need the topic's main wikimedia portal of the countries with the fewest nicknames .	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000148	what is countries that have time of earliest written record earlier than 1 min before today , , with time of earliest written record later than 1 m ago ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S7000000149	retrieve all countries which have speed limit 1 m/s , and have later time of earliest written record than 1 min ago .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:min => notify
S7000000150	get the countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S7000000151	enumerate countries that have smaller area than 1 square kilometers , and have speed limit 1 m/s	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:speed_limit:Measure(mps) == 1 unit:mps => notify
S7000000152	i would like the countries that have QUOTED_STRING_0 as twitter username , and have later time of earliest written record than 1 m before today and have the most lasting life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S7000000153	i need the topic's main wikimedia portal of the countries with the fewest nicknames	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000154	i 'm looking to search for an countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
S7000000155	get the countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S7000000156	i want the countries having speed limit 1 m/s , which have area larger than 1 square kilometers and have the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 and param:speed_limit:Measure(mps) == 1 unit:mps ) ) [ 1 ] => notify
S7000000157	what countries have time of earliest written record last and twitter username being QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S7000000158	i need the topic's main wikimedia portal of the countries with the fewest nicknames	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
S7000000159	what are the nicknames of countries wipo st.3 QUOTED_STRING_0	now => [ param:nickname:Array(String) ] of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
S7000000160	i want the countries that have QUOTED_STRING_0 as twitter username , and have later time of earliest written record than 1 m before today and have the most lasting life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S7000000161	what are the nicknames of countries wipo st.3 QUOTED_STRING_0	now => [ param:nickname:Array(String) ] of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
S7000000162	what is the countries with later time of earliest written record than 1 min ago and the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= now - 1 unit:min ) ) [ 1 ] => notify
S7000000163	i need a list of all countries that have QUOTED_STRING_0 as twitter username , and have sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S8000000164	get a countrie with inception 1 m before today and time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S8000000165	i want the countries which have inception 1 m before today , with QUOTED_STRING_0 as twitter username and the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S8000000166	search for a list of all countries that have inception 1 m ago , , with QUOTED_STRING_0 as twitter username	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S8000000167	i want the countries which have inception 1 m before today , with QUOTED_STRING_0 as twitter username and the hottest maximum temperature record .	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
S8000000168	get a countrie with inception 1 m before today and time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S8000000169	i need to search for all the countries having inception 1 m ago which are instance of human .	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
S8000000170	i would like the list of all countries having time of earliest written record earlier than 1 min before today and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S8000000171	find the countries that have later time of earliest written record than 1 min ago and have earlier time of earliest written record than 1 m before today and have the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date >= now - 1 unit:min ) ) [ 1 ] => notify
S8000000172	i am looking to search for a list of all countries having time of earliest written record later than 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000173	list countries having time of earliest written record earlier than 1 min before today which have continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S8000000174	get an countries having time of earliest written record earlier than 1 min before today and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S8000000175	list countries that have earlier time of earliest written record than 1 m before today , and having later time of earliest written record than 1 min ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date >= now - 1 unit:min => notify
S8000000176	what is the patron saint of countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => [ param:patron_saint:Entity(org.wikidata:human) ] of ( ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
S8000000177	i want a countrie that have inception 1 m ago and have earlier time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:ms => notify
S8000000178	please list countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000179	tell me what 's the category for films shot at this location of the countries having continent north america and smaller area than 1 square kilometers and the most lasting life expectancy .	now => [ param:category_for_films_shot_at_this_location:Entity(org.wikidata:category_for_films_shot_at_this_location) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica ) ) [ 1 ] ) => notify
S8000000180	search for a list of all countries that have inception 1 m ago , , with QUOTED_STRING_0 as twitter username	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S8000000181	get a countrie with inception 1 m before today and time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
S8000000182	are there any countries with inception 1 m before today and continent north america ?	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:inception:Date == start_of unit:day - 1 unit:ms => notify
S8000000183	list countries having time of earliest written record earlier than 1 min before today which have continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S8000000184	get a countrie having sooner time of earliest written record than 1 min ago that have smaller area than 1 square kilometers .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
S8000000185	i need to search for all the countries having inception 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
S8000000186	please list countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000187	i need to search for all the countries having inception 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
S8000000188	retrieve any countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today , and have sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
S8000000189	get the countries having time of earliest written record 1 m before today with the smallest count of nicknames	now => ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms ) ) ) [ 1 ] => notify
S8000000190	search for a list of all countries that have inception 1 m ago , , with QUOTED_STRING_0 as twitter username .	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S8000000191	i need all the countries that are QUOTED_STRING_0 subclass , with sooner time of earliest written record than 1 min ago and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:subclass_of:String =~ QUOTED_STRING_0 and param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
S8000000192	get an countries having time of earliest written record earlier than 1 min before today and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
S8000000193	count the countries having longer life expectancy than 1 m and time of earliest written record last	now => aggregate count of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week ) => notify
S8000000194	get a countrie having sooner time of earliest written record than 1 min ago that have smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
S8000000195	search the ethnic groups of countries with smaller area than 1 square kilometers .	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 ) => notify
S8000000196	retrieve the list of countries having later time of earliest written record than 1 m ago and speed limit 1 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000197	i want to retrieve an countries having time of earliest written record later than 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000198	i 'm looking for the category of associated people of the countries that have time of earliest written record earlier than today and have the hottest maximum temperature record .	now => [ param:category_of_associated_people:Entity(org.wikidata:category_of_associated_people) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day ) ) [ 1 ] ) => notify
S8000000199	search for a list of all countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000200	please search a list of countries which have inception 1 m before today , with QUOTED_STRING_0 as twitter username	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 => notify
S8000000201	retrieve the list of countries having later time of earliest written record than 1 m ago and speed limit 1 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000202	i 'd like any countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
S8000000203	what 's the highest point of countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 ?	now => [ param:highest_point:Location ] of ( ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
S8000000204	what 's the category of associated people of countries that have QUOTED_STRING_0 as twitter username , and with maximum temperature record 1 fahrenheit ?	now => [ param:category_of_associated_people:Entity(org.wikidata:category_of_associated_people) ] of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:twitter_username:String =~ QUOTED_STRING_0 ) => notify
