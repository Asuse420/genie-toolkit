RS4000000000-0	get an country	now => @org.wikidata.country => notify
RS4000000001-0	please search for any country .	now => @org.wikidata.country => notify
RS4000000002-0	get an country .	now => @org.wikidata.country => notify
RS4000000003-0	please search for any country	now => @org.wikidata.country => notify
RS4000000004-0	please list country	now => @org.wikidata.country => notify
RS4000000005-0	please list country .	now => @org.wikidata.country => notify
RS4000000006-0	get an country	now => @org.wikidata.country => notify
RS4000000007-0	get an country .	now => @org.wikidata.country => notify
RS4000000008-0	please search for any country .	now => @org.wikidata.country => notify
RS4000000009-0	please list country	now => @org.wikidata.country => notify
RS4000000010-0	get an country .	now => @org.wikidata.country => notify
RS4000000011-0	please list country .	now => @org.wikidata.country => notify
RS4000000012-0	what are country which have age of candidacy 0	now => ( @org.wikidata.country ) filter param:age_of_candidacy:Number == 0 => notify
RS4000000013-0	retrieve a list of all country	now => @org.wikidata.country => notify
RS4000000014-0	list country	now => @org.wikidata.country => notify
RS4000000015-0	please search for any country	now => @org.wikidata.country => notify
RS5000000016-0	i need the list of country with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000017-0	get a country digital atlas of the roman empire id 25440 .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " => notify
RS5000000018-0	search the country having insee countries and foreign territories code including 99109 and the minimum minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) asc of ( ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " 99109 " ) ) [ 1 ] => notify
RS5000000019-0	i need the list of country with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000020-0	i 'm looking for the country with the most participant in	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000021-0	i am looking for the country with the most participant in	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000022-0	are there country having insee countries and foreign territories code including q465613 which is subclass of q465613 ?	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " q465613 " and param:subclass_of:String =~ " q465613 " => notify
RS5000000023-0	i am looking for the country with the most participant in	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000024-0	i am looking for the country with the most participant in	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000025-0	i 'm looking for the list of all country which have insee countries and foreign territories code including 99335	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " 99335 " => notify
RS5000000026-0	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000027-0	please search for the list of country pactols thesaurus id pcrtsxtvnwzabe	now => ( @org.wikidata.country ) filter param:pactols_thesaurus_id:String =~ " pcrtsxtvnwzabe " => notify
RS5000000028-0	i 'm looking for the country with the most participant in .	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000029-0	i 'm looking for the list of all country which have insee countries and foreign territories code including 99219	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " 99219 " => notify
RS5000000030-0	i 'm looking for the country with the most participant in .	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000031-0	please search for the list of country pactols thesaurus id pcrt8mx4dfgupg	now => ( @org.wikidata.country ) filter param:pactols_thesaurus_id:String =~ " pcrt8mx4dfgupg " => notify
RS5000000032-0	i need the list of country with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000033-0	retrieve a country located in the administrative territorial entity atlantic ocean .	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location: " atlantic ocean " => notify
RS5000000034-0	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000035-0	which country is latin america part , and get basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy and param:part_of:Array(String) contains~ " latin america " => notify
RS5000000036-0	search the country having insee countries and foreign territories code including 99131 and the minimum minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) asc of ( ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " 99131 " ) ) [ 1 ] => notify
RS5000000037-0	get all the country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000038-0	i am looking for the list of all country which have insee countries and foreign territories code including 99131 .	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " 99131 " => notify
RS5000000039-0	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000040-0	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000041-0	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000042-0	i 'm looking to search for the list of country with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000043-0	i need the list of country with basic form of government monarchy	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS5000000044-0	i am looking for the list of all country which have insee countries and foreign territories code including 99144 .	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " 99144 " => notify
RS5000000045-0	find all country which have insee countries and foreign territories code including 99259 .	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " 99259 " => notify
RS5000000046-0	what are country pactols thesaurus id pcrt0de5vvzofm	now => ( @org.wikidata.country ) filter param:pactols_thesaurus_id:String =~ " pcrt0de5vvzofm " => notify
RS5000000047-0	i 'm looking for the country with the most participant in .	now => ( sort param:count:Number desc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS6000000048-0	search every country digital atlas of the roman empire id 25440 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000049-0	please enumerate country digital atlas of the roman empire id 25440 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000050-0	find some country digital atlas of the roman empire id 25440 driving side left .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000051-0	i 'd like the list of all country driving side left which have insee countries and foreign territories code including 99259 .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99259 " => notify
RS6000000052-0	which patron saint does the country with the minimum minimum temperature record have ?	now => [ param:patron_saint:Entity(org.wikidata:human) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000053-0	retrieve the list of country that have greater population than 0 and having insee countries and foreign territories code including 99207	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " 99207 " and param:population:Number >= 0 => notify
RS6000000054-0	search for the country driving side left which have insee countries and foreign territories code including 99139 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99139 " ) ) [ 1 ] => notify
RS6000000055-0	which country get inception now and are european union part ?	now => ( @org.wikidata.country ) filter param:inception:Date == now and param:part_of:Array(String) contains~ " european union " => notify
RS6000000056-0	which head of governments do country with the minimum minimum temperature record have	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000057-0	i need any country digital atlas of the roman empire id 25440 driving side left .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000058-0	what 's the inception of the country with the minimum minimum temperature record ?	now => [ param:inception:Date ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000059-0	search for the country driving side left which have insee countries and foreign territories code including 99144 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99144 " ) ) [ 1 ] => notify
RS6000000060-0	i am looking for the country digital atlas of the roman empire id 25440 with the smallest count of participant in	now => ( sort param:count:Number asc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " ) ) ) [ 1 ] => notify
RS6000000061-0	tell me the category of associated people of the country with the minimum minimum temperature record .	now => [ param:category_of_associated_people:Entity(org.wikidata:category_of_associated_people) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000062-0	which head of governments do country with the minimum minimum temperature record have	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000063-0	which are the country which have inception now and have speed limit 0 kph	now => ( @org.wikidata.country ) filter param:inception:Date == now and param:speed_limit:Measure(mps) == 0 unit:kmph => notify
RS6000000064-0	what is country with basic form of government monarchy which have inception 0 s before now ?	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy and param:inception:Date == now - 0 unit:s => notify
RS6000000065-0	find some country digital atlas of the roman empire id 25440 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000066-0	i need any country digital atlas of the roman empire id 25440 driving side left .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000067-0	retrieve the list of country that have greater population than 0 and having insee countries and foreign territories code including 99139 .	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " 99139 " and param:population:Number >= 0 => notify
RS6000000068-0	which category of people buried here does the country with the minimum minimum temperature record have ?	now => [ param:category_of_people_buried_here:Entity(org.wikidata:category_of_people_buried_here) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000069-0	i am looking for the main regulatory text of country .	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( @org.wikidata.country ) => notify
RS6000000070-0	which ethnic groups does country have ?	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( @org.wikidata.country ) => notify
RS6000000071-0	get the list of country driving side left , which have inception now	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:inception:Date == now => notify
RS6000000072-0	i am looking for the country digital atlas of the roman empire id 25440 with the smallest count of participant in .	now => ( sort param:count:Number asc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " ) ) ) [ 1 ] => notify
RS6000000073-0	which country get cooler minimum temperature record than 0 f and greater population than 0 ?	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) <= 0 unit:F and param:population:Number >= 0 => notify
RS6000000074-0	i would like the list of all country driving side left which have insee countries and foreign territories code including 99219 .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99219 " => notify
RS6000000075-0	search a list of country having insee countries and foreign territories code including q465613 which is subclass of q465613	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " q465613 " and param:subclass_of:String =~ " q465613 " => notify
RS6000000076-0	which is the country that have time of earliest written record 0 s before now	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == now - 0 unit:s => notify
RS6000000077-0	retrieve every country digital atlas of the roman empire id 25440 driving side left .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000078-0	i 'm looking for the country digital atlas of the roman empire id 25440 with the smallest count of participant in .	now => ( sort param:count:Number asc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " ) ) ) [ 1 ] => notify
RS6000000079-0	search for the country driving side left which have insee countries and foreign territories code including 99395 and have the highest minimum temperature record	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99395 " ) ) [ 1 ] => notify
RS6000000080-0	get the country driving side left which have insee countries and foreign territories code including 99247	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99247 " => notify
RS6000000081-0	search for the country driving side left which have insee countries and foreign territories code including 99307 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99307 " ) ) [ 1 ] => notify
RS6000000082-0	search every country digital atlas of the roman empire id 25440 driving side left .	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000083-0	what is the anthem of the country with the minimum minimum temperature record ?	now => [ param:anthem:Entity(org.wikidata:song) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000084-0	i 'm looking for the main regulatory text of country .	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( @org.wikidata.country ) => notify
RS6000000085-0	is there any country that have earlier inception than 0 weeks before now	now => ( @org.wikidata.country ) filter param:inception:Date <= now - 0 unit:week => notify
RS6000000086-0	i 'd like the country with basic form of government monarchy that have age of candidacy 0	now => ( @org.wikidata.country ) filter param:age_of_candidacy:Number == 0 and param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS6000000087-0	tell me the category of associated people of the country with the minimum minimum temperature record	now => [ param:category_of_associated_people:Entity(org.wikidata:category_of_associated_people) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000088-0	search for the country driving side left which have insee countries and foreign territories code including 99241 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99241 " ) ) [ 1 ] => notify
RS6000000089-0	get some country which have insee countries and foreign territories code including 99514 , and have bigger area than 0 square meters	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 0 unit:m2 and param:insee_countries_and_foreign_territories_code:String =~ " 99514 " => notify
RS6000000090-0	i 'd like the country which have inception now and have the minimum minimum temperature record	now => ( sort param:minimum_temperature_record:Measure(C) asc of ( ( @org.wikidata.country ) filter param:inception:Date == now ) ) [ 1 ] => notify
RS6000000091-0	please enumerate country with minimum temperature record 0 f	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == 0 unit:F => notify
RS6000000092-0	search for the country driving side left which have insee countries and foreign territories code including 99395 and have the highest minimum temperature record	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99395 " ) ) [ 1 ] => notify
RS6000000093-0	find some country digital atlas of the roman empire id 25440 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000094-0	what are the shares border with of the country with the minimum minimum temperature record ?	now => [ param:shares_border_with:Array(Entity(org.wikidata:country)) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000095-0	search for the country driving side left which have insee countries and foreign territories code including 99131 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99131 " ) ) [ 1 ] => notify
RS6000000096-0	i 'd like the list of all country driving side left which have insee countries and foreign territories code including 99335	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99335 " => notify
RS6000000097-0	search for the country driving side left which have insee countries and foreign territories code including 99219 and have the highest minimum temperature record .	now => ( sort param:minimum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99219 " ) ) [ 1 ] => notify
RS6000000098-0	i am looking for the country digital atlas of the roman empire id 25440 with the smallest count of participant in .	now => ( sort param:count:Number asc of ( compute count ( param:participant_in:Array(Entity(org.wikidata:event)) ) of ( ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " ) ) ) [ 1 ] => notify
RS6000000099-0	i need any country digital atlas of the roman empire id 25440 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000100-0	tell me what is the main regulatory text of country .	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( @org.wikidata.country ) => notify
RS6000000101-0	what are the nicknames of the country with the minimum minimum temperature record	now => [ param:nickname:Array(String) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000102-0	get the country driving side left which have insee countries and foreign territories code including 99247 .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:insee_countries_and_foreign_territories_code:String =~ " 99247 " => notify
RS6000000103-0	enumerate country which is subclass of q465613 , with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy and param:subclass_of:String =~ " q465613 " => notify
RS6000000104-0	i 'd like the country with basic form of government monarchy that have age of candidacy 0 .	now => ( @org.wikidata.country ) filter param:age_of_candidacy:Number == 0 and param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS6000000105-0	please enumerate country with minimum temperature record 0 f .	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == 0 unit:F => notify
RS6000000106-0	enumerate country which is subclass of q465613 , with basic form of government monarchy .	now => ( @org.wikidata.country ) filter param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy and param:subclass_of:String =~ " q465613 " => notify
RS6000000107-0	i need any country digital atlas of the roman empire id 25440 driving side left	now => ( @org.wikidata.country ) filter param:digital_atlas_of_the_roman_empire_id:String =~ " 25440 " and param:driving_side:Enum(Left,Right) == enum:Left => notify
RS6000000108-0	what topic's main wikimedia portal does country with the minimum minimum temperature record have	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:minimum_temperature_record:Measure(C) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000109-0	i 'd like the country with basic form of government monarchy that have age of candidacy 0 .	now => ( @org.wikidata.country ) filter param:age_of_candidacy:Number == 0 and param:basic_form_of_government:Enum(Dictatorship,Monarchy,Republic,ConstitutionalMonarchy,Federation,Theocracy,SemiPresidentialSystem,PresidentialRegime,Oligarchy,ParliamentarySystem,Autocracy,UnitaryState,AbsoluteMonarchy,RepresentativeDemocracy,FederalRepublic,ElectiveMonarchy,AristocraticRepublic,Condominium,HereditaryMonarchy,SovietRepublic,DirectorialSystem,DualMonarchy,AsymmetricFederalism,ParliamentaryMonarchy,ParliamentaryRepublic,CompositeMonarchy,RepublicanRegimeInFrance) == enum:Monarchy => notify
RS6000000110-0	retrieve the list of country that have greater population than 0 and having insee countries and foreign territories code including 99109	now => ( @org.wikidata.country ) filter param:insee_countries_and_foreign_territories_code:String =~ " 99109 " and param:population:Number >= 0 => notify
RS6000000111-0	i 'm looking for the main regulatory text of country	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( @org.wikidata.country ) => notify
RS4000000000-0	search all the country .	now => @org.wikidata.country => notify
RS4000000001-0	get a list of country .	now => @org.wikidata.country => notify
RS4000000002-0	i would like to find any country .	now => @org.wikidata.country => notify
RS4000000003-0	i 'm looking for every country	now => @org.wikidata.country => notify
RS4000000004-0	get the country	now => @org.wikidata.country => notify
RS4000000005-0	get the country .	now => @org.wikidata.country => notify
RS4000000006-0	get the country .	now => @org.wikidata.country => notify
RS4000000007-0	i 'd like to find any country	now => @org.wikidata.country => notify
RS4000000008-0	get the country .	now => @org.wikidata.country => notify
RS4000000009-0	i 'm looking to search every country	now => @org.wikidata.country => notify
RS4000000010-0	i 'd like to find any country	now => @org.wikidata.country => notify
RS4000000011-0	i am looking for every country	now => @org.wikidata.country => notify
RS4000000012-0	i would like to find any country	now => @org.wikidata.country => notify
RS4000000013-0	i am looking for every country .	now => @org.wikidata.country => notify
RS4000000014-0	i 'm looking to search every country .	now => @org.wikidata.country => notify
RS4000000015-0	i 'm looking for every country .	now => @org.wikidata.country => notify
RS5000000016-0	i would like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
RS5000000017-0	i 'd like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
RS5000000018-0	i 'd like to search some country having gini coefficient NUMBER_0	now => ( @org.wikidata.country ) filter param:gini_coefficient:Number == NUMBER_0 => notify
RS5000000019-0	i would like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
RS5000000020-0	i want the country with suicide rate NUMBER_0 and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 ) ) [ 1 ] => notify
RS5000000021-0	search any country treccani id israele	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ " israele " => notify
RS5000000022-0	get an country treccani id israele .	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ " israele " => notify
RS5000000023-0	get the list of all country maintained by wiki project q11142608 .	now => ( @org.wikidata.country ) filter param:maintained_by_wikiproject:String =~ " q11142608 " => notify
RS5000000024-0	i am looking to retrieve a list of all country driving side left .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left => notify
RS5000000025-0	get an country treccani id belgio .	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ " belgio " => notify
RS5000000026-0	i would like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
RS5000000027-0	i want the country with suicide rate NUMBER_0 and the latest inception .	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 ) ) [ 1 ] => notify
RS5000000028-0	i 'd like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
RS5000000029-0	i would like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
RS5000000030-0	i need any country maintained by wiki project q14455339 .	now => ( @org.wikidata.country ) filter param:maintained_by_wikiproject:String =~ " q14455339 " => notify
RS5000000031-0	search any country treccani id belgio	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ " belgio " => notify
RS5000000032-0	i 'm looking to retrieve a list of all country driving side left .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left => notify
RS5000000033-0	are there country that have more slowly speed limit than NUMBER_0 kilometers per hour ?	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:kmph => notify
RS5000000034-0	search for a list of all country treccani id mali .	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ " mali " => notify
RS5000000035-0	i 'd like to search the list of all country that have suicide rate NUMBER_0 .	now => ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 => notify
RS5000000036-0	what country have minimum temperature record NUMBER_0 fahrenheit ?	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:F => notify
RS5000000037-0	i need to retrieve the country which are europe 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " europe " => notify
RS5000000038-0	search any country treccani id cile	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ " cile " => notify
RS5000000039-0	search any country treccani id germania .	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ " germania " => notify
RS5000000040-0	i want the country with suicide rate NUMBER_0 and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 ) ) [ 1 ] => notify
RS5000000041-0	i want the country with suicide rate NUMBER_0 and the latest inception .	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 ) ) [ 1 ] => notify
RS5000000042-0	search for a list of all country treccani id vanuatu .	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ " vanuatu " => notify
RS5000000043-0	i need to retrieve the country which are china 's part	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " china " => notify
RS5000000044-0	search any country treccani id vanuatu	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ " vanuatu " => notify
RS5000000045-0	i need to retrieve the country which are hispanic america 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " hispanic america " => notify
RS5000000046-0	i want the country with suicide rate NUMBER_0 and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:suicide_rate:Number == NUMBER_0 ) ) [ 1 ] => notify
RS5000000047-0	search any country treccani id mali	now => ( @org.wikidata.country ) filter param:treccani_id:String =~ " mali " => notify
RS6000000048-0	i would like some country with less unemployment rate than NUMBER_0 that have life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms and param:unemployment_rate:Number <= NUMBER_0 => notify
RS6000000049-0	i 'm looking to search a list of country with life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
RS6000000050-0	i need the country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
RS6000000051-0	search the country having maximum temperature record NUMBER_0 degrees and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature ) ) [ 1 ] => notify
RS6000000052-0	i need the country treccani id portogallo that are portogallo 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " portogallo " and param:treccani_id:String =~ " portogallo " => notify
RS6000000053-0	tell me the foundational text of the country which has the most slowly speed limit .	now => [ param:foundational_text:Entity(org.wikidata:foundational_text) ] of ( ( sort param:speed_limit:Measure(mps) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000054-0	search an country with life expectancy NUMBER_0 seconds	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
RS6000000055-0	i need the country that have life expectancy NUMBER_0 seconds and have the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
RS6000000056-0	i 'd like a list of all country having speed limit slower than NUMBER_0 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
RS6000000057-0	i 'd like some country with less unemployment rate than NUMBER_0 that have life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms and param:unemployment_rate:Number <= NUMBER_0 => notify
RS6000000058-0	what is country which have time of earliest written record NUMBER_0 seconds before today	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - NUMBER_0 unit:s => notify
RS6000000059-0	what are country that have time of earliest written record NUMBER_0 ms before today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - NUMBER_0 unit:ms => notify
RS6000000060-0	i need the country that have life expectancy NUMBER_0 seconds and have the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
RS6000000061-0	i need the country treccani id germania that are germania 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " germania " and param:treccani_id:String =~ " germania " => notify
RS6000000062-0	which country get life expectancy longer than NUMBER_0 ms and inception before NUMBER_0 ms ago ?	now => ( @org.wikidata.country ) filter param:inception:Date <= now - NUMBER_0 unit:ms and param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
RS6000000063-0	i would like to retrieve all country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
RS6000000064-0	i want any country treccani id belgio jewish encyclopedia id ( russian) belgio	now => ( @org.wikidata.country ) filter param:jewish_encyclopedia_id_russian_:String =~ " belgio " and param:treccani_id:String =~ " belgio " => notify
RS6000000065-0	search the country having maximum temperature record NUMBER_0 degrees and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature ) ) [ 1 ] => notify
RS6000000066-0	search an country with life expectancy NUMBER_0 seconds	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
RS6000000067-0	what are country that have minimum temperature record NUMBER_0 fahrenheit and have time of earliest written record NUMBER_0 ms before today	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:F and param:time_of_earliest_written_record:Date == start_of unit:day - NUMBER_0 unit:ms => notify
RS6000000068-0	get all the country having speed limit slower than NUMBER_0 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
RS6000000069-0	i am looking to search a list of country with life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
RS6000000070-0	i need the country that have life expectancy NUMBER_0 seconds and have the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
RS6000000071-0	i need all country with life expectancy NUMBER_0 seconds	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
RS6000000072-0	enumerate country with life expectancy NUMBER_0 seconds .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
RS6000000073-0	what 's the topic's main wikimedia portal of the country which has the most slowly speed limit	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:speed_limit:Measure(mps) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000074-0	enumerate country that have more slowly speed limit than NUMBER_0 kilometers per hour .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:kmph => notify
RS6000000075-0	search the country with life expectancy NUMBER_0 seconds and the most slowly speed limit	now => ( sort param:speed_limit:Measure(mps) asc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
RS6000000076-0	i need the country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
RS6000000077-0	i would like a list of all country having speed limit slower than NUMBER_0 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
RS6000000078-0	search the country with life expectancy NUMBER_0 seconds and the most slowly speed limit .	now => ( sort param:speed_limit:Measure(mps) asc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
RS6000000079-0	i 'm looking to search a list of country with life expectancy longer than NUMBER_0 ms .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
RS6000000080-0	enumerate country with life expectancy NUMBER_0 seconds .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
RS6000000081-0	i 'd like a list of all country having speed limit slower than NUMBER_0 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
RS6000000082-0	what are the head of governments of country	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( @org.wikidata.country ) => notify
RS6000000083-0	i need the country treccani id germania that are germania 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " germania " and param:treccani_id:String =~ " germania " => notify
RS6000000084-0	i want to know the speed limit of country .	now => [ param:speed_limit:Measure(mps) ] of ( @org.wikidata.country ) => notify
RS6000000085-0	enumerate country with life expectancy NUMBER_0 seconds .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
RS6000000086-0	what is the motto of country ?	now => [ param:motto:Entity(org.wikidata:motto) ] of ( @org.wikidata.country ) => notify
RS6000000087-0	i need the country that have life expectancy NUMBER_0 seconds and have the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
RS6000000088-0	what is the topic's main wikimedia portal of the country which has the most slowly speed limit	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:speed_limit:Measure(mps) asc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000089-0	i would like a list of all country having speed limit slower than NUMBER_0 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
RS6000000090-0	i am looking to search a list of country with life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
RS6000000091-0	search the country having maximum temperature record NUMBER_0 degrees and the latest inception .	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature ) ) [ 1 ] => notify
RS6000000092-0	i would like some country with less unemployment rate than NUMBER_0 that have life expectancy longer than NUMBER_0 ms .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms and param:unemployment_rate:Number <= NUMBER_0 => notify
RS6000000093-0	i 'm looking to search a list of country with life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
RS6000000094-0	i need the country that have life expectancy NUMBER_0 seconds and have the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s ) ) [ 1 ] => notify
RS6000000095-0	i want any country treccani id cile jewish encyclopedia id ( russian) cile .	now => ( @org.wikidata.country ) filter param:jewish_encyclopedia_id_russian_:String =~ " cile " and param:treccani_id:String =~ " cile " => notify
RS6000000096-0	i 'd like a list of all country having speed limit slower than NUMBER_0 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
RS6000000097-0	i need the country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
RS6000000098-0	i would like a list of all country having speed limit slower than NUMBER_0 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
RS6000000099-0	i 'm looking to search a list of country with life expectancy longer than NUMBER_0 ms .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms => notify
RS6000000100-0	i need the country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
RS6000000101-0	i am looking to get an country having speed limit slower than NUMBER_0 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) <= NUMBER_0 unit:mps => notify
RS6000000102-0	what are the head of governments of country	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( @org.wikidata.country ) => notify
RS6000000103-0	i want to get every country with less unemployment rate than NUMBER_0 that have life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms and param:unemployment_rate:Number <= NUMBER_0 => notify
RS6000000104-0	i need the country treccani id israele that are israele 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " israele " and param:treccani_id:String =~ " israele " => notify
RS6000000105-0	i need the country that have suicide rate NUMBER_0 , , with maximum temperature record NUMBER_0 degrees	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature and param:suicide_rate:Number == NUMBER_0 => notify
RS6000000106-0	please retrieve an country driving side left treccani id belgio .	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:treccani_id:String =~ " belgio " => notify
RS6000000107-0	search the country having maximum temperature record NUMBER_0 degrees and the latest inception	now => ( sort param:inception:Date desc of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == NUMBER_0 unit:defaultTemperature ) ) [ 1 ] => notify
RS6000000108-0	how many short names are there in the country with the most short names	now => [ param:count:Number ] of ( ( sort param:count:Number desc of ( compute count ( param:short_name:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
RS6000000109-0	is there country that have more slowly speed limit than NUMBER_0 kilometers per hour , with inception before NUMBER_0 ms ago	now => ( @org.wikidata.country ) filter param:inception:Date <= now - NUMBER_0 unit:ms and param:speed_limit:Measure(mps) <= NUMBER_0 unit:kmph => notify
RS6000000110-0	enumerate country with life expectancy NUMBER_0 seconds .	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) == NUMBER_0 unit:s => notify
RS6000000111-0	i would like some country with less unemployment rate than NUMBER_0 that have life expectancy longer than NUMBER_0 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= NUMBER_0 unit:ms and param:unemployment_rate:Number <= NUMBER_0 => notify
RS4000000000-0	search for all countries .	now => @org.wikidata.country => notify
RS4000000001-0	i want a list of countries	now => @org.wikidata.country => notify
RS4000000002-0	get a list of all countries .	now => @org.wikidata.country => notify
RS4000000003-0	get a list of all countries .	now => @org.wikidata.country => notify
RS4000000004-0	i am looking for every countries	now => @org.wikidata.country => notify
RS4000000005-0	i want a list of countries	now => @org.wikidata.country => notify
RS4000000006-0	retrieve the countries .	now => @org.wikidata.country => notify
RS4000000007-0	i 'm looking for every countries	now => @org.wikidata.country => notify
RS4000000008-0	i want a list of countries	now => @org.wikidata.country => notify
RS4000000009-0	i want a list of countries .	now => @org.wikidata.country => notify
RS4000000010-0	i want a list of countries .	now => @org.wikidata.country => notify
RS4000000011-0	retrieve the countries	now => @org.wikidata.country => notify
RS4000000012-0	retrieve the countries	now => @org.wikidata.country => notify
RS4000000013-0	i want a list of countries	now => @org.wikidata.country => notify
RS4000000014-0	is there countries having age of consent NUMBER_0 ?	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
RS4000000015-0	i am looking for every countries	now => @org.wikidata.country => notify
RS5000000016-0	get a list of countries that have age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
RS5000000017-0	i want some countries located in the administrative territorial entity my home .	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
RS5000000018-0	i need to find an countries which is european union tax haven blacklist 's part	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " european union tax haven blacklist " => notify
RS5000000019-0	find all countries that have age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
RS5000000020-0	get a list of countries that have age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
RS5000000021-0	find some countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
RS5000000022-0	i need to find an countries which is benelux 's part	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " benelux " => notify
RS5000000023-0	which are countries historical gazetteer ( gov) id object_149273 driving side left ?	now => ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left and param:historical_gazetteer_gov_id:String =~ " object_149273 " => notify
RS5000000024-0	i want some countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
RS5000000025-0	i am looking for the countries driving side left which have the longest life expectancy	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left ) ) [ 1 ] => notify
RS5000000026-0	please list countries that have age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
RS5000000027-0	i need to find an countries which is benelux 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " benelux " => notify
RS5000000028-0	i need to find an countries which is southwestern europe 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " southwestern europe " => notify
RS5000000029-0	i 'd like an countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
RS5000000030-0	i am looking for the countries driving side left which have the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left ) ) [ 1 ] => notify
RS5000000031-0	i want some countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
RS5000000032-0	i need to get an countries named germany	now => ( @org.wikidata.country ) filter param:id:Entity(org.wikidata:country) =~ " germany " => notify
RS5000000033-0	i am looking for the countries which is south america 's part and have the longest life expectancy	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " south america " ) ) [ 1 ] => notify
RS5000000034-0	i want some countries located in the administrative territorial entity my home .	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
RS5000000035-0	i am looking for the countries which is middle east 's part and have the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " middle east " ) ) [ 1 ] => notify
RS5000000036-0	i 'm looking for the countries driving side left which have the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left ) ) [ 1 ] => notify
RS5000000037-0	i need to find an countries which is low countries 's part .	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " low countries " => notify
RS5000000038-0	find all countries that have age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
RS5000000039-0	i want some countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
RS5000000040-0	i want some countries located in the administrative territorial entity my home .	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
RS5000000041-0	i 'd like an countries located in the administrative territorial entity my home	now => ( @org.wikidata.country ) filter param:located_in_the_administrative_territorial_entity:Location == location:home => notify
RS5000000042-0	what are countries which is western europe 's part , and have age of consent NUMBER_0 ?	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:part_of:Array(String) contains~ " western europe " => notify
RS5000000043-0	i want a list of countries which is low countries 's part	now => ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " low countries " => notify
RS5000000044-0	i 'm looking for the countries which is southeast asia 's part and have the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:part_of:Array(String) contains~ " southeast asia " ) ) [ 1 ] => notify
RS5000000045-0	please list countries that have age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 => notify
RS5000000046-0	i 'm looking for the countries driving side left which have the longest life expectancy	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:driving_side:Enum(Left,Right) == enum:Left ) ) [ 1 ] => notify
RS5000000047-0	is there any countries named libya that have earlier time of earliest written record than yesterday	now => ( @org.wikidata.country ) filter param:id:Entity(org.wikidata:country) =~ " libya " and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day => notify
RS6000000048-0	please search some countries with world cat identities id QUOTED_STRING_0 which have earlier time of earliest written record than yesterday .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000049-0	i need to retrieve the list of countries that have minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000050-0	i 'm looking for the list of countries that have minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000051-0	list countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000052-0	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000053-0	i would like any countries historical gazetteer ( gov) id object_149273 , with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ " object_149273 " and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000054-0	get all countries historical gazetteer ( gov) id object_149273 , with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ " object_149273 " and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000055-0	i 'd like all countries with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000056-0	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000057-0	i want the countries which have time of earliest written record tue	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
RS6000000058-0	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000059-0	i want the countries which have time of earliest written record tue	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
RS6000000060-0	is there countries having time of earliest written record NUMBER_0 milliseconds ago ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == now - NUMBER_0 unit:ms => notify
RS6000000061-0	please search some countries with world cat identities id QUOTED_STRING_0 which have earlier time of earliest written record than yesterday	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000062-0	i want the countries which have time of earliest written record tue .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
RS6000000063-0	list countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000064-0	list countries that have minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000065-0	tell me the language used of countries	now => [ param:language_used:Entity(tt:iso_lang_code) ] of ( @org.wikidata.country ) => notify
RS6000000066-0	get all countries historical gazetteer ( gov) id object_149273 , with minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ " object_149273 " and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000067-0	i need all the countries which have time of earliest written record tue .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
RS6000000068-0	get all countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000069-0	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000070-0	i would like any countries historical gazetteer ( gov) id object_149273 , with minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ " object_149273 " and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000071-0	get all countries historical gazetteer ( gov) id object_149273 , with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ " object_149273 " and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000072-0	what is the currency of the countries with the highest annual number of weddings	now => [ param:currency:Entity(org.wikidata:currency) ] of ( ( sort param:annual_number_of_weddings:Number desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000073-0	please search some countries with world cat identities id QUOTED_STRING_0 which have earlier time of earliest written record than yesterday	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000074-0	i would like to get all countries which have world cat identities id QUOTED_STRING_0 and have zero annual number of weddings	now => ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000075-0	i need to retrieve the list of countries that have minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000076-0	search for the countries with world cat identities id QUOTED_STRING_0 which have earlier time of earliest written record than yesterday and have the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day and param:worldcat_identities_id:String =~ QUOTED_STRING_0 ) ) [ 1 ] => notify
RS6000000077-0	what 's the legislative body of the countries with the longest life expectancy	now => [ param:legislative_body:Entity(org.wikidata:legislative_body) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000078-0	i would like to get all countries which have world cat identities id QUOTED_STRING_0 and have zero annual number of weddings	now => ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000079-0	please search some countries with world cat identities id QUOTED_STRING_0 which have earlier time of earliest written record than yesterday	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:day and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000080-0	what is the area of countries	now => [ param:area:Measure(m2) ] of ( @org.wikidata.country ) => notify
RS6000000081-0	find the countries with time of earliest written record earlier than DATE_0 and zero annual number of weddings and the longest life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:time_of_earliest_written_record:Date <= DATE_0 ) ) [ 1 ] => notify
RS6000000082-0	what are the countries which have world cat identities id QUOTED_STRING_0 and have zero annual number of weddings ?	now => ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000083-0	get the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000084-0	list countries that have minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000085-0	get all countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000086-0	is there countries with time of earliest written record tue ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
RS6000000087-0	what countries have inception NUMBER_0 milliseconds ago	now => ( @org.wikidata.country ) filter param:inception:Date == now - NUMBER_0 unit:ms => notify
RS6000000088-0	i want the countries which have time of earliest written record tue	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
RS6000000089-0	show me what 's the quality of countries	now => [ param:has_quality:Entity(org.wikidata:has_quality) ] of ( @org.wikidata.country ) => notify
RS6000000090-0	i want the countries which have time of earliest written record tue .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
RS6000000091-0	get all countries historical gazetteer ( gov) id object_149273 , with minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ " object_149273 " and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000092-0	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000093-0	i would like to get all countries which have world cat identities id QUOTED_STRING_0 and have zero annual number of weddings .	now => ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000094-0	i would like any countries historical gazetteer ( gov) id object_149273 , with minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ " object_149273 " and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000095-0	get the countries with world cat identities id QUOTED_STRING_0 with the most award received .	now => ( sort param:count:Number desc of ( compute count ( param:award_received:Array(Entity(org.wikidata:award)) ) of ( ( @org.wikidata.country ) filter param:worldcat_identities_id:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
RS6000000096-0	what category for people who died here does the countries with the longest life expectancy have	now => [ param:category_for_people_who_died_here:Entity(org.wikidata:category_for_people_who_died_here) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000097-0	i want the countries which have time of earliest written record tue .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
RS6000000098-0	i 'm looking for the list of countries that have minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000099-0	get all countries historical gazetteer ( gov) id object_149273 , with minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ " object_149273 " and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000100-0	are there countries having inception NUMBER_0 milliseconds ago ?	now => ( @org.wikidata.country ) filter param:inception:Date == now - NUMBER_0 unit:ms => notify
RS6000000101-0	get the countries with world cat identities id QUOTED_STRING_0 with the most award received	now => ( sort param:count:Number desc of ( compute count ( param:award_received:Array(Entity(org.wikidata:award)) ) of ( ( @org.wikidata.country ) filter param:worldcat_identities_id:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
RS6000000102-0	i want the countries which have time of earliest written record tue .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:tuesday ) => notify
RS6000000103-0	i would like to get all countries which have world cat identities id QUOTED_STRING_0 and have zero annual number of weddings	now => ( @org.wikidata.country ) filter param:annual_number_of_weddings:Number == 0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000104-0	is there any countries having time of earliest written record after NUMBER_0 ms before yesterday	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= ( start_of unit:day - 1 unit:day ) - NUMBER_0 unit:ms => notify
RS6000000105-0	get the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000106-0	i 'm looking for the list of countries that have minimum temperature record NUMBER_0 c	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000107-0	i would like any countries historical gazetteer ( gov) id object_149273 , with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ " object_149273 " and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000108-0	get all countries historical gazetteer ( gov) id object_149273 , with minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:historical_gazetteer_gov_id:String =~ " object_149273 " and param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000109-0	i want to search for any countries that have minimum temperature record NUMBER_0 c .	now => ( @org.wikidata.country ) filter param:minimum_temperature_record:Measure(C) == NUMBER_0 unit:C => notify
RS6000000110-0	search for all the countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS6000000111-0	list countries with world cat identities id QUOTED_STRING_0 and age of consent NUMBER_0 .	now => ( @org.wikidata.country ) filter param:age_of_consent:Number == NUMBER_0 and param:worldcat_identities_id:String =~ QUOTED_STRING_0 => notify
RS4000000000-0	find every countries	now => @org.wikidata.country => notify
RS4000000001-0	i 'd like to search any countries .	now => @org.wikidata.country => notify
RS4000000002-0	find every countries	now => @org.wikidata.country => notify
RS4000000003-0	i want to search for all countries	now => @org.wikidata.country => notify
RS4000000004-0	find the countries with the most lasting life expectancy	now => ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] => notify
RS4000000005-0	find every countries .	now => @org.wikidata.country => notify
RS4000000006-0	i want the list of all countries	now => @org.wikidata.country => notify
RS4000000007-0	i want to search for all countries .	now => @org.wikidata.country => notify
RS4000000008-0	what 's the countries which have twitter username being israelarabic	now => ( @org.wikidata.country ) filter param:twitter_username:String =~ " israelarabic " => notify
RS4000000009-0	is there any countries maintained by wiki project q6871603	now => ( @org.wikidata.country ) filter param:maintained_by_wikiproject:String =~ " q6871603 " => notify
RS4000000010-0	find every countries	now => @org.wikidata.country => notify
RS4000000011-0	i want the list of all countries	now => @org.wikidata.country => notify
RS4000000012-0	find every countries	now => @org.wikidata.country => notify
RS4000000013-0	find every countries .	now => @org.wikidata.country => notify
RS4000000014-0	i want to search for all countries	now => @org.wikidata.country => notify
RS4000000015-0	find every countries .	now => @org.wikidata.country => notify
RS5000000016-0	please list countries that are q465613 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ " q465613 " => notify
RS5000000017-0	search for the countries with the fewest nicknames	now => ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000018-0	get a countrie wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS5000000019-0	get a countrie wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS5000000020-0	please list countries that are q465613 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ " q465613 " => notify
RS5000000021-0	please enumerate countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS5000000022-0	is there any countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS5000000023-0	retrieve the countries with the most nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000024-0	please list countries that are q465613 subclass	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ " q465613 " => notify
RS5000000025-0	search a list of countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS5000000026-0	please list countries that are q465613 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ " q465613 " => notify
RS5000000027-0	retrieve the countries with the most nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000028-0	search for the countries with the fewest nicknames	now => ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000029-0	i would like all the countries which are instance of human	now => ( @org.wikidata.country ) filter param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
RS5000000030-0	get a countrie wipo st.3 QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS5000000031-0	search all countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS5000000032-0	please list countries that are q465613 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ " q465613 " => notify
RS5000000033-0	i want to get every countries wipo st.3 QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS5000000034-0	is there any countries that have time of earliest written record earlier than today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day => notify
RS5000000035-0	list countries having continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
RS5000000036-0	i am looking for every countries which have twitter username being israelhebrew .	now => ( @org.wikidata.country ) filter param:twitter_username:String =~ " israelhebrew " => notify
RS5000000037-0	list countries having continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
RS5000000038-0	i am looking for every countries which have twitter username being israel .	now => ( @org.wikidata.country ) filter param:twitter_username:String =~ " israel " => notify
RS5000000039-0	please list countries that are q465613 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ " q465613 " => notify
RS5000000040-0	retrieve the countries with the most nicknames .	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS5000000041-0	list countries having continent north america .	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
RS5000000042-0	please list countries that are q465613 subclass .	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ " q465613 " => notify
RS5000000043-0	please enumerate countries wipo st.3 QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS5000000044-0	list countries having continent north america .	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica => notify
RS5000000045-0	which countries has the hottest maximum temperature record ?	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] => notify
RS5000000046-0	are there any countries which have twitter username being israel , and with smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:twitter_username:String =~ " israel " => notify
RS5000000047-0	retrieve the countries with the most nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] => notify
RS6000000048-0	get the list of all countries with smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 => notify
RS6000000049-0	what are the ethnic groups of the countries with the most lasting life expectancy	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000050-0	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
RS6000000051-0	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000052-0	please enumerate countries that have time of earliest written record earlier than today .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day => notify
RS6000000053-0	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000054-0	i want to retrieve every countries with twitter username being govbr , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ " govbr " => notify
RS6000000055-0	i need to know the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000056-0	i 'd like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000057-0	search the nicknames of the countries with the most lasting life expectancy .	now => [ param:nickname:Array(String) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000058-0	i want to search for a countrie wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000059-0	i need to know the ethnic groups of the countries with the hottest maximum temperature record .	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000060-0	what are the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000061-0	i want to retrieve every countries with twitter username being israel , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ " israel " => notify
RS6000000062-0	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000063-0	enumerate countries with smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 => notify
RS6000000064-0	i want to retrieve every countries with twitter username being israel , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ " israel " => notify
RS6000000065-0	are there countries having time of earliest written record 1 m before today	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms => notify
RS6000000066-0	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000067-0	i want a list of all countries that have govbr as twitter username , and with maximum temperature record 1 fahrenheit .	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:twitter_username:String =~ " govbr " => notify
RS6000000068-0	search for a list of countries with area larger than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 => notify
RS6000000069-0	i want to search for a countrie wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000070-0	are there any countries which have time of earliest written record 1 m before today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms => notify
RS6000000071-0	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000072-0	i want to retrieve every countries with twitter username being israel , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ " israel " => notify
RS6000000073-0	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000074-0	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000075-0	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000076-0	i 'd like to know the life expectancy of countries	now => [ param:life_expectancy:Measure(ms) ] of ( @org.wikidata.country ) => notify
RS6000000077-0	how many countries that are q465613 subclass are there ?	now => aggregate count of ( ( @org.wikidata.country ) filter param:subclass_of:String =~ " q465613 " ) => notify
RS6000000078-0	i need to know the ethnic groups of the countries with the hottest maximum temperature record .	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000079-0	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000080-0	i want to retrieve the list of countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000081-0	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames .	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
RS6000000082-0	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000083-0	i 'd like to retrieve an countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000084-0	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
RS6000000085-0	what are the nicknames of the countries with the most lasting life expectancy	now => [ param:nickname:Array(String) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000086-0	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000087-0	search for the countries wipo st.3 QUOTED_STRING_0 with the largest number of nicknames	now => ( sort param:count:Number desc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) ) [ 1 ] => notify
RS6000000088-0	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000089-0	retrieve any countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000090-0	i want a list of all countries that have israelarabic as twitter username , and with maximum temperature record 1 fahrenheit	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:twitter_username:String =~ " israelarabic " => notify
RS6000000091-0	i need to know the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000092-0	are there countries having time of earliest written record earlier than 1 min before today ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
RS6000000093-0	are there any countries that have sooner time of earliest written record than 1 min ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
RS6000000094-0	i 'd like to retrieve an countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000095-0	what countries have name belize and continent north america and the most lasting life expectancy ?	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:id:Entity(org.wikidata:country) =~ " belize " ) ) [ 1 ] => notify
RS6000000096-0	what are the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000097-0	retrieve any countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000098-0	i want to search for a countrie wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000099-0	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000100-0	i am looking for the list of all countries with twitter username being israelarabic , that have longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:twitter_username:String =~ " israelarabic " => notify
RS6000000101-0	i 'd like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000102-0	get the list of all countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 .	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000103-0	enumerate countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS6000000104-0	i would like to know the life expectancy of countries	now => [ param:life_expectancy:Measure(ms) ] of ( @org.wikidata.country ) => notify
RS6000000105-0	i would like to retrieve an countries that have time of earliest written record last	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000106-0	what 's the life expectancy of countries	now => [ param:life_expectancy:Measure(ms) ] of ( @org.wikidata.country ) => notify
RS6000000107-0	what countries have name peru and continent north america and the most lasting life expectancy ?	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:id:Entity(org.wikidata:country) =~ " peru " ) ) [ 1 ] => notify
RS6000000108-0	i would like to retrieve an countries that have time of earliest written record last .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week => notify
RS6000000109-0	get the countries with area larger than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 => notify
RS6000000110-0	what are the ethnic groups of the countries with the hottest maximum temperature record	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS6000000111-0	search the nicknames of the countries with the most lasting life expectancy	now => [ param:nickname:Array(String) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( @org.wikidata.country ) ) [ 1 ] ) => notify
RS7000000112-0	show me what is the main regulatory text of the countries wipo st.3 QUOTED_STRING_0 with the hottest maximum temperature record .	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) [ 1 ] ) => notify
RS7000000113-0	get any countries that have time of earliest written record later than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS7000000114-0	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
RS7000000115-0	tell me what 's the life expectancy of the countries with the least nicknames	now => [ param:life_expectancy:Measure(ms) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
RS7000000116-0	i need all countries which have speed limit 1 m/s , and have later time of earliest written record than 1 min ago	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:min => notify
RS7000000117-0	i need the topic's main wikimedia portal of the countries with the fewest nicknames	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
RS7000000118-0	get the countries wipo st.3 QUOTED_STRING_0 having twitter username being QUOTED_STRING_0 , which have inception 1 m ago .	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 => notify
RS7000000119-0	please retrieve any countries with twitter username being israelarabic , that have time of earliest written record earlier than 1 min before today .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min and param:twitter_username:String =~ " israelarabic " => notify
RS7000000120-0	what are the participant in of the countries having israelhebrew as twitter username and the hottest maximum temperature record	now => [ param:participant_in:Array(Entity(org.wikidata:event)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:twitter_username:String =~ " israelhebrew " ) ) [ 1 ] ) => notify
RS7000000121-0	i am looking to search for an countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
RS7000000122-0	please list countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
RS7000000123-0	i 'd like some countries that have time of earliest written record earlier than today , and are q465613 subclass	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ " q465613 " and param:time_of_earliest_written_record:Date <= start_of unit:day => notify
RS7000000124-0	get the list of all countries having time of earliest written record later than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS7000000125-0	tell me what 's the twitter username of the countries with the least nicknames .	now => [ param:twitter_username:String ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
RS7000000126-0	please retrieve any countries with twitter username being govbr , that have time of earliest written record earlier than 1 min before today	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min and param:twitter_username:String =~ " govbr " => notify
RS7000000127-0	i need a list of all countries that have govbr as twitter username , and have sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ " govbr " => notify
RS7000000128-0	please list countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
RS7000000129-0	i would like some countries that have time of earliest written record earlier than today , and are q465613 subclass	now => ( @org.wikidata.country ) filter param:subclass_of:String =~ " q465613 " and param:time_of_earliest_written_record:Date <= start_of unit:day => notify
RS7000000130-0	i want the countries having speed limit 1 m/s , which have area larger than 1 square kilometers and have the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 and param:speed_limit:Measure(mps) == 1 unit:mps ) ) [ 1 ] => notify
RS7000000131-0	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
RS7000000132-0	what are the nicknames of the countries with the least nicknames	now => [ param:nickname:Array(String) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
RS7000000133-0	i want the countries having time of earliest written record 1 m before today and the hottest maximum temperature record .	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms ) ) [ 1 ] => notify
RS7000000134-0	what main regulatory text do countries having israelarabic as twitter username have ?	now => [ param:main_regulatory_text:Entity(org.wikidata:main_regulatory_text) ] of ( ( @org.wikidata.country ) filter param:twitter_username:String =~ " israelarabic " ) => notify
RS7000000135-0	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
RS7000000136-0	tell me what 's the time of earliest written record of countries wipo st.3 QUOTED_STRING_0	now => [ param:time_of_earliest_written_record:Date ] of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
RS7000000137-0	tell me what is the head of governments of the countries wipo st.3 QUOTED_STRING_0 with the hottest maximum temperature record .	now => [ param:head_of_government:Array(Entity(org.wikidata:human)) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) ) [ 1 ] ) => notify
RS7000000138-0	i need a list of all countries that have israelhebrew as twitter username , and have sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ " israelhebrew " => notify
RS7000000139-0	i want to retrieve a list of all countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
RS7000000140-0	i need a list of all countries that have israelarabic as twitter username , and have sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ " israelarabic " => notify
RS7000000141-0	i need to search all countries with area larger than 1 square kilometers and time of earliest written record 1 m before today	now => ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 and param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms => notify
RS7000000142-0	search all the countries having sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
RS7000000143-0	i need a list of all countries with smaller area than 1 square kilometers and longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:life_expectancy:Measure(ms) >= 1 unit:ms => notify
RS7000000144-0	search all the countries having sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms => notify
RS7000000145-0	get the countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
RS7000000146-0	which countries get time of earliest written record earlier than 1 min before today and longer life expectancy than 1 ms	now => ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
RS7000000147-0	i need the topic's main wikimedia portal of the countries with the fewest nicknames .	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
RS7000000148-0	what is countries that have time of earliest written record earlier than 1 min before today , , with time of earliest written record later than 1 m ago ?	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS7000000149-0	retrieve all countries which have speed limit 1 m/s , and have later time of earliest written record than 1 min ago .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:min => notify
RS7000000150-0	get the countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
RS7000000151-0	enumerate countries that have smaller area than 1 square kilometers , and have speed limit 1 m/s	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:speed_limit:Measure(mps) == 1 unit:mps => notify
RS7000000152-0	i would like the countries that have israel as twitter username , and have later time of earliest written record than 1 m before today and have the most lasting life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms and param:twitter_username:String =~ " israel " ) ) [ 1 ] => notify
RS7000000153-0	i need the topic's main wikimedia portal of the countries with the fewest nicknames	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
RS7000000154-0	i 'm looking to search for an countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
RS7000000155-0	get the countries with smaller area than 1 square kilometers , which have time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
RS7000000156-0	i want the countries having speed limit 1 m/s , which have area larger than 1 square kilometers and have the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:area:Measure(m2) >= 1 unit:km2 and param:speed_limit:Measure(mps) == 1 unit:mps ) ) [ 1 ] => notify
RS7000000157-0	what countries have time of earliest written record last and twitter username being israelarabic	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week and param:twitter_username:String =~ " israelarabic " => notify
RS7000000158-0	i need the topic's main wikimedia portal of the countries with the fewest nicknames	now => [ param:topics_main_wikimedia_portal:Entity(org.wikidata:topics_main_wikimedia_portal) ] of ( ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( @org.wikidata.country ) ) ) [ 1 ] ) => notify
RS7000000159-0	what are the nicknames of countries wipo st.3 QUOTED_STRING_0	now => [ param:nickname:Array(String) ] of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
RS7000000160-0	i want the countries that have israelarabic as twitter username , and have later time of earliest written record than 1 m before today and have the most lasting life expectancy .	now => ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms and param:twitter_username:String =~ " israelarabic " ) ) [ 1 ] => notify
RS7000000161-0	what are the nicknames of countries wipo st.3 QUOTED_STRING_0	now => [ param:nickname:Array(String) ] of ( ( @org.wikidata.country ) filter param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
RS7000000162-0	what is the countries with later time of earliest written record than 1 min ago and the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date >= now - 1 unit:min ) ) [ 1 ] => notify
RS7000000163-0	i need a list of all countries that have govbr as twitter username , and have sooner time of earliest written record than 1 m ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:twitter_username:String =~ " govbr " => notify
RS8000000164-0	get a countrie with inception 1 m before today and time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
RS8000000165-0	i want the countries which have inception 1 m before today , with israel as twitter username and the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:twitter_username:String =~ " israel " ) ) [ 1 ] => notify
RS8000000166-0	search for a list of all countries that have inception 1 m ago , , with israel as twitter username	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ " israel " => notify
RS8000000167-0	i want the countries which have inception 1 m before today , with israelhebrew as twitter username and the hottest maximum temperature record .	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:twitter_username:String =~ " israelhebrew " ) ) [ 1 ] => notify
RS8000000168-0	get a countrie with inception 1 m before today and time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
RS8000000169-0	i need to search for all the countries having inception 1 m ago which are instance of human .	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
RS8000000170-0	i would like the list of all countries having time of earliest written record earlier than 1 min before today and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
RS8000000171-0	find the countries that have later time of earliest written record than 1 min ago and have earlier time of earliest written record than 1 m before today and have the hottest maximum temperature record	now => ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date >= now - 1 unit:min ) ) [ 1 ] => notify
RS8000000172-0	i am looking to search for a list of all countries having time of earliest written record later than 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS8000000173-0	list countries having time of earliest written record earlier than 1 min before today which have continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
RS8000000174-0	get an countries having time of earliest written record earlier than 1 min before today and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
RS8000000175-0	list countries that have earlier time of earliest written record than 1 m before today , and having later time of earliest written record than 1 min ago .	now => ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date >= now - 1 unit:min => notify
RS8000000176-0	what is the patron saint of countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0	now => [ param:patron_saint:Entity(org.wikidata:human) ] of ( ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
RS8000000177-0	i want a countrie that have inception 1 m ago and have earlier time of earliest written record than 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:ms => notify
RS8000000178-0	please list countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS8000000179-0	tell me what 's the category for films shot at this location of the countries having continent north america and smaller area than 1 square kilometers and the most lasting life expectancy .	now => [ param:category_for_films_shot_at_this_location:Entity(org.wikidata:category_for_films_shot_at_this_location) ] of ( ( sort param:life_expectancy:Measure(ms) desc of ( ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica ) ) [ 1 ] ) => notify
RS8000000180-0	search for a list of all countries that have inception 1 m ago , , with israelarabic as twitter username	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ " israelarabic " => notify
RS8000000181-0	get a countrie with inception 1 m before today and time of earliest written record 1 m ago	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date == now - 1 unit:ms => notify
RS8000000182-0	are there any countries with inception 1 m before today and continent north america ?	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:inception:Date == start_of unit:day - 1 unit:ms => notify
RS8000000183-0	list countries having time of earliest written record earlier than 1 min before today which have continent north america	now => ( @org.wikidata.country ) filter param:continent:Enum(Africa,SouthAmerica,Europe,Asia,NorthAmerica,Antarctica,Oceania,Americas,Australia,Eurasia,CentralAmerica,AustraliaAndOceania,Caribbean,Tamriel,Faerun,KaraTur,Westeros,NorthernAmericaAndMexico) == enum:NorthAmerica and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
RS8000000184-0	get a countrie having sooner time of earliest written record than 1 min ago that have smaller area than 1 square kilometers .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
RS8000000185-0	i need to search for all the countries having inception 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
RS8000000186-0	please list countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers .	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS8000000187-0	i need to search for all the countries having inception 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human => notify
RS8000000188-0	retrieve any countries that have maximum temperature record 1 fahrenheit , and have later time of earliest written record than 1 m before today , and have sooner time of earliest written record than 1 m ago	now => ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:time_of_earliest_written_record:Date <= now - 1 unit:ms and param:time_of_earliest_written_record:Date >= start_of unit:day - 1 unit:ms => notify
RS8000000189-0	get the countries having time of earliest written record 1 m before today with the smallest count of nicknames	now => ( sort param:count:Number asc of ( compute count ( param:nickname:Array(String) ) of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date == start_of unit:day - 1 unit:ms ) ) ) [ 1 ] => notify
RS8000000190-0	search for a list of all countries that have inception 1 m ago , , with israelarabic as twitter username .	now => ( @org.wikidata.country ) filter param:inception:Date == now - 1 unit:ms and param:twitter_username:String =~ " israelarabic " => notify
RS8000000191-0	i need all the countries that are q465613 subclass , with sooner time of earliest written record than 1 min ago and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:subclass_of:String =~ " q465613 " and param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
RS8000000192-0	get an countries having time of earliest written record earlier than 1 min before today and inception 1 m before today	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:time_of_earliest_written_record:Date <= start_of unit:day - 1 unit:min => notify
RS8000000193-0	count the countries having longer life expectancy than 1 m and time of earliest written record last	now => aggregate count of ( ( @org.wikidata.country ) filter param:life_expectancy:Measure(ms) >= 1 unit:ms and param:time_of_earliest_written_record:Date == new Date ( enum:friday ) - 1 unit:week ) => notify
RS8000000194-0	get a countrie having sooner time of earliest written record than 1 min ago that have smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date <= now - 1 unit:min => notify
RS8000000195-0	search the ethnic groups of countries with smaller area than 1 square kilometers .	now => [ param:ethnic_group:Array(Entity(org.wikidata:ethnic_group)) ] of ( ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 ) => notify
RS8000000196-0	retrieve the list of countries having later time of earliest written record than 1 m ago and speed limit 1 m/s	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS8000000197-0	i want to retrieve an countries having time of earliest written record later than 1 m ago which are instance of human	now => ( @org.wikidata.country ) filter param:instance_of:Enum(Human,Village,Book,House,Film,Taxon,Building,FamilyName,Album,HumanSettlement,Painting,Version,Edition,OrTranslation,Business) == enum:Human and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS8000000198-0	i 'm looking for the category of associated people of the countries that have time of earliest written record earlier than today and have the hottest maximum temperature record .	now => [ param:category_of_associated_people:Entity(org.wikidata:category_of_associated_people) ] of ( ( sort param:maximum_temperature_record:Measure(C) desc of ( ( @org.wikidata.country ) filter param:time_of_earliest_written_record:Date <= start_of unit:day ) ) [ 1 ] ) => notify
RS8000000199-0	search for a list of all countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS8000000200-0	please search a list of countries which have inception 1 m before today , with govbr as twitter username	now => ( @org.wikidata.country ) filter param:inception:Date == start_of unit:day - 1 unit:ms and param:twitter_username:String =~ " govbr " => notify
RS8000000201-0	retrieve the list of countries having later time of earliest written record than 1 m ago and speed limit 1 m/s .	now => ( @org.wikidata.country ) filter param:speed_limit:Measure(mps) == 1 unit:mps and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS8000000202-0	i 'd like any countries that have later time of earliest written record than 1 m ago and have smaller area than 1 square kilometers	now => ( @org.wikidata.country ) filter param:area:Measure(m2) <= 1 unit:km2 and param:time_of_earliest_written_record:Date >= now - 1 unit:ms => notify
RS8000000203-0	what 's the highest point of countries wipo st.3 QUOTED_STRING_0 italian vikidia id QUOTED_STRING_0 ?	now => [ param:highest_point:Location ] of ( ( @org.wikidata.country ) filter param:italian_vikidia_id:String =~ QUOTED_STRING_0 and param:wipo_st3:String =~ QUOTED_STRING_0 ) => notify
RS8000000204-0	what 's the category of associated people of countries that have israel as twitter username , and with maximum temperature record 1 fahrenheit ?	now => [ param:category_of_associated_people:Entity(org.wikidata:category_of_associated_people) ] of ( ( @org.wikidata.country ) filter param:maximum_temperature_record:Measure(C) == 1 unit:F and param:twitter_username:String =~ " israel " ) => notify
