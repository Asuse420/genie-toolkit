// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
    const Ast = require('../../lib/languages/multidst/ast');
    const { Slot, EmptySlot, checkAndAddSlot, SEARCH_SLOTS } = require('./ast_utils');
}

random_number = {
    '10';
    '20';
    '30';
    '100';
    '1000';
    '2000';
    '5000';
}

generic_preamble = {
    'i am looking for' => [];
    'i am looking for' => [];
    'i would like' => [];
    'i would like' => [];
    'i want' => [];
    'i need' => [];
}

preamble = {
    'hello ! i am looking for a' => [];
    'hello ! i am looking for the' => [];
    'hello , i am looking for a' => [];
    'hello , i am looking for the' => [];
    'i am looking for information about the' => [];
    'i am looking for informating regarding a' => [];
    'i am looking to get some information on the' => [];

    'i am also looking for a' => [];
    'i am also looking for the' => [];
    'i also want a' => [];
    'i also need a' => [];
    'i want a' => [];
    'i need a' => [];
    'can you help me with a' => [];
    'can you help me with information about a' => [];
    'can you help with info regarding the' => [];
    'can you help with information regarding the' => [];
    'can you help me find info about the' => [];
    'can you help me find a' => [];

    'i would like to book a' => ['train', 'hotel', 'taxi'];
    'i need to book a' => ['train', 'hotel', 'taxi'];
    'i need to make a reservation for a' => ['hotel', 'restaurant'];
    'i need to make a reservation at a' => ['hotel', 'restaurant'];
    'i need to book a reservation for a' => ['hotel', 'restaurant'];
    'i need to book a reservation at a' => ['hotel', 'restaurant'];
    'i would like a reservation for a' => ['hotel', 'restaurant'];
    'can you help me with a reservation for a' => ['hotel', 'restaurant'];
    'can you help me book a' => ['train', 'hotel', 'taxi'];
}

param_noun_phrase = {
    // restaurant
    ( 'cuisine'
    | 'food'
    | 'type of food'
    ) => 'restaurant-food';

    ( 'restaurant'
    | 'place'
    | 'name'
    | 'name of the restaurant'
    ) => 'restaurant-name';

    'price range' => 'restaurant-price-range';

    ( 'area'
    | 'area of the city') => 'restaurant-area';

    'number of people' => 'restaurant-book-people';

    ( 'day'
    | 'date'
    ) => 'restaurant-book-day';

    'time' => 'restaurant-book-time';

    // hotel
    ( 'hotel'
    | 'place'
    | 'name'
    | 'name of the hotel'
    ) => 'hotel-name';

    'price range' => 'hotel-price-range';

    ( 'area'
    | 'area of the city') => 'hotel-area';

    'number of people' => 'hotel-book-people';

    ( 'day'
    | 'date'
    ) => 'hotel-book-day';

    ( 'duration'
    | 'length of stay'
    ) => 'hotel-book-stay';

    // attraction

    ( 'attraction type'
    | 'attraction'
    | 'type'
    | 'type of attraction'
    ) => 'attraction-type';

    ( 'attraction'
    | 'place'
    | 'name'
    ) => 'attraction-name';

    ( 'area'
    | 'area of the city') => 'attraction-area';

    // train
    ( 'destination'
    | 'destination station'
    | 'arrival'
    ) => 'train-destination';

    ( 'departure'
    | 'departure station'
    ) => 'train-departure';

    ( 'time'
    | 'departure time'
    ) => 'train-leave-at';
    'arrival time' => 'train-arrive-by';

    ( 'day'
    | 'date'
    ) => 'train-book-day';

    // taxi
    ( 'destination'
    | 'destination address'
    | 'arrival'
    ) => 'taxi-destination';

    ( 'departure'
    | 'departure address'
    | 'pickup'
    ) => 'taxi-departure';

    ( 'day'
    | 'date'
    ) => 'taxi-book-day';

    ( 'time'
    | 'departure time'
    | 'pickup time'
    ) => 'taxi-leave-at';
    ( 'arrival time'
    | 'dropoff time'
    ) => 'taxi-arrive-by';

    'number of people' => 'taxi-book-people';
}

sys_param_noun_phrase = {
    'address' => 'attraction-system-address';
    'post code' => 'attraction-system-post';
    'phone number' => 'attraction-system-phone';
    'opening hours' => 'attraction-system-open';
    ( 'entrance fee'
    | 'ticket cost'
    ) => 'attraction-system-fee';

    'address' => 'hotel-system-address';
    'post code' => 'hotel-system-post';
    'phone number' => 'hotel-system-phone';
    ( 'reference number'
    | 'booking reference'
    ) => 'hotel-system-ref';

    'address' => 'restaurant-system-address';
    'post code' => 'restaurant-system-post';
    'phone number' => 'restaurant-system-phone';
    ( 'reference number'
    | 'booking reference'
    ) => 'restaurant-system-ref';

    ( 'car'
    | 'type of car'
    ) => 'taxi-system-car';
    ( 'reference number'
    | 'booking reference'
    ) => 'taxi-system-ref';

    'train number' => 'train-system-id';
}

base_noun_phrase = {
    // hotel
    'hotel' => new Ast.DialogState('hotel');
    'hotel -s' => new Ast.DialogState('hotel');
    'guest house' => checkAndAddSlot(new Ast.DialogState('hotel'), new Slot('hotel-type', new Ast.ConstantValue('guest house')));
    'place to stay' => new Ast.DialogState('hotel');
    'place to sleep' => new Ast.DialogState('hotel');

    // train
    'train' => new Ast.DialogState('train');
    'train ride' => new Ast.DialogState('train');
    'train ticket' => new Ast.DialogState('train');
    'ticket for a train' => new Ast.DialogState('train');

    // restaurant
    'restaurant' => new Ast.DialogState('restaurant');
    'place to eat' => new Ast.DialogState('restaurant');
    'food place' => new Ast.DialogState('restaurant');

    // taxi
    'taxi' => new Ast.DialogState('taxi');
    'taxi ride' => new Ast.DialogState('taxi');

    // attraction
    'things to do' => new Ast.DialogState('attraction');
    'attraction' => new Ast.DialogState('attraction');
    v:constant_attraction_type => checkAndAddSlot(new Ast.DialogState('attraction'), new Slot('attraction-type', v));
}

// npp: Noun-Phrase of Property
// "X that have $npp_slot" or "X with $npp_slot"
npp_slot = {
    // hotel
    ( v:constant_hotel_price_range 'price'
    | v:constant_hotel_price_range 'price range'
    ) => new Slot('hotel-price-range', v);

    v:constant_hotel_stars 'stars' => new Slot('hotel-stars', v);

    'parking' => new Slot('hotel-parking', new Ast.TristateValue('yes'));
    'parking available' => new Slot('hotel-parking', new Ast.TristateValue('yes'));
    'no parking' => new Slot('hotel-parking', new Ast.TristateValue('no'));
    'free parking' => new Slot('hotel-parking', new Ast.TristateValue('yes'));
    'free parking available' => new Slot('hotel-parking', new Ast.TristateValue('yes'));

    'internet' => new Slot('hotel-internet', new Ast.TristateValue('yes'));
    'no internet' => new Slot('hotel-internet', new Ast.TristateValue('no'));
    'free internet' => new Slot('hotel-internet', new Ast.TristateValue('yes'));
    'free internet available' => new Slot('hotel-internet', new Ast.TristateValue('yes'));
    'wifi' => new Slot('hotel-internet', new Ast.TristateValue('yes'));
    'no wifi' => new Slot('hotel-internet', new Ast.TristateValue('no'));
    'free wifi' => new Slot('hotel-internet', new Ast.TristateValue('yes'));
    'free wifi available' => new Slot('hotel-internet', new Ast.TristateValue('yes'));

    'name' v:constant_hotel_name => new Slot('hotel-name', v);

    // train
    ( 'departure' v:constant_train_departure
    | 'departure station' v:constant_train_departure
    ) => new Slot('train-departure', v);

    ( 'destination' v:constant_train_destination
    | 'destination station' v:constant_train_destination
    | 'arrival' v:constant_train_destination
    ) => new Slot('train-destination', v);

    // restaurant
    ( v:constant_restaurant_food 'cuisine'
    | v:constant_restaurant_food 'food'
    ) => new Slot('restaurant-food', v);

    'name' v:constant_restaurant_name => new Slot('restaurant-name', v);

    // taxi
    ( 'departure' v:constant_taxi_departure
    | 'pick up at' v:constant_taxi_departure
    ) => new Slot('taxi-departure', v);

    ( 'destination' v:constant_taxi_destination
    | 'arrival' v:constant_taxi_destination
    | 'drop off at' v:constant_taxi_destination
    ) => new Slot('taxi-destination', v);

    // attraction
    'name' v:constant_attraction_name => new Slot('attraction-name', v);
    'type' v:constant_attraction_type => new Slot('attraction-type', v);
}

// npi: Noun-Phrase of Identity
// "X that is $npi_slot", where npi is a noun-phrase (not a passive-verb-phrase)
npi_slot = {
}

// prep: Preposition
// "X $prep_slot" or "X that <verb> $prep_slot" - where $prep_slot starts with a preposition
// eg. "train to cambridge"
prep_slot = {
    // hotel
    ( 'in' v:constant_hotel_area
    | 'in the' v:constant_hotel_area 'area'
    | 'near' v:constant_hotel_area
    | 'near the' v:constant_hotel_area 'area'
    | 'around' v:constant_hotel_area
    | 'around the' v:constant_hotel_area 'area'
    ) => new Slot('hotel-area', v);

    ( 'for' v:constant_hotel_book_day
    | 'on' v:constant_hotel_book_day
    ) => new Slot('hotel-book-day', v);

    ( 'for' v:constant_hotel_book_people 'people'
    | 'for' v:constant_hotel_book_people
    ) => new Slot('hotel-book-people', v);

    // train
    'from' v:constant_train_departure => new Slot('train-departure', v);

    'to' v:constant_train_destination => new Slot('train-destination', v);

    ( 'for' v:constant_train_day
    | 'on' v:constant_train_day
    ) => new Slot('train-day', v);

    ( 'for' v:constant_train_book_people 'people'
    | 'for' v:constant_train_book_people
    ) => new Slot('train-book-people', v);

    // restaurant
    'at' v:constant_restaurant_book_time => new Slot('restaurant-book-time', v);

    ( 'for' v:constant_restaurant_book_people 'people'
    | 'for' v:constant_restaurant_book_people
    ) => new Slot('restaurant-book-people', v);

    ( 'for' v:constant_restaurant_book_day
    | 'on' v:constant_restaurant_book_day
    ) => new Slot('restaurant-book-day', v);

    // taxi
    'from' v:constant_taxi_departure => new Slot('taxi-departure', v);

    'to' v:constant_taxi_destination => new Slot('taxi-destination', v);

    // attraction
    ( 'in the' v:constant_attraction_area
    | 'in the' v:constant_attraction_area 'area'
    | 'near the' v:constant_attraction_area 'area'
    | 'around the' v:constant_attraction_area 'area'
    ) => new Slot('attraction-area', v);
}

// pvp: Passive-Verb Phrase
// "X $pvp_slot" or "X that is $pvp_slot" - where $pvp_slot is a verb phrase in -ed or -ing form
// eg. "train leaving from cambridge"
// pvp_slot is also used for prepositional phrases
pvp_slot = {
    // hotel
    'called' v:constant_hotel_name => new Slot('hotel-name', v);

    // train
    ( 'leaving' v:constant_train_departure
    | 'leaving from' v:constant_train_departure
    | 'departing from' v:constant_train_departure
    | 'departing at' v:constant_train_departure
    ) => new Slot('train-departure', v);

    ( 'arriving at' v:constant_train_destination
    | 'arriving to' v:constant_train_destination
    | 'going to' v:constant_train_destination
    | 'going into' v:constant_train_destination
    ) => new Slot('train-destination', v);

    ( 'arriving at' v:constant_train_arrive_by
    | 'arriving by' v:constant_train_arrive_by
    | 'arriving before' v:constant_train_arrive_by
    ) => new Slot('train-arrive-by', v);

    ( 'leaving at' v:constant_train_leave_at
    | 'leaving after' v:constant_train_leave_at
    ) => new Slot('train-leave-at', v);

    ( 'leaving on' v:constant_train_day
    | 'arriving on' v:constant_train_day
    ) => new Slot('train-day', v);

    // restaurant
    ( 'serving' v:constant_restaurant_food
    | 'serving' v:constant_restaurant_food 'food'
    | 'serving' v:constant_restaurant_food 'cuisine'
    ) => new Slot('restaurant-food', v);

    'called' v:constant_restaurant_name => new Slot('restaurant-name', v);

    // taxi
    ( 'leaving' v:constant_taxi_departure
    | 'leaving from' v:constant_taxi_departure
    | 'departing from' v:constant_taxi_departure
    | 'departing at' v:constant_taxi_departure
    | 'picking me up at' v:constant_taxi_departure
    ) => new Slot('taxi-departure', v);

    ( 'arriving at' v:constant_taxi_destination
    | 'arriving to' v:constant_taxi_destination
    | 'dropping me off at' v:constant_taxi_destination
    ) => new Slot('taxi-destination', v);

    ( 'arriving at' v:constant_taxi_arrive_by
    | 'arriving by' v:constant_taxi_arrive_by
    | 'arriving before' v:constant_taxi_arrive_by
    | 'dropping me off at' v:constant_taxi_arrive_by
    | 'dropping me off by' v:constant_taxi_arrive_by
    ) => new Slot('taxi-arrive-by', v);

    ( 'leaving at' v:constant_taxi_leave_at
    | 'leaving after' v:constant_taxi_leave_at
    ) => new Slot('taxi-leave-at', v);

    // attraction
    'called' v:constant_attraction_name => new Slot('attraction-name', v);
}

// avp: Active-Verb Phrase
// "X that $apv_slot" where $apv_slot is a verb phrase in active form, with X as subject
avp_slot = {
    // train
    ( 'departs from' v:constant_train_departure
    | 'should depart from' v:constant_train_departure
    | 'departs at' v:constant_train_departure
    ) => new Slot('train-departure', v);

    ( 'arrives at' v:constant_train_destination
    | 'should arrive at' v:constant_train_destination
    | 'arrives to' v:constant_train_destination
    ) => new Slot('train-destination', v);

    ( 'arrives at' v:constant_train_arrive_by
    | 'arrives by' v:constant_train_arrive_by
    | 'arrives before' v:constant_train_arrive_by
    ) => new Slot('train-arrive-by', v);

    ( 'leaves at' v:constant_train_leave_at
    | 'leaves after' v:constant_train_leave_at
    ) => new Slot('train-leave-at', v);

    // restaurant
    ( 'serves' v:constant_restaurant_food
    | 'serves' v:constant_restaurant_food 'food'
    | 'serves' v:constant_restaurant_food 'cuisine'
    ) => new Slot('restaurant-food', v);

    // taxi
    ( 'departs from' v:constant_taxi_departure
    | 'should depart from' v:constant_taxi_departure
    | 'departs at' v:constant_taxi_departure
    | 'picks me up at' v:constant_taxi_departure
    ) => new Slot('taxi-departure', v);

    ( 'arrives at' v:constant_taxi_destination
    | 'arrives to' v:constant_taxi_destination
    | 'should arrive to' v:constant_taxi_destination
    | 'drops me off at' v:constant_taxi_destination
    ) => new Slot('taxi-destination', v);

    ( 'arrives at' v:constant_taxi_arrive_by
    | 'arrives by' v:constant_taxi_arrive_by
    | 'arrives before' v:constant_taxi_arrive_by
    | 'drops me off at' v:constant_taxi_arrive_by
    ) => new Slot('taxi-arrive-by', v);

    ( 'leaves at' v:constant_taxi_leave_at
    | 'leaves after' v:constant_taxi_leave_at
    | 'picks me up at' v:constant_taxi_leave_at
    ) => new Slot('taxi-leave-at', v);
}

// apv: Adjective-Phrase Value
// "$apv_slot X" where $apv_slot is an adjective phrase
// e.g.: "cheap restaurant", "5-star hotel"
apv_slot = {
    // hotel
    v:constant_hotel_price_range => new Slot('hotel-price-range', v);
    v:constant_hotel_stars 'star' => new Slot('hotel-stars', v);

    // restaurant
    v:constant_restaurant_food => new Slot('restaurant-food', v);
}

generic_answer = {
    // "i want to book for 3 people", "I want to book at ..."
    'i' ('want' | 'need') 'to book' slot:prep_slot => checkAndAddSlot(new Ast.DialogState, slot);

    'i' ('want' | 'need') 'to leave' slot:prep_slot => {
        if (!slot.key.endsWith('-departure') && !slot.key.endsWith('-leave-at'))
            return null;
        return checkAndAddSlot(new Ast.DialogState, slot);
    };
    'i' ('want' | 'need') 'to arrive' slot:prep_slot => {
        if (!slot.key.endsWith('-destination') && !slot.key.endsWith('-arrive-by'))
            return null;
        return checkAndAddSlot(new Ast.DialogState, slot);
    };

    'i am travelling' slot:prep_slot => {
        if (slot.domain !== 'train' && slot.domain !== 'taxi')
            return null;
        return checkAndAddSlot(new Ast.DialogState, slot);
    };
}

imprecise_answer = {
    'i need parking .' => new Slot('hotel-parking', new Ast.TristateValue('yes'));
    'i do not need parking .' => new Slot('hotel-parking', new Ast.TristateValue('no'));

    'i need wifi .' => new Slot('hotel-internet', new Ast.TristateValue('yes'));
    'i do not need wifi .' => new Slot('hotel-internet', new Ast.TristateValue('no'));
}

// the rest is domain-independent

noun_phrase = {
    // no slot
    base_noun_phrase;

    // one slot
    one_with_slot_phrase;
    one_which_slot_phrase;
    one_clean_slot_phrase;

    // two slots
    two_with_slot_phrase;
    two_which_slot_phrase;
    two_clean_slot_phrase;
}

generic_anything_noun_phrase = {
    'anything' => new Ast.DialogState;
    'something' => new Ast.DialogState;
}

generic_base_noun_phrase = {
    'listing' => new Ast.DialogState;
    'place' => new Ast.DialogState('hotel');
}

anything_phrase = {
    anything_with_slot_phrase;
    anything_which_slot_phrase;
    anything_clean_slot_phrase;
}

anything_with_slot_phrase = {
    ('any' | 'some') phrase:generic_base_noun_phrase ('with' | 'having') slot:npp_slot => checkAndAddSlot(phrase, slot);
    phrase:generic_anything_noun_phrase ('with' | 'having') slot:npp_slot => checkAndAddSlot(phrase, slot);
}

anything_which_slot_phrase = {
    ('any' | 'some') phrase:generic_base_noun_phrase ('which' | 'that') ('has' | 'have') slot:npp_slot => checkAndAddSlot(phrase, slot);
    ('any' | 'some') phrase:generic_base_noun_phrase ('which' | 'that') ('is' | 'are') slot:npi_slot => checkAndAddSlot(phrase, slot);
    ('any' | 'some') phrase:generic_base_noun_phrase ('which' | 'that') slot:avp_slot => checkAndAddSlot(phrase, slot);
    ('any' | 'some') phrase:generic_base_noun_phrase ('which' | 'that') ('is' | 'are') slot:apv_slot => checkAndAddSlot(phrase, slot);
    phrase:generic_anything_noun_phrase ('which' | 'that') ('has' | 'have') slot:npp_slot => checkAndAddSlot(phrase, slot);
    phrase:generic_anything_noun_phrase ('which' | 'that') ('is' | 'are') slot:npi_slot => checkAndAddSlot(phrase, slot);
    phrase:generic_anything_noun_phrase ('which' | 'that') slot:avp_slot => checkAndAddSlot(phrase, slot);
    phrase:generic_anything_noun_phrase ('which' | 'that') ('is' | 'are') slot:apv_slot => checkAndAddSlot(phrase, slot);
}

anything_clean_slot_phrase = {
    ('any' | 'some') slot:apv_slot phrase:generic_base_noun_phrase => checkAndAddSlot(phrase, slot);
    ('any' | 'some') phrase:generic_base_noun_phrase slot:pvp_slot => checkAndAddSlot(phrase, slot);
    ('any' | 'some') phrase:generic_base_noun_phrase slot:prep_slot => checkAndAddSlot(phrase, slot);
    phrase:generic_anything_noun_phrase slot:apv_slot => checkAndAddSlot(phrase, slot);
    phrase:generic_anything_noun_phrase slot:pvp_slot => checkAndAddSlot(phrase, slot);
    phrase:generic_anything_noun_phrase slot:prep_slot => checkAndAddSlot(phrase, slot);
}

one_with_slot_phrase = {
    phrase:base_noun_phrase ('with' | 'having') slot:npp_slot => checkAndAddSlot(phrase, slot);
}

one_which_slot_phrase = {
    phrase:base_noun_phrase ('which' | 'that') ('has' | 'have') slot:npp_slot => checkAndAddSlot(phrase, slot);
    phrase:base_noun_phrase ('which' | 'that') ('is' | 'are') slot:npi_slot => checkAndAddSlot(phrase, slot);
    phrase:base_noun_phrase ('which' | 'that') slot:avp_slot => checkAndAddSlot(phrase, slot);
    phrase:base_noun_phrase ('which' | 'that') ('is' | 'are') slot:apv_slot => checkAndAddSlot(phrase, slot);
}

one_clean_slot_phrase = {
    slot:apv_slot phrase:base_noun_phrase => checkAndAddSlot(phrase, slot);
    phrase:base_noun_phrase slot:pvp_slot => checkAndAddSlot(phrase, slot);
    phrase:base_noun_phrase slot:prep_slot => checkAndAddSlot(phrase, slot);
}

two_with_slot_phrase = {
    phrase:one_with_slot_phrase 'and' slot:npp_slot => checkAndAddSlot(phrase, slot);
    phrase:one_which_slot_phrase ('and having' | 'and with' | ', with') slot:npp_slot => checkAndAddSlot(phrase, slot);
    phrase:one_clean_slot_phrase ('with' | 'having') slot:npp_slot => checkAndAddSlot(phrase, slot);

    slot:apv_slot phrase:one_with_slot_phrase => checkAndAddSlot(phrase, slot);
}

two_which_slot_phrase = {
    phrase:one_with_slot_phrase ('which' | 'that') ('is' | 'are') slot:npi_slot => checkAndAddSlot(phrase, slot);
    phrase:one_with_slot_phrase ('which' | 'that') slot:avp_slot => checkAndAddSlot(phrase, slot);
    phrase:one_with_slot_phrase ('which' | 'that') ('is' | 'are') slot:apv_slot => checkAndAddSlot(phrase, slot);

    phrase:one_which_slot_phrase 'and' ('is' | 'are') slot:npi_slot => checkAndAddSlot(phrase, slot);
    phrase:one_which_slot_phrase 'and' slot:avp_slot => checkAndAddSlot(phrase, slot);
    phrase:one_which_slot_phrase 'and' ('is' | 'are') slot:apv_slot => checkAndAddSlot(phrase, slot);

    phrase:one_clean_slot_phrase ('which' | 'that') ('is' | 'are') slot:npi_slot => checkAndAddSlot(phrase, slot);
    phrase:one_clean_slot_phrase ('which' | 'that') slot:avp_slot => checkAndAddSlot(phrase, slot);
    phrase:one_clean_slot_phrase ('which' | 'that') ('is' | 'are') slot:apv_slot => checkAndAddSlot(phrase, slot);

    slot:apv_slot phrase:one_which_slot_phrase => checkAndAddSlot(phrase, slot);
}

two_clean_slot_phrase = {
    slot:apv_slot phrase:one_clean_slot_phrase => checkAndAddSlot(phrase, slot);
    phrase:one_clean_slot_phrase slot:pvp_slot => checkAndAddSlot(phrase, slot);
    phrase:one_clean_slot_phrase slot:prep_slot => checkAndAddSlot(phrase, slot);
}

three_with_slot_phrase = {
    phrase:two_with_slot_phrase 'and' slot:npp_slot => checkAndAddSlot(phrase, slot);
    phrase:two_which_slot_phrase ('and having' | 'and with' | ', with') slot:npp_slot => checkAndAddSlot(phrase, slot);
    phrase:two_clean_slot_phrase ('with' | 'having') slot:npp_slot => checkAndAddSlot(phrase, slot);

    slot:apv_slot phrase:two_with_slot_phrase => checkAndAddSlot(phrase, slot);
}

three_which_slot_phrase = {
    phrase:two_with_slot_phrase ('which' | 'that') ('is' | 'are') slot:npi_slot => checkAndAddSlot(phrase, slot);
    phrase:two_with_slot_phrase ('which' | 'that') slot:avp_slot => checkAndAddSlot(phrase, slot);
    phrase:two_with_slot_phrase ('which' | 'that') ('is' | 'are') slot:apv_slot => checkAndAddSlot(phrase, slot);

    phrase:two_which_slot_phrase 'and' ('is' | 'are') slot:npi_slot => checkAndAddSlot(phrase, slot);
    phrase:two_which_slot_phrase 'and' slot:avp_slot => checkAndAddSlot(phrase, slot);
    phrase:two_which_slot_phrase 'and' ('is' | 'are') slot:apv_slot => checkAndAddSlot(phrase, slot);

    phrase:two_clean_slot_phrase ('which' | 'that') ('is' | 'are') slot:npi_slot => checkAndAddSlot(phrase, slot);
    phrase:two_clean_slot_phrase ('which' | 'that') slot:avp_slot => checkAndAddSlot(phrase, slot);
    phrase:two_clean_slot_phrase ('which' | 'that') ('is' | 'are') slot:apv_slot => checkAndAddSlot(phrase, slot);

    slot:apv_slot phrase:two_which_slot_phrase => checkAndAddSlot(phrase, slot);
}

three_clean_slot_phrase = {
    slot:apv_slot phrase:two_clean_slot_phrase => checkAndAddSlot(phrase, slot);
    phrase:two_clean_slot_phrase slot:pvp_slot => checkAndAddSlot(phrase, slot);
    phrase:two_clean_slot_phrase slot:prep_slot => checkAndAddSlot(phrase, slot);
}

user_initial_request = {
    ( domains:preamble dialogue:noun_phrase
    | domains:generic_preamble ('a' | 'the') dialogue:noun_phrase
    ) => {
        if (domains.length > 0 && !domains.includes(dialogue.domain))
            return null;
        dialogue.intent = 'init_request';
        return dialogue;
    };
}

imprecise_answer = {
    constant:constant_Any ('please' | '') '.' => constant;

    domains:generic_preamble constant:constant_Any '.' => {
        if (domains.length > 0)
            return null;
        return constant;
    };
}

generic_answer = {
    domains:generic_preamble req:anything_phrase => {
        if (domains.length > 0)
            return null;
        for (let key of req) {
            if (!SEARCH_SLOTS.has(key))
                return null;
        }
        return req;
    };

    ( 'i do not care about' key:param_noun_phrase
    | 'i have no preference for' key:param_noun_phrase
    ) => {
        if (!SEARCH_SLOTS.has(key))
            return null;
        return checkAndAddSlot(new Ast.DialogState, new Slot(key, new Ast.TristateValue('dontcare')));
    };
}
