// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

// Action result templates: used after executing the action
// Either the action was successful, and we're done, or
// the action failed, and we give the user an option to try again

{
    const assert = require('assert');
    const ThingTalk = require('thingtalk');
    const Ast = ThingTalk.Ast;
    const Type = ThingTalk.Type;

    const C = require('../../ast_manip');
    const D = require('../../dialogue_acts');

    // import thingpedia info
    const _tpLoader = require('../../load-thingpedia');
}

for (let [pname, [typestr,]] of _tpLoader.params.in.values()) {
    thingpedia_action_past = {
        ( action:thingpedia_action_past 'it'
        | action:thingpedia_action_past 'this'
        | action:thingpedia_action_past 'that'
        ) [-> pname] => {
            const type = action.schema.getArgType(pname);
            if (!type || !type.isEntity)
                return null;
            return C.replacePlaceholderWithUndefined(action, pname, typestr);
        };
    }
}

complete_past_action_phrase = {
    action:thingpedia_action_past 'for you' if complete => {
        if (!(action instanceof Ast.Action.Invocation))
            return null;
        return action.invocation;
    };

    ( action:complete_past_action_phrase param:preposition_input_param
    | action:complete_past_action_phrase ('with' | 'having') param:npp_input_param
    ) => C.addInvocationInputParam(action, param);
}

generic_action_success_phrase = {
    'your request was completed successfully';
    'consider your request done !';
}

action_success_phrase = {
    ctx:ctx_completed_action_success generic_excitement_phrase result:thingpedia_result if complete [priority=5]
        => D.makeThingpediaActionSuccessPhrase(ctx, result);

    ctx:ctx_completed_action_success generic_excitement_phrase generic_action_success_phrase result:direct_result_info_phrase [priority=1]
        => D.makeThingpediaActionSuccessPhrase(ctx, result);

    ctx:ctx_completed_action_success 'i' action:complete_past_action_phrase '.'
        => D.makeCompleteActionSuccessPhrase(ctx, action, null);

    ctx:ctx_completed_action_success 'i' action:complete_past_action_phrase '.' info:direct_result_info_phrase [priority=2]
        => D.makeCompleteActionSuccessPhrase(ctx, action, info);
}

short_action_error_message = {
    ctx:ctx_completed_action_error msg:thingpedia_error_message if complete
        => D.checkThingpediaErrorMessage(ctx, msg);

    ctx:ctx_completed_action_error msg:constant_String => {
        const error = ctx.error;
        if (error.isString && error.equals(msg))
            return ctx;
        else
            return null;
    };
}

long_action_error_message = {
    ('i could not' | 'it was not possible to') action:action_description_phrase (':' | 'because') ctx:short_action_error_message
        => D.checkActionErrorMessage(ctx, action);
}

one_param_try_different_param_question = {
    ( 'would you like to try a different' p:input_param '?'
    | 'would you like a different' p:input_param '?'
    | 'shall i try another' p:input_param '?'
    | 'how about for another' p:input_param '?'
    ) => {
        return [p.name];
    };
}

two_param_try_different_param_question = {
    ( 'would you like to try a different' p1:input_param 'or' p2:input_param '?'
    | 'would you like a different' p1:input_param 'or' p2:input_param '?'
    | 'shall i try another' p1:input_param 'or' p2:input_param '?'
    | 'how about for another' p1:input_param 'or' p2:input_param '?'
    ) => {
        if (p1 === p2)
            return null;
        return [p1, p2];
    };
}

action_error_phrase = {
    sorry_preamble ctx:short_action_error_message '.' => D.makeActionErrorPhrase(ctx, []);

    ( sorry_preamble ctx:short_action_error_message '.' questions:one_param_try_different_param_question [weight=1, priority=0.5]
    | sorry_preamble ctx:short_action_error_message '.' questions:two_param_try_different_param_question [weight=0.5]
    | sorry_preamble ctx:long_action_error_message '.' questions:one_param_try_different_param_question [weight=1, priority=0.5]
    | sorry_preamble ctx:long_action_error_message '.' questions:two_param_try_different_param_question [weight=0.5]
    ) => D.makeActionErrorPhrase(ctx, questions);
}
