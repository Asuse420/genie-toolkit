// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

// Slot fill templates: the agent asks a question, and the user replies
//
// There are two types slot-fill templates:
// - for searches: the agent is trying to add a filter
// - for actions/queries w/ parameters: the agent is trying to add a parameter

{
    const assert = require('assert');
    const ThingTalk = require('thingtalk');
    const Ast = ThingTalk.Ast;
    const Type = ThingTalk.Type;

    const C = require('../../ast_manip');
    const D = require('../../dialogue_acts');

    // import thingpedia info
    const _tpLoader = require('../../load-thingpedia');
}

one_param_slot_fill_question = {
    !inference {
        ( p:thingpedia_slot_fill_question '?' [priority=0.1]
        | 'what' p:input_param prefer_question_phrase '?'
        ) => [p];
    }

    ?inference {
        'what' p:input_param prefer_question_phrase '?' => [p];

        // HACK: at inference time, we add the function ID to the thingpedia_slot_fill_question
        // value and check against the current context
        ctx:ctx_incomplete_action_after_search p:thingpedia_slot_fill_question '?' [priority=0.1] => {
            if (ctx.nextFunction !== p.functionName)
                return null;
            return [p.name];
        };
    }
}

two_param_slot_fill_question = {
    ( 'what' p1:input_param 'and' p2:input_param prefer_question_phrase '?'
    | p1:thingpedia_slot_fill_question 'and' 'what' p2:input_param prefer_question_phrase '?'
    | 'what' p1:input_param prefer_question_phrase 'and' p2:thingpedia_slot_fill_question '?'
    ) => {
        if (p1 === p2)
            return null;
        return [p1, p2];
    };
}

slot_fill_question = {
    one_param_slot_fill_question [priority=0.1];
    !inference two_param_slot_fill_question;
}

imprecise_slot_fill_answer_phrase = {
    ( slot:constant_Any
    | slot:npp_input_param
    | slot:apv_input_param
    | slot:pvp_input_param
    | slot:preposition_input_param
    ) => slot;
}

imprecise_slot_fill_coref_answer = {
    ( slot:coref_constant
    | slot:coref_npp_input_param
    | slot:coref_apv_input_param
    | slot:coref_pvp_input_param
    | slot:coref_preposition_input_param
    ) => slot;
}

imprecise_slot_fill_answer = {
    ans:imprecise_slot_fill_answer_phrase ('please' | '') '.' => ans;
    generic_preamble_for_answer ans:imprecise_slot_fill_answer_phrase '.' => ans;

    ans:imprecise_slot_fill_coref_answer ('please' | '') '.' => ans;
    generic_preamble_for_answer ans:imprecise_slot_fill_coref_answer '.' => ans;
}

precise_slot_fill_answer = {
    // complete answer (action or get command), like "I am looking to book it for ... at ..."
    generic_preamble_for_action action:action_continuation_command => action;

    // complete answer (query), like "I am looking for the weather in ..."
    ( generic_preamble_for_answer generic_article query:continuation_query
    | generic_verb_for_search generic_article query:continuation_query
    ) => query;
}
