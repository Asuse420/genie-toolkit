// -*- mode: typescript; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>

import { Ast, } from 'thingtalk';

// import the combinator library
import * as C from '../ast_manip';

// import thingpedia info
import _tpLoader from '../load-thingpedia';

{
function special(specialType : string) {
    return new Ast.Input.Bookkeeping(null, new Ast.BookkeepingIntent.Special(null, specialType));
}
}

import '../common.genie';
import './constants.genie';

bookkeeping : Ast.Bookkeeping = {
    'debug' => special('debug');

    ('cancel'
    | 'never mind'
    ) => special('nevermind');

    ('stop'
    | 'shut up'
    | 'shush'
    | 'quiet'
    | 'close'
    ) => special('stop');

    c:constant_Any => new Ast.Input.Bookkeeping(null, new Ast.BookkeepingIntent.Answer(null, c));
}

$root : Ast.Input = {
    bookkeeping;

    ( 'get' query:thingpedia_query
    | query:thingpedia_get_command
    ) if complete => C.makeProgram(new Ast.Statement.Command(null, query, [C.notifyAction()]));

    action:thingpedia_action if complete => C.makeProgram(new Ast.Statement.Command(null, null, [action]));

    'notify me' stream:thingpedia_stream if complete => C.makeProgram(new Ast.Statement.Rule(null, stream, [C.notifyAction()]));
}
