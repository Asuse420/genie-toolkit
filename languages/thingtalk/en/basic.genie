// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');

// import thingpedia info
const _tpLoader = require('../load-thingpedia');

function special(specialType) {
    return new Ast.Input.Bookkeeping(null, new Ast.BookkeepingIntent.Special(null, specialType));
}
}

import '../common';
import './constants';

bookkeeping = {
    'debug' => special('debug');

    ('cancel'
    | 'never mind'
    ) => special('nevermind');

    ('stop'
    | 'shut up'
    | 'shush'
    | 'quiet'
    | 'close'
    ) => special('stop');

    c:constant_Any => new Ast.Input.Bookkeeping(null, new Ast.BookkeepingIntent.Answer(null, c));
}

$root = {
    bookkeeping;

    ( 'get' query:thingpedia_query
    | query:thingpedia_get_command
    ) if complete => C.makeProgram(new Ast.Statement.Command(null, query, [C.notifyAction()]));

    action:thingpedia_action if complete => C.makeProgram(new Ast.Statement.Command(null, null, [action]));

    'notify me' stream:thingpedia_stream if complete => C.makeProgram(new Ast.Statement.Rule(null, stream, [C.notifyAction()]));
}
