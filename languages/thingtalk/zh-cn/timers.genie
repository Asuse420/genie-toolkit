// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2019 The Board of Trustees of the Leland Stanford Junior University
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>, Jian Li <jianli19@cs.stanford.edu>

import { Ast, } from 'thingtalk';

{
const TIMER_SCHEMA = new Ast.FunctionDef(null,
    'stream',
    null, // class
    'timer',
    [], // extends
    {
        is_list: false,
        is_monitorable: true
    },
    [], // args,
    {
        nl: {
            canonical: '每 固 定 周 期',
            confirmation: '每 ${interval}',
        },
        impl: {}
    }
);

const AT_TIMER_SCHEMA = new Ast.FunctionDef(null,
    'stream',
    null, // class
    'attimer',
    [], // extends
    {
        is_list: false,
        is_monitorable: true
    },
    [], // args,
    {
        nl: {
            canonical: '每 天 的 固 定 时 间',
            confirmation: '每 天 的 ${interval}',
        },
        impl: {}
    }
);
}

timer = {
    '每天 的' time:constant_Time => new Ast.Stream.AtTimer(null, [time], null, AT_TIMER_SCHEMA);
    '每天 在' time:constant_Time '的 时候' => new Ast.Stream.AtTimer(null, [time], null, AT_TIMER_SCHEMA);

    !turking {
        '每' interval:constant_Measure_ms => new Ast.Stream.Timer(null, Ast.Value.Date.now(), interval, null, TIMER_SCHEMA);
        ('每天' | '每 一天') => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'day'), null, TIMER_SCHEMA);
        '一天 一次' => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'day'), null, TIMER_SCHEMA);
        '每月' => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'mon'), null, TIMER_SCHEMA);
        '每 个 月' => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'mon'), null, TIMER_SCHEMA);
        '每月 一次' => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'mon'), null, TIMER_SCHEMA);
        '每周' => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'week'), null, TIMER_SCHEMA);
        '每周 一次' => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'week'), null, TIMER_SCHEMA);
        '每 小 时' => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'h'), null, TIMER_SCHEMA);
        '每 一 小 时' => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'h'), null, TIMER_SCHEMA);
        '每 小 时 一 次' => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'h'), null, TIMER_SCHEMA);
        '每 一 小 时 一 次' => new Ast.Stream.Timer(null, Ast.Value.Date.now(), new Ast.Value.Measure(1, 'h'), null, TIMER_SCHEMA);
    }
}
