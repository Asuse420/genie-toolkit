// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2019 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');

}

thingpedia_query_masculine = {}
thingpedia_query_feminine = {}

complete_table_masculine = {
    thingpedia_query_masculine if complete;
    !primonly table_join_replace_placeholder_masculine if complete;
}
complete_table_feminine = {
    thingpedia_query_feminine if complete;
    !primonly table_join_replace_placeholder_feminine if complete;
}
complete_get_command = {
    thingpedia_get_command if complete;
}
if_filtered_table = {
    complete_table_masculine;
    complete_table_feminine;
    one_if_filter_table;
    !turking two_if_filter_table;
}

one_if_filter_table = {
    !nofilter
    ( table:complete_table_masculine 'se' filter:atom_filter
    | table:complete_table_feminine 'se' filter:atom_filter
    ) => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
two_if_filter_table = {
    !nofilter table:one_if_filter_table 'e' filter:atom_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
with_filtered_table_masculine = {
    complete_table_masculine;
    one_with_filter_table_masculine;
    !turking two_with_filter_table_masculine;
}
with_filtered_table_feminine = {
    complete_table_feminine;
    one_with_filter_table_feminine;
    !turking two_with_filter_table_feminine;
}

one_with_filter_table_masculine = {
    !nofilter table:complete_table_masculine ('con' | 'che ha') filter:with_filter => {
        if (!table.schema.is_list)
            return null;
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
one_with_filter_table_feminine = {
    !nofilter table:complete_table_feminine ('con' | 'che ha') filter:with_filter => {
        if (!table.schema.is_list)
            return null;
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
two_with_filter_table_masculine = {
    !nofilter table:one_with_filter_table_masculine 'e' filter:with_filter => {
        if (!table.schema.is_list)
            return null;
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
two_with_filter_table_feminine = {
    !nofilter table:one_with_filter_table_feminine 'e' filter:with_filter => {
        if (!table.schema.is_list)
            return null;
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}


npi_filtered_table_masculine = {
    !nofilter table:complete_table_masculine ('che' | 'il quale') 'è il' filter:npi_filter_masculine => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
npi_filtered_table_feminine = {
    !nofilter table:complete_table_feminine ('che' | 'la quale') 'è la' filter:npi_filter_feminine => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}

pvp_filtered_table_masculine = {
    !nofilter table:complete_table_masculine filter:pvp_filter_masculine => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
pvp_filtered_table_feminine = {
    !nofilter table:complete_table_feminine filter:pvp_filter_feminine => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}

avp_filtered_table_masculine = {
    !nofilter table:complete_table_masculine ('che' | 'il quale') filter:avp_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
avp_filtered_table_feminine = {
    !nofilter table:complete_table_feminine ('che' | 'la quale') filter:avp_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}

npv_filtered_table_masculine = {
    !nofilter table:complete_table_masculine ('che' | 'il quale') 'è un' filter:npv_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
npv_filtered_table_feminine = {
    !nofilter table:complete_table_femine ('che' | 'la quale') 'è una' filter:npv_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}

apv_filtered_table_masculine = {
    !nofilter table:complete_table_masculine ('che' | 'il quale') 'è' filter:apv_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };

    !nofilter table:complete_table filter:apv_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
apv_filtered_table_feminine = {
    !nofilter table:complete_table ('che' | 'il quale') 'è' filter:apv_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };

    !nofilter table:complete_table filter:apv_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}

arg_min_max_table = {
    // FIXME split by which numeric type, like English does

    ?aggregation {
    ( t:complete_table_masculine ('con' | 'che ha') 'il' p:out_param_Numeric_masculine ('massimo' | 'più alto')
    | t:complete_table_masculine ('con' | 'che ha') 'il' ('massimo' | 'più alto') p:out_param_Numeric_masculine
    | t:complete_table_feminine ('con' | 'che ha') 'il' p:out_param_Numeric_masculine ('massimo' | 'più alto')
    | t:complete_table_feminine ('con' | 'che ha') 'il' ('massimo' | 'più alto') p:out_param_Numeric_masculine
    | t:complete_table_masculine ('con' | 'che ha') 'la' p:out_param_Numeric_feminine ('massima' | 'più alta')
    | t:complete_table_masculine ('con' | 'che ha') 'la' ('massima' | 'più alta') p:out_param_Numeric_feminine
    | t:complete_table_feminine ('con' | 'che ha') 'la' p:out_param_Numeric_feminine ('massimo' | 'più alto')
    | t:complete_table_feminine ('con' | 'che ha') 'la' ('massima' | 'più alta') p:out_param_Numeric_feminine
    ) =>
        C.makeArgMinMaxTable(t, p, null, 'desc');

    ( t:complete_table_masculine ('con' | 'che ha') 'il' ('minimo' | 'più basso') p:out_param_Numeric_masculine
    | t:complete_table_masculine ('con' | 'che ha') 'il' p:out_param_Numeric_masculine ('minimo' | 'più basso')
    | t:complete_table_feminine ('con' | 'che ha') 'il' ('minimo' | 'più basso') p:out_param_Numeric_masculine
    | t:complete_table_feminine ('con' | 'che ha') 'il' p:out_param_Numeric_masculine ('minimo' | 'più basso')
    | t:complete_table_masculine ('con' | 'che ha') 'la' ('minima' | 'più bassa') p:out_param_Numeric_feminine
    | t:complete_table_masculine ('con' | 'che ha') 'la' p:out_param_Numeric_feminine ('minima' | 'più bassa')
    | t:complete_table_feminine ('con' | 'che ha') 'la' ('minima' | 'più bassa') p:out_param_Numeric_feminine
    | t:complete_table_feminine ('con' | 'che ha') 'la' p:out_param_Numeric_feminine ('minima' | 'più bassa') =>
        C.makeArgMinMaxTable(t, p, null, 'asc');
    }
}

edge_stream = {
    !turking {
    ( ('quando' | 'se') p:projection_Any_masculine ('diventa' | 'diventa uguale a') x:constant_Any
    | ('quando' | 'se') p:projection_Any_feminine ('diventa' | 'diventa uguale a') x:constant_Any
    ) => {
         if (x.getType().isString)
             return C.makeEdgeFilterStream(p, '=~', x, $options);
         else
             return C.makeEdgeFilterStream(p, '==', x, $options);
    };
    }

    ( ('quando' | 'se') p:projection_Numeric_masculine ('diventa maggiore di' | 'diventa più grande di' | 'va sopra' | 'sale sopra' | 'aumenta oltre' | 'cresce oltre') x:constant_Numeric
    | ('quando' | 'se') p:projection_Numeric_feminine ('diventa maggiore di' | 'diventa più grande di' | 'va sopra' | 'sale sopra' | 'aumenta oltre' | 'cresce oltre') x:constant_Numeric
    ) => C.makeEdgeFilterStream(p, '>=', x, $options);

    ( ('quando' | 'se') p:projection_Numeric_masculine ('diventa minore di' | 'diventa più piccolo di' |  'va sotto' | 'scende sotto') x:constant_Numeric
    | ('quando' | 'se') p:projection_Numeric_feminine ('diventa minore di' | 'diventa più piccola di' |  'va sotto' | 'scende sotto') x:constant_Numeric
    ) => C.makeEdgeFilterStream(p, '<=', x, $options);
}

stream = {
    thingpedia_stream if complete;
    ( ('quando' | 'se' | 'in caso' | 'ogniqualvolta' | 'ogni volta') table:with_filtered_table_masculine ('cambiano' | 'si aggiornano')
    | ('quando' | 'se' | 'in caso' | 'ogniqualvolta' | 'ogni volta') table:with_filtered_table_feminine ('cambiano' | 'si aggiornano')
    ) => C.tableToStream(table, null);

    !turking {
        ( ('in caso di cambiamenti' | 'in caso di aggiornamenti' | 'se qualcosa cambia' | 'quando qualcosa cambia' | 'se ci sono cambiamenti' | 'se ci sono aggiornamenti') 'in' table:with_filtered_table_masculine
        | ('in caso di cambiamenti' | 'in caso di aggiornamenti' | 'se qualcosa cambia' | 'quando qualcosa cambia' | 'se ci sono cambiamenti' | 'se ci sono aggiornamenti') 'in' table:with_filtered_table_feminine
        ) => C.tableToStream(table, null);

        ( ('quando' | 'se' | 'in caso' | 'ogniqualvolta' | 'ogni volta') proj:projection_Any_masculine 'cambia'
        | ('quando' | 'se' | 'in caso' | 'ogniqualvolta' | 'ogni volta') proj:projection_Any_feminine 'cambia' ) => {
            if (proj.args[0] === 'picture_url')
                return null;
            if (proj.table.isAggregation)
                return null;
            let outParams = Object.keys(proj.table.schema.out);
            let stream;
            if (outParams.length === 1 && $options.flags.turking)
                return null;
            if (outParams.length === 1)
                stream = C.tableToStream(proj.table, null);
            else
                stream = C.tableToStream(proj.table, proj.args);
            return stream;
        };
    }
    !nofilter {
        ( ('quando' | 'se' | 'in caso' | 'ogniqualvolta' | 'ogni volta') table:complete_table_masculine 'cambia e' filter:edge_filter
        | ('quando' | 'se' | 'in caso' | 'ogniqualvolta' | 'ogni volta') table:complete_table_feminine 'cambia e' filter:edge_filter
        ) => {
            if (!table.schema.is_monitorable || !C.checkFilter(table, filter) || table.schema.is_list)
                return null;
            table = C.addFilter(table, filter, $options);
            if (!table)
                return null;
            return C.tableToStream(table, null);
        };
        ( ('quando' | 'se' | 'in caso' | 'ogniqualvolta' | 'ogni volta') table:complete_table_masculine 'cambia e' filter:atom_filter
        | ('quando' | 'se' | 'in caso' | 'ogniqualvolta' | 'ogni volta') table:complete_table_feminine 'cambia e' filter:atom_filter
        ) => {
            if (!table.schema.is_monitorable || !C.checkFilter(table, filter))
                return null;
            if (table.schema.is_list)
                return null;
            table = C.addFilter(table, filter, $options);
            if (!table)
                return null;
            return C.tableToStream(table, null);
        };

        !turking {
            ( ('quando' | 'se' | 'in caso' | 'ogniqualvolta' | 'ogni volta') table:complete_table_masculine 'cambiano e' filter:atom_filter
            | ('quando' | 'se' | 'in caso' | 'ogniqualvolta' | 'ogni volta') table:complete_table_feminine 'cambiano e' filter:atom_filter
            ) => {
                if (!table.schema.is_monitorable || !C.checkFilter(table, filter))
                    return null;
                if (!table.schema.is_list)
                    return null;
                table = C.addFilter(table, filter, $options);
                if (!table)
                    return null;
                return C.tableToStream(table, null);
            };
        }

        edge_stream;
    }
    ?timer timer;
}
