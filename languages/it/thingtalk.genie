// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2018 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');

}

import './constants';
import './timers';
import './filters';
import './parameters';
import './aggregation';
import './who_questions';

if ($options.flags.bookkeeping)
    import './bookkeeping';
import './stream_tables';

// FIXME add more...

forward_get_do_command = {
    ('ottieni' | 'recupera') table:if_filtered_table ('e poi' | 'poi') action:thingpedia_action if !complete => new Ast.Statement.Command(table, [action]);
    table:complete_get_command ('e poi' | 'poi' | ',') action:thingpedia_action if !complete => new Ast.Statement.Command(table, [action]);
    ( 'dopo' ('che ottieni' | 'che recuperi' | 'aver recuperato') table:with_filtered_table_masculine
    | 'dopo' ('che ottieni' | 'che recuperi' | 'aver recuperato') table:with_filtered_table_feminine
    ) action:thingpedia_action if !complete => new Ast.Statement.Command(table, [action]);

    // use X to do Y would be good sometimes but it gets confusing quickly
    //['${(get|use)} ${with_filtered_table} to ${thingpedia_action}', checkIfIncomplete(simpleCombine((table, action) => new Ast.Statement.Command(table, [action])))]
}

complete_forward_get_do_command = {
    forward_get_do_command if complete;

    !turking {
        ( command:complete_forward_get_do_command ('con lo stesso' | 'con identico' | 'usando lo stesso') joinArg:out_param_Any_masculine
        | command:complete_forward_get_do_command ('con la stessa' | 'con identica' | 'usando la stessa') joinArg:out_param_Any_feminine
        ) => {
            let actiontype = command.actions[0].schema.inReq[joinArg.name];
            if (!actiontype)
                return null;
            if (command.actions[0].in_params.some((p) => p.name === joinArg.name))
                return null;
            let commandtype = command.table.schema.out[joinArg.name];
            if (!commandtype || !Type.isAssignable(commandtype, actiontype))
                return null;

            let clone = command.actions[0].clone();
            clone.invocation.in_params.push(new Ast.InputParam(joinArg.name, joinArg));
            return new Ast.Statement.Command(command.table, [clone]);
        };
    }
}

backward_get_do_command = {
    ( action:thingpedia_action 'dopo' ('aver recuperato' | 'aver recuperato' | 'che recuperi') table:with_filtered_table if !complete
    | action:thingpedia_action 'dopo' ('aver recuperato' | 'aver recuperato' | 'che recuperi') table:with_filtered_table if !complete
    ) => new Ast.Statement.Command(table, [action]);
}

complete_get_do_command = {
    complete_forward_get_do_command;
    !turking backward_get_do_command if complete;
    action_replace_param_with_table if complete;
}

forward_when_do_rule = {
    // pp from when to do (optional)
    stream:stream ('' | 'allora') action:thingpedia_action '.' => new Ast.Statement.Rule(stream, [action]);

    // pp from when to do (required)
    // this is because "monitor X and then Y" makes sense only if X flows into Y
    ( ('osserva' | 'controlla') table:with_filtered_table_masculine ('e poi' | 'poi') action:thingpedia_action '.'
    | ('osserva' | 'controlla') table:with_filtered_table_masculine ('e poi' | 'poi') action:thingpedia_action '.'
    ) if !complete => {
        if (!table.schema.is_monitorable)
            return null;
        return new Ast.Statement.Rule(new Ast.Stream.Monitor(table, null, table.schema), [action]);
    };
    !turking
    ( ('osserva' | 'controlla') proj:projection_Any_masculine ('e poi' | 'poi') action:thingpedia_action '.'
    | ('osserva' | 'controlla') proj:projection_Any_feminine ('e poi' | 'poi') action:thingpedia_action '.'
    ) if !complete => {
        if (!proj.schema.is_monitorable)
            return null;
        if (proj.table.isAggregation)
            return null;
        if (proj.args[0] === 'picture_url')
            return null;
        let outParams = Object.keys(proj.table.schema.out);
        let stream;
        if (outParams.length === 1 && $options.flags.turking)
            return null;
        if (outParams.length === 1)
            stream = C.tableToStream(proj.table, null);
        else
            stream = C.tableToStream(proj.table, proj.args);
        if (!stream)
            return null;
        return new Ast.Statement.Rule(stream, [action]);
    };

    ( 'controlla se ci sono nuovi' table:complete_table_masculine ('e poi' | 'poi') action:thingpedia_action '.'
    | 'controlla se ci sono nuove' table:complete_table_feminine ('e poi' | 'poi') action:thingpedia_action '.'
    ) if !complete => {
        if (!table.schema.is_monitorable || !table.schema.is_list)
            return null;
        return new Ast.Statement.Rule(new Ast.Stream.Monitor(table, null, table.schema), [action]);
    };
}

complete_forward_when_do_rule = {
    forward_when_do_rule if complete;

    !turking
    ( rule:complete_forward_when_do_rule ('con lo stesso' | 'con identico' | 'usando lo stesso') joinArg:out_param_Any_masculine
    | rule:complete_forward_when_do_rule ('con la stessa' | 'con identica' | 'usando la stessa') joinArg:out_param_Any_feminine
    ) => {
        //if (rule.actions.length !== 1 || rule.actions[0].selector.isBuiltin)
        //    throw new TypeError('???');
        let actiontype = rule.actions[0].schema.inReq[joinArg.name];
        if (!actiontype)
            return null;
        if (rule.actions[0].in_params.some((p) => p.name === joinArg.name))
            return null;

        let commandtype = rule.stream.schema.out[joinArg.name];
        if (!commandtype || !Type.isAssignable(commandtype, actiontype))
            return null;
        if (joinArg.isEvent && (rule.stream.isTimer || rule.stream.isAtTimer))
            return null;

        let clone = rule.actions[0].clone();
        clone.invocation.in_params.push(new Ast.InputParam(joinArg.name, joinArg));
        return new Ast.Statement.Rule(rule.stream, [clone]);
    };
}

backward_when_do_rule = {
    action:thingpedia_action stream:stream ('' | '.') => new Ast.Statement.Rule(stream, [action]);

    ( action:thingpedia_action 'dopo aver controllato se ci sono nuovi' table:complete_table_masculine '.'
    | action:thingpedia_action 'dopo aver controllato se ci sono nuove' table:complete_table_feminine '.'
    ) if !complete => {
        if (!table.schema.is_monitorable || !table.schema.is_list)
            return null;
        return new Ast.Statement.Rule(new Ast.Stream.Monitor(table, null, table.schema), [action]);
    };
}
complete_when_do_rule = {
    complete_forward_when_do_rule;
    backward_when_do_rule if complete;

    !turking stream:action_replace_param_with_stream ('automaticamente' | 'continuamente') if complete => stream;
    ?turking stream:action_replace_param_with_stream 'automaticamente' if complete => stream;
}

when_get_stream = {
    // pp from when to get (optional)
    // NOTE: the schema is not quite right but it's ok because the stream is complete
    // and the table is what we care about
    stream:stream table:thingpedia_get_command => C.checkNotSelfJoinStream(new Ast.Stream.Join(stream, table, [], table.schema));
    ( stream:stream ('ottieni' | 'mostrami' | 'dammi' | 'dimmi' | 'recupera') table:thingpedia_query_masculine
    | stream:stream ('ottieni' | 'mostrami' | 'dammi' | 'dimmi' | 'recupera') table:thingpedia_query_feminine
    ) => C.checkNotSelfJoinStream(new Ast.Stream.Join(stream, table, [], table.schema));
    ( stream:stream ('ottieni' | 'mostrami' | 'dammi' | 'dimmi' | 'recupera') ('' | 'qual è') proj:projection_Any_masculine
    | stream:stream ('ottieni' | 'mostrami' | 'dammi' | 'dimmi' | 'recupera') ('' | 'qual è') proj:projection_Any_masculine
    ) => {
        if (proj.isProjection) {
            if (!$options.flags.projection)
                return null;
            if (proj.args[0] === 'picture_url')
                return null;
            let outParams = Object.keys(proj.table.schema.out);
            if (outParams.length === 1)
                return null;
        }
        return C.checkNotSelfJoinStream(new Ast.Stream.Join(stream, proj, [], proj.schema));
    };

    table:thingpedia_get_command stream:stream => C.checkNotSelfJoinStream(new Ast.Stream.Join(stream, table, [], table.schema));
    ('ottieni' | 'mostrami' | 'dammi' | 'dimmi' | 'recupera') table:thingpedia_query stream:stream => C.checkNotSelfJoinStream(new Ast.Stream.Join(stream, table, [], table.schema));
    ('ottieni' | 'mostrami' | 'dammi' | 'dimmi' | 'recupera') proj:projection_Any stream:stream => {
        if (proj.isProjection) {
            if (!$options.flags.projection)
                return null;
            if (proj.args[0] === 'picture_url')
                return null;
            let outParams = Object.keys(proj.table.schema.out);
            if (outParams.length === 1)
                return null;
        }
        return C.checkNotSelfJoinStream(new Ast.Stream.Join(stream, proj, [], proj.schema));
    };
}
complete_when_get_stream = {
    when_get_stream if complete;
}

when_get_do_rule = {
    stream:stream command:complete_get_do_command => C.combineStreamCommand(stream, command);
    command:complete_get_do_command stream:stream => C.combineStreamCommand(stream, command);
}

timer_rule = {
    // timer => get => notify
    (
          timer:timer table:complete_get_command
        | timer:timer 'recupera' table:complete_table
        | 'recupera' table:complete_table timer:timer
        | timer:timer ('ottieni' | 'mostrami' | 'dammi' | 'dimmi' | 'recupera') table:complete_table
        | ('ottieni' | 'mostrami' | 'dammi' | 'dimmi' | 'recupera') table:complete_table timer:timer
    ) => new Ast.Statement.Rule(new Ast.Stream.Join(timer, table, [], table.schema), [C.notifyAction()]);
    // timer => do
    (
          timer:timer action:thingpedia_action
        | action:thingpedia_action timer:timer
        | 'i want to' action:thingpedia_action timer:timer
    ) if complete => new Ast.Statement.Rule(timer, [action]);
    // timer => get => do
    !primonly (
          timer:timer command:complete_get_do_command
        | command:complete_get_do_command timer:timer
    ) => new Ast.Statement.Rule(new Ast.Stream.Join(timer, command.table, [], command.table.schema), command.actions);
}

if ($options.standardSchemas.say) {
     $root = {
        (
             'notificami' stream:stream
           | ('avvisami' | 'informami' | 'fammi sapere' | 'mi arriva una notifica' | 'mi notifichi' | 'mi avvisi' | 'mandami un messaggio' | 'mandami un avviso' | 'mandami una notifica' | 'mostrami un popup' | 'mi arriva un messaggio' | 'mi arriva una notifica') stream:stream
        ) => C.makeProgram(new Ast.Statement.Rule(stream, [stream.isTimer || stream.isAtTimer ? C.builtinSayAction($options) : C.notifyAction()]));
        ('mandami un messaggio' | 'mandami un avviso' | 'mandami una notifica') stream:timer => C.makeProgram(new Ast.Statement.Rule(stream, [C.builtinSayAction($options)]));
        ('mandami un messaggio' | 'mandami un avviso' | 'mandami una notifica') stream:timer ('dicendo' | 'che abbia testo' | 'con il testo') constant:constant_String => C.makeProgram(new Ast.Statement.Rule(stream, [C.builtinSayAction($options, constant)]));
        !turking {
            (
                  'avvisami' stream:stream ('dicendo' | 'con il testo') constant:constant_String
                | 'mostrami' ('la notifica' | 'il messaggio' | 'il popup che dice' | 'un popup che contiene') constant:constant_String stream:stream
             ) => C.makeProgram(new Ast.Statement.Rule(stream, [C.builtinSayAction($options, constant)]));
        }

        // now => say
        (
            // di without apostrophe is incorrect, but people get that wrong...
              ('di' | "di'") c:constant_String
            | 'mandami un messaggio che dice' c:constant_String
            | 'mostrami un popup che dice' c:constant_String
        ) => C.makeProgram(new Ast.Statement.Command(null, [C.builtinSayAction($options, c)]));
    }
}

$root = {
    !primonly thingpedia_program if complete;

    // when => notify
    ( ('osserva' | 'controlla') table:with_filtered_table_masculine
    | ('osserva' | 'controlla') table:with_filtered_table_feminine
    )  => {
        if (!table.schema.is_monitorable)
            return null;
        return C.makeProgram(new Ast.Statement.Rule(new Ast.Stream.Monitor(table, null, table.schema), [C.notifyAction()]));
    };
    !turking
    ( ('osserva' | 'controlla') proj:projection_Any_masculine
    | ('osserva' | 'controlla') proj:projection_Any_feminine
    ) => {
        if (!proj.schema.is_monitorable)
            return null;
        if (proj.table.isAggregation)
            return null;
        let stream = C.tableToStream(proj.table, proj.args);
        if (!stream)
            return null;
        let outParams = Object.keys(proj.table.schema.out);
        if (outParams.length === 1 && $options.flags.turking)
            return null;
        return C.makeProgram(new Ast.Statement.Rule(stream, [C.notifyAction()]));
    };
    ('fammi sapere' | 'notificami') ('di' | 'riguardo a') ('cambiamenti' | 'aggiornamenti') 'in' table:if_filtered_table => {
        let stream = C.tableToStream(table, null);
        if (!stream)
            return null;
        return C.makeProgram(new Ast.Statement.Rule(stream, [C.notifyAction()]));
    };
    !nofilter
    ( ('osserva' | 'controlla') table:complete_table_masculine 'e' ('avvisami' | 'notificami' | 'informami') ('se' | 'quando') filter:atom_filter
    | ('osserva' | 'controlla') table:complete_table_feminine 'e' ('avvisami' | 'notificami' | 'informami') ('se' | 'quando') filter:atom_filter
    ) => {
        if (C.hasGetPredicate(filter))
            return null;
        if (table.schema.is_list || !C.checkFilter(table, filter))
            return null;
        table = C.addFilter(table, filter, $options);
        if (!table)
            return null;
        let stream = C.tableToStream(table, null);
        if (!stream)
            return null;
        return C.makeProgram(new Ast.Statement.Rule(stream, [C.notifyAction()]));
    };
    !turking
    ( ('fammi sapere' | 'notificami') ('di' | 'riguardo a') ('cambiamenti' | 'aggiornamenti') 'in' proj:projection_Any_masculine
    | ('fammi sapere' | 'notificami') ('di' | 'riguardo a') ('cambiamenti' | 'aggiornamenti') 'in' proj:projection_Any_feminine
    ) => {
        if (!proj.schema.is_monitorable)
            return null;
        if (proj.table.isAggregation)
            return null;
        let outParams = Object.keys(proj.table.schema.out);
        if (outParams.length === 1 && $options.flags.turking)
            return null;
        // note that we intentionally don't use tableToStream here, because we don't want to introduce edge filters
        return C.makeProgram(new Ast.Statement.Rule(new Ast.Stream.Monitor(proj.table, null, proj.table.schema), [C.notifyAction()]));
    };
    !nofilter {
        ?remote_commands
        ( ('avvisami' | 'informami' | 'notificami' | 'fammi sapere') ('se' | 'quando') filter:atom_filter 'in' table:complete_table_masculine ('per' | 'di') principal:constant_Entity__tt__username
        | ('avvisami' | 'informami' | 'notificami' | 'fammi sapere') ('se' | 'quando') filter:atom_filter 'in' table:complete_table_feminine ('per' | 'di') principal:constant_Entity__tt__username
        ) => {
            if (C.hasGetPredicate(filter))
                return null;
            if (!table.schema.is_monitorable || !C.checkFilter(table, filter))
                return null;
            if ($options.flags.turking && table.schema.is_list)
                return null;
            table = C.addFilter(table, filter, $options);
            if (!table)
                return null;
            let stream = C.tableToStream(table, null);
            if (!stream)
                return null;
            return C.makeProgram(new Ast.Statement.Rule(stream, [C.notifyAction()]), principal);
        };

        ?remote_commands
        ( ('se' | 'quando') filter:atom_filter 'in' table:complete_table_masculine ('per' | 'di') principal:constant_Entity__tt__username 'allora' ('avvisami' | 'informami' | 'notificami' | 'fammi sapere')
        | ('se' | 'quando') filter:atom_filter 'in' table:complete_table_feminine ('per' | 'di') principal:constant_Entity__tt__username 'allora' ('avvisami' | 'informami' | 'notificami' | 'fammi sapere')
        ) => {
        if (C.hasGetPredicate(filter))
            return null;
        if (!table.schema.is_monitorable || !C.checkFilter(table, filter))
            return null;
        if ($options.flags.turking && table.schema.is_list)
            return null;
        table = C.addFilter(table, filter, $options);
        if (!table)
            return null;
        let stream = C.tableToStream(table, null);
        if (!stream)
            return null;
        return C.makeProgram(new Ast.Statement.Rule(stream, [C.notifyAction()]), principal);
    };
    !nofilter
    ( ('avvisami' | 'informami' | 'notificami' | 'fammi sapere') ('se' | 'quando') filter:atom_filter 'in' table:complete_table_masculine
    | ('avvisami' | 'informami' | 'notificami' | 'fammi sapere') ('se' | 'quando') filter:atom_filter 'in' table:complete_table_feminine
    ) => {
        if (C.hasGetPredicate(filter))
            return null;
        if (!table.schema.is_monitorable || !C.checkFilter(table, filter))
            return null;
        if ($options.flags.turking && table.schema.is_list)
            return null;
        table = C.addFilter(table, filter, $options);
        if (!table)
            return null;
        let stream = C.tableToStream(table, null);
        if (!stream)
            return null;
        return C.makeProgram(new Ast.Statement.Rule(stream, [C.notifyAction()]));
    };
    !nofilter
    ( ('avvisami' | 'informami' | 'notificami' | 'fammi sapere') ('se' | 'quando') filter:edge_filter 'in' table:complete_table_masculine
    | ('avvisami' | 'informami' | 'notificami' | 'fammi sapere') ('se' | 'quando') filter:edge_filter 'in' table:complete_table_feminine
    ) => {
        if (C.hasGetPredicate(filter))
            return null;
        if (!table.schema.is_monitorable || table.schema.is_list || !C.checkFilter(table, filter))
            return null;
        table = C.addFilter(table, filter, $options);
        if (!table)
            return null;
        let stream = C.tableToStream(table, null);
        if (!stream)
            return null;
        return C.makeProgram(new Ast.Statement.Rule(stream, [C.notifyAction()]));
    };

    // now => get => notify
    (
          table:complete_get_command
        | 'recupera' table:complete_table_masculine
        | 'ottieni' table:complete_table_masculine
        | 'recupera' table:complete_table_feminine
        | 'ottieni' table:complete_table_feminine
        | ('mostrami' | 'dammi' | 'dimmi') table:complete_table_masculine
        | ('mostrami' | 'dammi' | 'dimmi') table:complete_table_feminine
        | ('cerca' | 'trova' | 'voglio' | 'ho bisogno di') table:with_filtered_table_masculine
        | ('cerca' | 'trova' | 'voglio' | 'ho bisogno di') table:with_filtered_table_feminine
        | 'quali sono' table:with_filtered_table ('' | '?')
        | 'quali sono' table:pvp_filtered_table ('' | '?')
        | 'quali sono' table:avp_filtered_table ('' | '?')
        | 'quali sono' table:npi_filtered_table ('' | '?')
        | 'quali sono' table:npv_filtered_table ('' | '?')
        | 'quali sono' table:apv_filtered_table ('' | '?')
    ) => C.makeProgram(new Ast.Statement.Command(table, [C.notifyAction()]));
    ('elenca' | 'lista') table:with_filtered_table => {
        if (!table.schema.is_list)
            return null;
        return C.makeProgram(new Ast.Statement.Command(table, [C.notifyAction()]));
    };

    // now => get => notify (argmin, argmax)
    (
          ('cerca' | 'trova' | 'recupera' | 'ottieni' | 'mostrami' | 'dammi' | 'dimmi') table:arg_min_max_table
        | 'quali sono' table:arg_min_max_table ('' | '?')
    ) => C.makeProgram(new Ast.Statement.Command(table, [C.notifyAction()]));

    // now => get => notify (who questions)
    !turking (
          ('chi' | 'quale persona' | 'quale individuo') 'ha' table:who_npp_filtered_table ('' | '?')
        | ('chi è la persona' | 'chi è quello' | "chi è l' individuo") ('con' | 'che ha') table:who_npp_filtered_table ('' | '?')
        | table:whose_npp_filtered_table 'di chi' ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è' table:who_pvp_filtered_table ('' | '?')
        | ('chi è la persona' | 'chi è quello' | "chi è l'individuo") table:who_pvp_filtered_table ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo' | 'che è la persona che' | 'chi è quello che' | "chi è l' individuo che") table:who_avp_filtered_table ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è il' table:who_npi_filtered_table_masculine ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è la' table:who_npi_filtered_table_feminine ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è un' table:who_npv_filtered_table_masculine ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è una' table:who_npv_filtered_table_feminine ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è' table:who_apv_filtered_table ('' | '?')
        | 'quale' table:who_npi_generic_filtered_table ('' | '?')
        | 'quale' table:who_npv_generic_filtered_table ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è un' table:who_apv_npv_filtered_table_masculine ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è una' table:who_apv_npv_filtered_table_feminine ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è un' table:who_apv_npi_filtered_table_masculine ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è una' table:who_apv_npi_filtered_table_feminine ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'ha' table:who_npp_npp_filtered_table ('' | '?')
        | ('chi è la persona' | 'chi è quello' | "chi è l' individuo") ('con' | 'che ha') table:who_npp_npp_filtered_table ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è' table:who_npi_npi_filtered_table ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') 'è' table:who_npi_pvp_filtered_table ('' | '?')
        | ('chi' | 'quale persona' | 'quale individuo') table:who_generic_npp_filtered_table ('' | '?')
    ) => C.makeProgram(new Ast.Statement.Command(table, [C.notifyAction()]));
    ?turking (
          'chi ha' table:who_npp_filtered_table ('' | '?')
        | ('chi è quello' | 'qual è la persona') 'che ha' table:who_npp_filtered_table ('' | '?')
        | table:whose_npp_filtered_table 'di chi' ('' | '?')
        | 'chi è' table:who_pvp_filtered_table ('' | '?')
        | 'chi' table:who_avp_filtered_table ('' | '?')
        | 'chi è il' table:who_npi_filtered_table_masculine ('' | '?')
        | 'chi è la' table:who_npi_filtered_table_feminine ('' | '?')
        | 'chi è un' table:who_npv_filtered_table_masculine ('' | '?')
        | 'chi è una' table:who_npv_filtered_table_feminine ('' | '?')
        | 'chi è' table:who_apv_filtered_table ('' | '?')
        | 'quale' table:who_npi_generic_filtered_table ('' | '?')
        | 'quale' table:who_npv_generic_filtered_table ('' | '?')
        | 'chi è un' table:who_apv_npv_filtered_table_masculine ('' | '?')
        | 'chi è una' table:who_apv_npv_filtered_table_feminine ('' | '?')
        | 'chi è un' table:who_apv_npi_filtered_table_masculine ('' | '?')
        | 'chi è una' table:who_apv_npi_filtered_table_feminine ('' | '?')
        | 'chi ha' table:who_npp_npp_filtered_table ('' | '?')
        | 'chi è' table:who_npi_npi_filtered_table ('' | '?')
        | 'chi è' table:who_npi_pvp_filtered_table ('' | '?')
        | 'chi' table:who_generic_npp_filtered_table ('' | '?')
    ) => C.makeProgram(new Ast.Statement.Command(table, [C.notifyAction()]));

    // now => get => say(...)
    // don't merge these, the output sizes are too small
    (
          ('recupera' | 'ottieni' | 'mostrami' | 'dammi' | 'dimmi') proj:projection_Any
        | 'qual è' proj:projection_Any ('' | '?')
        | ('mostrami' | 'dammi' | 'dimmi') 'qual è' proj:projection_Any
        | 'chi è' proj:projection_Entity__tt__username ('' | '?')
        | 'chi è' proj:projection_Entity__tt__email_address ('' | '?')
    ) => C.sayProjectionProgram($options, proj);
    !turking proj:projection_Any => C.sayProjectionProgram($options, proj);

    // now => do
    (
          action:thingpedia_action
        | action:thingpedia_action
        | ('ho bisogno' | 'mi serve') 'che tu' action:thingpedia_action
        | 'voglio che tu' action:thingpedia_action
        | 'vorrei che tu' action:thingpedia_action
    ) if complete => C.makeProgram(new Ast.Statement.Command(null, [action]));

    // now => get => do
    !primonly command:complete_get_do_command => C.makeProgram(command);

    // when join get => notify/say(...)
    !primonly stream:complete_when_get_stream => {
        assert(stream.isJoin, `unexpected stream in when_get, found ${stream}`);
        if (stream.table.isProjection)
            return C.makeProgram(new Ast.Statement.Rule(new Ast.Stream.Join(stream.stream, stream.table.table, stream.in_params, stream.schema), [C.notifyAction()]));
        else
            return C.makeProgram(new Ast.Statement.Rule(stream, [C.notifyAction()]));
    };

    ?timer rule:timer_rule => C.makeProgram(rule);

    // when => do
    !primonly rule:complete_when_do_rule => C.makeProgram(rule);

    // when => get => do
    ?triple_commands rule:when_get_do_rule => C.makeProgram(rule);

    // setup commands
    ?remote_commands {
        (
              ("di' a" | "chiedi a" | "ordina") principal:constant_Entity__tt__username 'che' action:thingpedia_action
            | ("di' a" | "informa") principal:constant_Entity__tt__username 'che' ('ho bisogno' | 'mi serve') 'che' action:thingpedia_action
        ) if complete => C.makeProgram(new Ast.Statement.Command(null, [action]), principal);
        (
              ('tell' | 'command' | 'order' | 'request' | 'ask') principal:constant_Entity__tt__username 'to get' table:complete_table 'and send it to me'
            | ('request' | 'ask') principal:constant_Entity__tt__username 'to get' table:complete_table
            | ('show me' | 'get') table:complete_table 'from' principal:constant_Entity__tt__username
            | ('show me' | 'get' | 'what is') principal:constant_Entity__tt__username '\'s' table:complete_table
            | ('tell' | 'command' | 'order' | 'request' | 'ask') principal:constant_Entity__tt__username 'to send me' table:complete_table
        ) => C.makeProgram(new Ast.Statement.Command(table, [C.notifyAction('return')]), principal);
        ('tell' | 'command' | 'order' | 'request' | 'ask') principal:constant_Entity__tt__username 'to' ('let me know' | 'inform me' | 'notify me' | 'alert me') stream:stream => C.makeProgram(new Ast.Statement.Rule(stream, [C.notifyAction('return')]), principal);

        ?extended_timers {
            (
                ('tell' | 'command' | 'order' | 'request' | 'ask') principal:constant_Entity__tt__username 'to' action:thingpedia_action stream:timer
                | ('tell' | 'command' | 'order' | 'request' | 'inform') principal:constant_Entity__tt__username 'that' ('he needs' | 'she needs' | 'i need him' | 'i need her') 'to' action:thingpedia_action stream:timer
            ) if complete => C.makeProgram(new Ast.Statement.Rule(stream, [action]), principal);
        }
    }

    // policies
    ?policies {
        ('anyone' | 'anybody' | 'everyone' | 'everybody') ('can' | 'is allowed to' | 'is permitted to' | 'has permission to' | 'has my permission to') action:thingpedia_action if complete => C.makePolicy(null, null, action);
        ('anyone' | 'anybody' | 'everyone' | 'everybody') ('can' | 'is allowed to' | 'is permitted to' | 'has permission to' | 'has my permission to') action:thingpedia_action 'if' filter:get_predicate_filter if complete => {
            if (!filter.isExternal)
                return null;
            let policy = C.makePolicy(null, null, action);
            if (!policy)
                return null;
            policy.action.filter = Ast.BooleanExpression.And([policy.action.filter, filter]);
            return policy;
        };
        ('anyone' | 'anybody' | 'everyone' | 'everybody') ('can' | 'is allowed to' | 'is permitted to' | 'has permission to' | 'has my permission to') ('get' | 'see' | 'access' | 'monitor' | 'read') table:if_filtered_table => C.makePolicy(null, table, null);
        source:constant_Entity__tt__username ('can' | 'is allowed to' | 'is permitted to' | 'has permission to' | 'has my permission to') action:thingpedia_action if complete => C.makePolicy(source, null, action);
        source:constant_Entity__tt__username ('can' | 'is allowed to' | 'is permitted to' | 'has permission to' | 'has my permission to') action:thingpedia_action 'if' filter:get_predicate_filter if complete => {
            if (!filter.isExternal)
                return null;
            let policy = C.makePolicy(source, null, action);
            if (!policy)
                return null;
            policy.action.filter = Ast.BooleanExpression.And([policy.action.filter, filter]);
            return policy;
        };
        source:constant_Entity__tt__username ('can' | 'is allowed to' | 'is permitted to' | 'has permission to' | 'has my permission to') ('get' | 'see' | 'access' | 'monitor' | 'read') table:if_filtered_table => C.makePolicy(source, table, null);
    }
}

