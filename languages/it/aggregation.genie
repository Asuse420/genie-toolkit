// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2018 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
    const assert = require('assert');

    const ThingTalk = require('thingtalk');
    const Ast = ThingTalk.Ast;
    const Type = ThingTalk.Type;
    const Generate = ThingTalk.Generate;

// import the combinator library
    const C = require('../ast_manip');
}

projection_Number = {
    ?aggregation 'il' ('numero' | 'numero totale' | 'conto') ('di' | 'dei') t:complete_table => {
        if (!t.schema.is_list)
            return null;
        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT)
            .addArguments([new Ast.ArgumentDef(Ast.ArgDirection.OUT, 'count', Type.Number)]);
        const agg = new Ast.Table.Aggregation(t, '*', 'count', null, newSchema);
        return new Ast.Table.Projection(agg, ['count'], newSchema);
    };
}

projection_Any = {
    ?aggregation {
    'il' p:out_param_Numeric 'of' t:complete_table => {
        if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
            return null;
        if (!t.schema.is_list)
            return null;

        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
        const agg = new Ast.Table.Aggregation(t, p.name, 'sum', null, newSchema);
        return new Ast.Table.Projection(agg, [p.name], newSchema);
    };

    !turking 'il' p:out_param_Numeric 'medio' ('di' | 'dei') t:complete_table => {
        if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
            return null;
        if (!t.schema.is_list)
            return null;

        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
        const agg = new Ast.Table.Aggregation(t, p.name, 'avg', null, newSchema);
        return new Ast.Table.Projection(agg, [p.name], newSchema);
    };
    ?turking 'il' p:out_param_Numeric 'medio di' t:complete_table => {
        if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
            return null;
        if (!t.schema.is_list)
            return null;

        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
        const agg = new Ast.Table.Aggregation(t, p.name, 'avg', null, newSchema);
        return new Ast.Table.Projection(agg, [p.name], newSchema);
    };

    'il' p:out_param_Numeric ('minimo' | 'più piccolo' | 'più basso') ('in' | 'di' | 'dei') t:complete_table => {
        if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
            return null;
        if (!t.schema.is_list)
            return null;

        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
        const agg = new Ast.Table.Aggregation(t, p.name, 'min', null, newSchema);
        return new Ast.Table.Projection(agg, [p.name], newSchema);
    };

    'il' p:out_param_Numeric ('massimo' | 'più grande') ('in' | 'di' | 'dei') t:complete_table => {
        if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
            return null;
        if (!t.schema.is_list)
            return null;

        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
        const agg = new Ast.Table.Aggregation(t, p.name, 'max', null, newSchema);
        return new Ast.Table.Projection(agg, [p.name], newSchema);
    };
    }
}
