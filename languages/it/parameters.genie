// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2017-2019 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');

}

import '../common-parameters';

out_param_Numeric_masculine = {
    out_param_Number_masculine;
    out_param_Currency_masculine;
    out_param_Measure_ms_masculine;
    out_param_Measure_byte_masculine;
    out_param_Measure_kg_masculine;
    out_param_Measure_C_masculine;
    out_param_Measure_m_masculine;
    out_param_Measure_mps_masculine;
}

out_param_Numeric_feminine = {
    out_param_Number_feminine;
    out_param_Currency_feminine;
    out_param_Measure_ms_feminine;
    out_param_Measure_byte_feminine;
    out_param_Measure_kg_feminine;
    out_param_Measure_C_feminine;
    out_param_Measure_m_feminine;
    out_param_Measure_mps_feminine;
}

// these are autogenerated and depends on projection_*, which is also
// autogenerated
projection_Any_masculine = {}
projection_Any_feminine = {}
stream_projection_Any_masculine = {}
stream_projection_Any_feminine = {}
table_join_replace_placeholder_masculine = {}
table_join_replace_placeholder_feminine = {}
action_replace_param_with_table = {}
action_replace_param_with_stream = {}

projection_Numeric_masculine = {
    projection_Number_masculine;
    projection_Currency_masculine;
    projection_Measure_ms_masculine;
    projection_Measure_byte_masculine;
    projection_Measure_kg_masculine;
    projection_Measure_C_masculine;
    projection_Measure_m_masculine;
    projection_Measure_mps_masculine;
    projection_Measure_Pa_masculine;
    projection_Measure_kcal_masculine;
}
projection_Numeric_feminine = {
    projection_Number_feminine;
    projection_Currency_feminine;
    projection_Measure_ms_feminine;
    projection_Measure_byte_feminine;
    projection_Measure_kg_feminine;
    projection_Measure_C_feminine;
    projection_Measure_m_feminine;
    projection_Measure_mps_feminine;
    projection_Measure_Pa_feminine;
    projection_Measure_kcal_feminine;
}
};

the_out_param_Numeric_masculine = {
    'il' p:out_param_Numeric_masculine => p;
    !turking {
        'il suo' p:out_param_Numeric_masculine => p;
    }
}
the_out_param_Numeric_feminine = {
    'la' p:out_param_Numeric_feminine => p;
    !turking {
        'la sua' p:out_param_Numeric_feminine => p;
    }
}
the_out_param_Array__Any_masculine = {
    'il' p:out_param_Array__Any_masculine => p;
    !turking {
        'il suo' p:out_param_Array__Any_masculine => p;
    }
}
the_out_param_Array__Any_feminine = {
    'la' p:out_param_Array__Any_feminine => p;
    !turking {
        'la sua' p:out_param_Array__Any_feminine => p;
    }
}

for (let [typestr, type] of $options.types.all) {
    // don't access booleans or enums out arguments generically, as that rarely makes sense
    // (and when it does, you probably want a macro and maybe and edge trigger)
    if (!type.isEnum && !type.isBoolean) {
        $('the_out_param_' + typestr + '_masculine') = {
            'il' p:$('out_param_' + typestr + '_masculine') => p;

            !turking {
                'il suo' p:$('out_param_' + typestr + '_masculine') => p;
            }
        }
        $('the_out_param_' + typestr + '_feminine') = {
            'la' p:$('out_param_' + typestr + '_feminine') => p;

            !turking {
                'la sua' p:$('out_param_' + typestr + '_feminine') => p;
            }
        }

        if (!$options.types.id.has(typestr)) {
            if ($options.flags.projection_with_filter) {
                // note that we need to generate all combinations, as
                // a masculine noun can have a feminine property, and vice-versa

                $('projection_' + typestr + '_masculine') = {
                    ( outParam:$('the_out_param_' + typestr + '_masculine') 'di' table:with_filter_table_masculine
                    | outParam:$('the_out_param_' + typestr + '_masculine') 'di' table:with_filter_table_feminine
                    ) => C.makeProjection($options, table, type, outParam);
                }
                $('projection_' + typestr + '_feminine') = {
                    ( outParam:$('the_out_param_' + typestr + '_feminine') 'di' table:with_filter_table_masculine
                    | outParam:$('the_out_param_' + typestr + '_feminine') 'di' table:with_filter_table_feminine
                    ) => C.makeProjection($options, table, type, outParam);
                }

                $('stream_projection_' + typestr + '_masculine') = {
                    ( outParam:$('the_out_param_' + typestr + '_masculine') 'di nuovi' table:with_filter_table_masculine
                    | outParam:$('the_out_param_' + typestr + '_masculine') 'di nuove' table:with_filter_table_feminine
                    ) => C.makeStreamProjection($options, table, type, outParam);
                }
                $('stream_projection_' + typestr + '_feminine') = {
                    ( outParam:$('the_out_param_' + typestr + '_feminine') 'di nuovi' table:with_filter_table_masculine
                    | outParam:$('the_out_param_' + typestr + '_feminine') 'di nuove' table:with_filter_table_feminine
                    ) => C.makeStreamProjection($options, table, type, outParam);
                }

            } else {
                $('projection_' + typestr + '_masculine') = {
                    ( outParam:$('the_out_param_' + typestr + '_masculine') 'di' table:complete_table_masculine
                    | outParam:$('the_out_param_' + typestr + '_masculine') 'di' table:complete_table_feminine
                    ) => C.makeProjection($options, table, type, outParam);
                }
                $('projection_' + typestr + '_feminine') = {
                    ( outParam:$('the_out_param_' + typestr + '_feminine') 'di' table:complete_table_masculine
                    | outParam:$('the_out_param_' + typestr + '_feminine') 'di' table:complete_table_feminine
                    ) => C.makeProjection($options, table, type, outParam);
                }

                $('stream_projection_' + typestr + '_masculine') = {
                    ( outParam:$('the_out_param_' + typestr + '_masculine') 'di nuovi' table:complete_table_masculine
                    | outParam:$('the_out_param_' + typestr + '_masculine') 'di nuove' table:complete_table_feminine
                    ) => C.makeStreamProjection($options, table, type, outParam);
                }
                $('stream_projection_' + typestr + '_feminine') = {
                    ( outParam:$('the_out_param_' + typestr + '_feminine') 'di nuovi' table:complete_table_masculine
                    | outParam:$('the_out_param_' + typestr + '_feminine') 'di nuove' table:complete_table_feminine
                    ) => C.makeStreamProjection($options, table, type, outParam);
                }
            }

            projection_Any_masculine = $('projection_' + typestr + '_masculine');
            projection_Any_feminine = $('projection_' + typestr + '_feminine');
        }

        if ($options.flags.projection_with_filter) {
            $('single_projection_' + typestr + '_masculine') = table:with_filter_table_masculine
                => C.makeSingleProjection($options, table, type, $options.types.id.has(typestr));
            $('single_projection_' + typestr + '_feminine') = table:with_filter_table_feminine
                => C.makeSingleProjection($options, table, type, $options.types.id.has(typestr));

            $('single_stream_projection_' + typestr + '_masculine') = 'nuovi' table:with_filter_table_masculine
                => C.makeSingleStreamProjection($options, table, type, $options.types.id.has(typestr));
            $('single_stream_projection_' + typestr + '_feminine') = 'nuove' table:with_filter_table_feminine
                => C.makeSingleStreamProjection($options, table, type, $options.types.id.has(typestr));
        } else {
            $('single_projection_' + typestr + '_masculine') = table:complete_table_masculine
                => C.makeSingleProjection($options, table, type, $options.types.id.has(typestr));
            $('single_projection_' + typestr + '_feminine') = table:complete_table_feminine
                => C.makeSingleProjection($options, table, type, $options.types.id.has(typestr));

            $('single_stream_projection_' + typestr + '_masculine') = 'nuovi' table:complete_table_masculine
                => C.makeSingleStreamProjection($options, table, type, $options.types.id.has(typestr));
            $('single_stream_projection_' + typestr + '_feminine') = 'nuove' table:complete_table_feminine
                => C.makeSingleStreamProjection($options, table, type, $options.types.id.has(typestr));
        }
    }
}

placeholder_Number = {
    ( 'qualche numero'
    | 'qualche valore'
    ) => Ast.Value.Undefined(true);
}
placeholder_String = {
    'qualcosa' => Ast.Value.Undefined(true);
}
placeholder_Currency = {
    'qualche valore' => Ast.Value.Undefined(true);
}
placeholder_Time = {
    ( 'qualche orario'
    | 'un certo orario'
    | 'una certa ora'
    ) => Ast.Value.Undefined(true);
}
placeholder_Date = {
    ( 'qualche data'
    | 'una certa data'
    | 'qualche momento'
    ) => Ast.Value.Undefined(true);
}
placeholder_Location = {
    ( 'qualche località'
    | 'una località'
    | 'qualche posto'
    | 'un qualche posto'
    | 'da qualche parte'
    ) => Ast.Value.Undefined(true);
}
placeholder_Measure_ms   = {
    'una certa durata' => Ast.Value.Undefined(true);
    'un certo intervallo di tempo' => Ast.Value.Undefined(true);
}
placeholder_Measure_byte = {
    'una certa dimensione' => Ast.Value.Undefined(true);
}
placeholder_Measure_kg   = {
    'un certo peso' => Ast.Value.Undefined(true);
}
placeholder_Measure_C    = {
    'una certa temperatura' => Ast.Value.Undefined(true);
}
placeholder_Measure_m    = {
    ( 'qualche distanza'
    | 'una certa distanza'
    | 'qualche lunghezza'
    ) => Ast.Value.Undefined(true);
}
placeholder_Measure_mps  = {
    'una certa velocità' => Ast.Value.Undefined(true);
}
placeholder_Entity__tt__picture = {
    ( 'qualche immagine'
    | 'qualche foto'
    | 'qualche fotografia'
    ) => Ast.Value.Undefined(true);
}
placeholder_Entity__tt__username = {
    ( 'qualcuno'
    | 'qualche persona'
    ) => Ast.Value.Undefined(true);
}
placeholder_Entity__tt__phone_number = {
    ( 'qualcuno'
    | 'qualche persona'
    | 'qualche numero'
    | 'qualche numero di telefono'
    ) => Ast.Value.Undefined(true);
}
placeholder_Entity__tt__email_address = {
    ( 'qualcuno'
    | 'qualche persona'
    | 'qualche email'
    | 'qualche indirizzo email'
    ) => Ast.Value.Undefined(true);
}
placeholder_Entity__tt__path_name = {
    ( 'qualche file'
    | 'qualche directory'
    | 'qualche cartella'
    ) => Ast.Value.Undefined(true);
}
placeholder_Entity__tt__url = {
    ( 'qualche url'
    | 'qualche link'
    | 'qualche sito'
    | 'qualche sito web'
    ) => Ast.Value.Undefined(true);
}

for (let [pname, [typestr, pcanonical, gender]] of $options.params.in.values()) {
    if (typestr.startsWith('Enum__')) {
        // replace $-placeholders with "some X" where X is based on parameter name

        thingpedia_query = q:thingpedia_query #((gender === 'masculine' ? 'un certo ' : 'una certa ') + pcanonical) [-> pname { isUndefined: true }] =>
            C.replacePlaceholderWithUndefined(q, pname, typestr);

        thingpedia_get_command = q:thingpedia_get_command #((gender === 'masculine' ? 'un certo ' : 'una certa ') + pcanonical) [-> pname { isUndefined: true }] =>
            C.replacePlaceholderWithUndefined(q, pname, typestr);

        thingpedia_stream = s:thingpedia_stream #((gender === 'masculine' ? 'un certo ' : 'una certa ') + pcanonical) [-> pname { isUndefined: true }] =>
            C.replacePlaceholderWithUndefined(s, pname, typestr);

        thingpedia_action = a:thingpedia_action #((gender === 'masculine' ? 'un certo ' : 'una certa ') + pcanonical) [-> pname { isUndefined: true }] =>
            C.replacePlaceholderWithUndefined(a, pname, typestr);

        thingpedia_program = p:thingpedia_program #((gender === 'masculine' ? 'un certo ' : 'una certa ') + pcanonical) [-> pname { isUndefined: true }] =>
            C.replacePlaceholderWithUndefined(p, pname, typestr);
    }

    // don't parameter pass booleans or enums, as that rarely makes sense
    if (typestr !== 'Boolean' && !typestr.startsWith('Enum__')) {
        if (pname !== 'count' && pname !== 'p_count') {
            if ($options.flags.undefined_filter) {
                // replace $-placeholders with "some X" where X is based on parameter name
                thingpedia_query = q:thingpedia_query #('qualche ' + pcanonical) [-> pname { isUndefined: true }] =>
                    C.replacePlaceholderWithUndefined(q, pname, typestr);

                thingpedia_get_command = q:thingpedia_get_command #('qualche ' + pcanonical) [-> pname { isUndefined: true }] =>
                    C.replacePlaceholderWithUndefined(q, pname, typestr);

                thingpedia_stream = s:thingpedia_stream #('qualche ' + pcanonical) [-> pname { isUndefined: true }] =>
                    C.replacePlaceholderWithUndefined(s, pname, typestr);

                thingpedia_action = a:thingpedia_action #('qualche ' + pcanonical) [-> pname { isUndefined: true }] =>
                    C.replacePlaceholderWithUndefined(a, pname, typestr);

                thingpedia_program = p:thingpedia_program #('qualche ' + pcanonical) [-> pname { isUndefined: true }] =>
                    C.replacePlaceholderWithUndefined(p, pname, typestr);
            }
        }

        // replace $-placeholders with projection-based parameter passing
    
        // again, we need to have all masculine/feminine combinations
        table_join_replace_placeholder_masculine = {
            q:thingpedia_query_masculine p:$('single_projection_' + typestr + '_masculine') [-> pname] => C.tableJoinReplacePlaceholder(q, pname, p);
            q:thingpedia_query_masculine p:$('single_projection_' + typestr + '_feminine') [-> pname] => C.tableJoinReplacePlaceholder(q, pname, p);
        }
        table_join_replace_placeholder_feminine = {
            q:thingpedia_query_feminine p:$('single_projection_' + typestr + '_masculine') [-> pname] => C.tableJoinReplacePlaceholder(q, pname, p);
            q:thingpedia_query_feminine p:$('single_projection_' + typestr + '_feminine') [-> pname] => C.tableJoinReplacePlaceholder(q, pname, p);
        }

        action_replace_param_with_table = {
            a:thingpedia_action p:$('single_projection_' + typestr + '_masculine') [-> pname] => C.actionReplaceParamWithTable(a, pname, p);
            a:thingpedia_action p:$('single_projection_' + typestr + '_feminine') [-> pname] => C.actionReplaceParamWithTable(a, pname, p);
        }
        action_replace_param_with_stream = {
            a:thingpedia_action p:$('single_stream_projection_' + typestr + '_masculine') [-> pname] => C.actionReplaceParamWithStream(a, pname, p);
            a:thingpedia_action p:$('single_stream_projection_' + typestr + '_feminine') [-> pname] => C.actionReplaceParamWithStream(a, pname, p);
        }

        if ($options.types.id.has(typestr)) {
            // FIXME: technically, we'd need to track the gender of what we're coreferencing here...
            // that's too much of a mess so we'll accept the wrong coref

            forward_get_do_command = command:forward_get_do_command ('-lo' | '-la' | '-le' | '-li' | 'quello' | 'quella' | 'quelle' | 'quegli') [-> pname] => {
                for (let joinArg in command.table.schema.out) {
                    if (typestr === C.typeToStringSafe(command.table.schema.out[joinArg]))
                        return C.getDoCommand(command, pname, new Ast.Value.VarRef(joinArg));
                }
                return null;
            };

            forward_when_do_rule = rule:forward_when_do_rule ('-lo' | '-la' | '-le' | '-li' | 'quello' | 'quella' | 'quelle' | 'quegli') [-> pname] => {
                for (let joinArg in rule.stream.schema.out) {
                    if (typestr === C.typeToStringSafe(rule.stream.schema.out[joinArg]))
                        return C.whenDoRule(rule, pname, new Ast.Value.VarRef(joinArg));
                }
                return null;
            };

            when_get_stream = stream:when_get_stream ('-lo' | '-la' | '-le' | '-li' | 'quello' | 'quella' | 'quelle' | 'quegli') [-> pname] => {
                for (let joinArg in stream.stream.schema.out) {
                    if (typestr === C.typeToStringSafe(stream.stream.schema.out[joinArg]))
                        return C.whenGetStream(stream, pname, new Ast.Value.VarRef(joinArg));
                }
                return null;
            };
        } else {
            table_join_replace_placeholder_masculine = {
                q:thingpedia_query_masculine p:$('projection_' + typestr + '_masculine') [-> pname] => C.tableJoinReplacePlaceholder(q, pname, p);
                q:thingpedia_query_masculine p:$('projection_' + typestr + '_feminine') [-> pname] => C.tableJoinReplacePlaceholder(q, pname, p);
            }
            table_join_replace_placeholder_feminine = {
                q:thingpedia_query_feminine p:$('projection_' + typestr + '_masculine') [-> pname] => C.tableJoinReplacePlaceholder(q, pname, p);
                q:thingpedia_query_feminine p:$('projection_' + typestr + '_feminine') [-> pname] => C.tableJoinReplacePlaceholder(q, pname, p);
            }
            action_replace_param_with_table = {
                a:thingpedia_action p:$('projection_' + typestr + '_masculine') [-> pname] => C.actionReplaceParamWithTable(a, pname, p);
                a:thingpedia_action p:$('projection_' + typestr + '_feminine') [-> pname] => C.actionReplaceParamWithTable(a, pname, p);
            }
            action_replace_param_with_stream = {
                a:thingpedia_action p:$('stream_projection_' + typestr + '_masculine') [-> pname] => C.actionReplaceParamWithStream(a, pname, p);
                a:thingpedia_action p:$('stream_projection_' + typestr + '_feminine') [-> pname] => C.actionReplaceParamWithStream(a, pname, p);
            }

            forward_get_do_command = {
                !turking command:forward_get_do_command p:$('the_out_param_' + typestr + '_masculine') [-> pname] => C.getDoCommand(command, pname, p);
                !turking command:forward_get_do_command p:$('the_out_param_' + typestr + '_feminine') [-> pname] => C.getDoCommand(command, pname, p);
            }
            backward_get_do_command = {
                !turking command:backward_get_do_command p:$('the_out_param_' + typestr + '_masculine') [-> pname] => C.getDoCommand(command, pname, p);
                !turking command:backward_get_do_command p:$('the_out_param_' + typestr + '_feminine') [-> pname] => C.getDoCommand(command, pname, p);
            }
            forward_when_do_rule = {
                !turking rule:forward_when_do_rule p:$('the_out_param_' + typestr + '_masculine') [-> pname] => C.whenDoRule(rule, pname, p);
                !turking rule:forward_when_do_rule p:$('the_out_param_' + typestr + '_feminine') [-> pname] => C.whenDoRule(rule, pname, p);
            }
            backward_when_do_rule = {
                !turking rule:backward_when_do_rule p:$('the_out_param_' + typestr + '_masculine') [-> pname] => C.whenDoRule(rule, pname, p);
                !turking rule:backward_when_do_rule p:$('the_out_param_' + typestr + '_feminine') [-> pname] => C.whenDoRule(rule, pname, p);
            }
            when_get_stream = {
                !turking stream:when_get_stream p:$('the_out_param_' + typestr + '_masculine') [-> pname] => C.whenGetStream(stream, pname, p);
                !turking stream:when_get_stream p:$('the_out_param_' + typestr + '_feminine') [-> pname] => C.whenGetStream(stream, pname, p);
            }
        }

        if (pname === 'p_picture_url') {
            forward_get_do_command = {
                command:forward_get_do_command ('-lo' | '-la' | '-le' | '-li' | 'quello' | 'quella' | 'quelle' | 'quegli') [-> pname] => C.getDoCommand(command, pname, new Ast.Value.VarRef('picture_url'));
            }
            forward_when_do_rule = {
                rule:forward_when_do_rule ('-lo' | '-la' | '-le' | '-li' | 'quello' | 'quella' | 'quelle' | 'quegli') [-> pname] => C.whenDoRule(rule, pname, new Ast.Value.VarRef('picture_url'));
            }
            when_get_stream = {
                stream:when_get_stream ('-lo' | '-la' | '-le' | '-li' | 'quello' | 'quella' | 'quelle' | 'quegli') [-> pname] => C.whenGetStream(stream, pname, new Ast.Value.VarRef('picture_url'));
            }
        }

        if (typestr === 'String' && ['p_body', 'p_message', 'p_caption', 'p_status', 'p_text'].indexOf(pname) >= 0) {
            forward_get_do_command = command:forward_get_do_command ('-lo' | '-la' | '-le' | '-li' | 'quello' | 'quella' | 'quelle' | 'quegli') [-> pname] => {
                for (let pname in command.table.schema.out) {
                    if (pname === 'picture_url')
                        return null;
                    let ptype = command.table.schema.out[pname];
                    if ($options.types.id.has(C.typeToStringSafe(ptype)))
                        return null;
                }
                return C.getDoCommand(command, pname, new Ast.Value.Event(null));
            };

            forward_when_do_rule = rule:forward_when_do_rule ('-lo' | '-la' | '-le' | '-li' | 'quello' | 'quella' | 'quelle' | 'quegli') [-> pname] => {
                for (let pname in rule.stream.schema.out) {
                    if (pname === 'picture_url')
                        return null;
                    let ptype = rule.stream.schema.out[pname];
                    if ($options.types.id.has(C.typeToStringSafe(ptype)))
                        return null;
                }
                return C.whenDoRule(rule, pname, new Ast.Value.Event(null));
            };

            when_get_stream = stream:when_get_stream ('-lo' | '-la' | '-le' | '-li' | 'quello' | 'quella' | 'quelle' | 'quegli') [-> pname] => {
                for (let pname in stream.stream.schema.out) {
                    if (pname === 'picture_url')
                        return null;
                    let ptype = stream.stream.schema.out[pname];
                    if ($options.types.id.has(C.typeToStringSafe(ptype)))
                        return null;
                }
                return C.whenGetStream(stream, pname, new Ast.Value.Event(null));
            };
        }
    }
}

