// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
    const assert = require('assert');
    const ThingTalk = require('thingtalk');
    const Ast = ThingTalk.Ast;

    const C = require('../ast_manip');
    const D = require('../dialogue_utils');

    // import thingpedia info
    const _tpLoader = require('../load-thingpedia');
}

import '../common';
import './constants';
import './timers';
import './filters';
import './parameters';
import './aggregation';
import './computation';
import './who_questions';
import './stream_tables';
import './commands';

context ctx_init,
    ctx_greet,
    ctx_with_result,
    ctx_with_action,
    ctx_search_command,
    ctx_empty_direct_question,
    ctx_direct_question,
    ctx_empty_search_command,
    ctx_large_search_command,
    ctx_complete_search_command,
    ctx_completed_action,
    ctx_confirm_action,
    ctx_incomplete_action;

context function (state) {
    if (state === null)
        return [['ctx_init'], D.INITIAL_CONTEXT_INFO];
    if (!(state instanceof Ast.DialogueState))
        console.error(state);
    assert(state instanceof Ast.DialogueState);
    if (state.policy !== D.POLICY_NAME)
        return null;
    const info = D.getContextInfo(state);

    switch (state.dialogueAct) {
    case 'greet':
        assert(state.history.length === 0, `expected empty history for greet`);
        return [['ctx_greet'], info];

    case 'execute': {
        const tags = [];

        if (info.nextInfo !== null) {
            // we have an action we want to execute, or a query that needs confirmation
            if (info.nextInfo.chainParameter === null || info.nextInfo.chainParameterFilled) {
                // we don't need to fill any parameter from the current query

                if (info.nextInfo.isComplete) {
                    return [['ctx_confirm_action'], info];
                } else {
                    return [['ctx_incomplete_action'], info];
                }
            }

            tags.push('ctx_with_action');
        }

        // we must have a result
        assert(info.resultInfo);
        // nothing else is implemented.
        assert (info.resultInfo.isTable);

        if (info.resultInfo.hasEmptyResult) {
            if (info.resultInfo.isQuestion)
                tags.push('ctx_empty_direct_question');
            else
                tags.push('ctx_empty_search_command');
            return [tags, info];
        }

        tags.push('ctx_with_result');

        if (!info.resultInfo.hasSingleResult) // we can refine
            tags.push('ctx_search_command');

        if (!info.resultInfo.hasLargeResult) // we can recommend/show the result
            tags.push('ctx_complete_search_command');

        return [tags, info];
    }

    default:
        throw new Error(`Unexpected user dialogue act ${info.dialogueAct}`);
    }
}

search_result_preamble = {
    ( 'there are' ('many' | 'several') base:base_noun_phrase '.'
    | ('i can see' | 'i have found') ('many' | 'several') base:base_noun_phrase '.'
    | 'there are' ('many' | 'several') base:base_noun_phrase 'matching your request .'
    | ('i can see' | 'i have found') ('many' | 'several') base:base_noun_phrase 'matching your constraints .'
    | ('i can see' | 'i have found') ('many' | 'several') base:base_noun_phrase 'with those characteristics .'
    | 'i can recommend' ('many' | 'several') base:base_noun_phrase '.'
    ) => [base, null, false];

    ( 'i have found' num:constant_Number base:base_noun_phrase '.'
    | 'i have' num:constant_Number base:base_noun_phrase 'in my database .'
    | 'i can see' num:constant_Number base:base_noun_phrase 'in my database .'
    | 'i can see' num:constant_Number base:base_noun_phrase 'like that .'
    ) => [base, num, false];

    ( 'there are more than' num:constant_Number base:base_noun_phrase '.'
    | 'there are more than' num:constant_Number base:base_noun_phrase 'that correspond to your specifications .'
    ) => [base, num, true];
}

direct_question = {
    ( 'what' p:out_param_Any 'do you want ?'
    | 'what' p:out_param_Any 'would you prefer ?'
    | 'what' p:out_param_Any 'would you like ?'
    | 'what' p:out_param_Any 'are you interested in ?'
    | 'what' p:out_param_Any 'are you looking for ?'
    ) => {
        if (p.name === 'id')
            return null;
        return p.name;
    };
}

yesno_direct_question = {
    ( 'any preference of' p:out_param_Any '?'
    | 'do you have a specific' p:out_param_Any 'in mind?'
    | 'do you have a preference of' p:out_param_Any '?'
    | 'do you have a preferred' p:out_param_Any '?'
    | 'are you looking for a specific' p:out_param_Any '?'
    ) => {
        if (p.name === 'id')
            return null;
        return p.name;
    };
}

generic_answer = {
    // TODO
}

imprecise_answer_phrase = {
    ( slot:constant_Any
    | slot:npp_filter
    | slot:apv_filter
    | slot:pvp_filter
    | slot:preposition_filter
    ) => slot;
}

imprecise_answer = {
    ans:imprecise_answer_phrase ('please' | '') '.' => ans;

    generic_preamble_for_answer ans:imprecise_answer_phrase '.' => ans;
}

answer_noun_phrase = {
    // one filter
    one_with_filter_table;
    one_which_filter_table;
    one_clean_filter_table;

    // two filters
    two_with_filter_table;
    two_which_filter_table;
    two_clean_filter_table;
}

verbose_answer = {
    // complete answer, like "I am looking for a bla restaurant"
    generic_preamble_for_answer ('a' | 'the') query:answer_noun_phrase => query;
}

question_npp_filter_pair = {
    f1:npp_filter 'or' f2:npp_filter => {
        if (f1.name !== f2.name)
            return null;
        if (!f1.value.getType().equals(f2.value.getType()))
            return null;
        if (f1.value.equals(f2.value))
            return null;
        return [f1.name, f1.value.getType()];
    };
    f1:npp_filter 'or' c:constant_Any => {
        if (!c.getType().equals(f1.value.getType()))
            return null;
        if (f1.value.equals(c))
            return null;
        return [f1.name, f1.value.getType()];
    };
}
question_apv_filter_pair = {
    f1:apv_filter 'or' f2:apv_filter => {
        if (f1.name !== f2.name)
            return null;
        if (!f1.value.getType().equals(f2.value.getType()))
            return null;
        if (f1.value.equals(f2.value))
            return null;
        return [f1.name, f1.value.getType()];
    };
}
question_avp_filter_pair = {
    f1:avp_filter 'or' c:constant_Any => {
        if (!c.getType().equals(f1.value.getType()))
            return null;
        if (f1.value.equals(c))
            return null;
        return [f1.name, f1.value.getType()];
    };
}
question_preposition_filter_pair = {
    f1:preposition_filter 'or' f2:preposition_filter => {
        if (f1.name !== f2.name)
            return null;
        if (!f1.value.getType().equals(f2.value.getType()))
            return null;
        if (f1.value.equals(f2.value))
            return null;
        return [f1.name, f1.value.getType()];
    };
}
question_pvp_filter_pair = {
    f1:pvp_filter 'or' f2:pvp_filter => {
        if (f1.name !== f2.name)
            return null;
        if (!f1.value.getType().equals(f2.value.getType()))
            return null;
        if (f1.value.equals(f2.value))
            return null;
        return [f1.name, f1.value.getType()];
    };
}

disjunctive_question = {
    ( ('are you looking for' | 'would you like' | 'do you need') 'something with' question:question_npp_filter_pair '?'
    | ('are you looking for' | 'would you like' | 'do you need') 'something' question:question_apv_filter_pair '?'
    | ('are you looking for' | 'would you like' | 'do you need') 'something' question:question_preposition_filter_pair '?'
    | ('are you looking for' | 'would you like' | 'do you need') 'something' question:question_pvp_filter_pair '?'
    | ('are you looking for' | 'would you like' | 'do you need') 'something that' question:question_avp_filter_pair '?'
    ) => {
        const [pname, ptype] = question;
        return pname;
    };

    ( ('are you looking for' | 'would you like' | 'do you need') 'a' table:complete_table question:question_npp_filter_pair '?'
    | ('are you looking for' | 'would you like' | 'do you need') 'a' question:question_apv_filter_pair table:complete_table '?'
    | ('are you looking for' | 'would you like' | 'do you need') 'a' table:complete_table question:question_pvp_filter_pair '?'
    | ('are you looking for' | 'would you like' | 'do you need') 'a' table:complete_table question:question_preposition_filter_pair '?'
    | ('are you looking for' | 'would you like' | 'do you need') 'a' table:complete_table 'that' question:question_avp_filter_pair '?'
    ) => {
        const [pname, ptype] = question;
        const tableptype = table.schema.getArgType(pname);
        if (!tableptype || !ptype.equals(tableptype))
            return null;
        return pname;
    };
}

generic_question = {
    'which one would you like ?' => '';
    'do you have a specific one in mind ?' => '';
}

precise_search_question_answer_pair = {
    ( question:direct_question '<sep>' table:generic_answer
    | question:disjunctive_question '<sep>' table:generic_answer [weight=5]
    | question:yesno_direct_question '<sep>' ('yes' | 'yes ,' | '') table:generic_answer

    | question:direct_question '<sep>' table:verbose_answer
    | question:disjunctive_question '<sep>' table:verbose_answer [weight=5]
    | question:yesno_direct_question '<sep>' ('yes' | 'yes ,' | '') table:verbose_answer
    | question:generic_question '<sep>' ('yes' | 'yes ,' | '') table:verbose_answer
    ) => {
        if (!D.isQueryAnswerValidForQuestion(table, question))
            return null;
        return [question, table];
    };
}

imprecise_search_question_answer_pair = {
    ( question:direct_question '<sep>' answer:imprecise_answer
    | question:disjunctive_question '<sep>' answer:imprecise_answer [weight=5]
    | question:yesno_direct_question '<sep>' ('yes' | 'yes ,' | '') answer:imprecise_answer
    ) => D.impreciseSearchQuestionAnswerPair(question, answer);
}

greeting = {
    'hello !';
    'hi !';
}

greeting_reply = {
    'hello , how can i help you ?';
    'how can i help you ?';
    'what are you interested in ?';
    'what can i do for you ?';
}

info_noun_phrase = {
    // one, two or three slots
    one_with_filter_table;
    one_which_filter_table;
    one_clean_filter_table;

    two_with_filter_table;
    two_which_filter_table;
    two_clean_filter_table;

    three_with_filter_table;
    three_which_filter_table;
    three_clean_filter_table;
}

the_base_noun_phrase = {
    ( 'the' noun:base_noun_phrase
    | 'that' noun:base_noun_phrase
    ) => noun;
}

for (let [pname, [typestr,]] of _tpLoader.params.in.values()) {
    coref_action_phrase = {
        action:thingpedia_action ('it' | 'this' | 'that') [-> pname] => {
            const type = action.schema.getArgType(pname);
            if (!type || !type.isEntity)
                return null;
            return action.invocation;
        };

        action:thingpedia_action noun:the_base_noun_phrase [-> pname] => {
            const type = action.schema.getArgType(pname);
            if (!type || !type.isEntity || type.type !== noun)
                return null;
            return action.invocation;
        };
    }

    direct_action_phrase = {
        action:thingpedia_action name:constant_name [-> pname { isConstant: true }] =>
            C.replacePlaceholderWithConstant(action, pname, name);
    }
}

system_direct_proposal_short = {
    ctx:ctx_with_result 'how about the' proposal:constant_name '?'
        => D.makeRecommendation(ctx, proposal);
}

action_recommendation = {
    ctx:ctx_with_result 'would you like to' action:direct_action_phrase '?' if complete [weight=0.1]
        => D.makeActionRecommendation(ctx, action.invocation);
}

actionable_system_direct_proposal_short = {
    ( ctx:ctx_with_result 'i' ('recommend' | 'suggest') 'the' proposal:constant_name '.'
    | ctx:ctx_with_result 'i' ('have' | 'see') 'the' proposal:constant_name '.'
    ) => D.makeRecommendation(ctx, proposal);
}

action_offer = {
    ( 'would you like to' action:direct_action_phrase '?'
    | 'would you like me to' action:direct_action_phrase ' for you ?'
    ) if complete => action.invocation;
}

proposal_info_action_pair = {
    'it is a' info:info_noun_phrase '.' action:action_offer => {
        const resultType = info.schema.getArgType('id');

        if (!resultType || !C.hasArgumentOfType(action, resultType))
            return null;
        return [info, action];
    };
}

// a recommendation ("direct proposal") consists of the first result of the current query,
// and action to do with it
// the action can come from the context (if the user expressed it earlier), or it can
// be offered immediately
system_direct_proposal = {
    ( ctx_with_action proposal:system_direct_proposal_short [weight=10]
    | ctx_with_action proposal:actionable_system_direct_proposal_short
    ) => proposal;
    action_recommendation;

    proposal:actionable_system_direct_proposal_short action:action_offer
        => D.checkActionForRecommendation(proposal, action);

    ( proposal:system_direct_proposal_short 'it is a' info:info_noun_phrase '.' [weight=10]
    | proposal:action_recommendation 'it is a' info:info_noun_phrase '.'
    | proposal:actionable_system_direct_proposal_short 'it is a' info:info_noun_phrase '.'
    ) => D.checkRecommendation(proposal, info);

    proposal:actionable_system_direct_proposal_short pair:proposal_info_action_pair => {
        const [info, action] = pair;
        proposal = D.checkRecommendation(proposal, info);
        if (proposal === null)
            return null;
        return D.checkActionForRecommendation(proposal, action);
    };
}

negative_proposal_answer_preamble = {
    'no i need';
    'i was thinking more of';
    'i would like';
    'no , i would like';
    'i am looking for';
    'do you have';
    'can you find';
    'is there';
}

generic_negative_proposal_reply = {
    'i do not like that';
    'i do not like that , do you have any other option ?';
}

system_generic_proposal = {
    ctx:ctx_search_command ('are you looking for a' | 'how about a' | 'how about the') proposal:answer_noun_phrase '?'
        => D.makeRefinementProposal(ctx, proposal);
}

accept_phrase = {
    'i like that';
    'yes i like that';
    'sounds good';
}

negative_recommendation_reply_pair = {
    ( prop:system_direct_proposal '<sep>' negative_proposal_answer_preamble ('a' | 'any') request:answer_noun_phrase
    | prop:system_direct_proposal '<sep>' negative_proposal_answer_preamble request:anything_phrase
    ) => {
        const [topResult, action] = prop;
        const proposalType = topResult.value.id.getType();
        const idType = request.schema.getArgType('id');

        if (!idType || !idType.equals(proposalType))
            return null;
        return [topResult, action, request];
    };
}

negative_proposal_reply_pair = {
    ( prop:system_generic_proposal '<sep>' negative_proposal_answer_preamble ('a' | 'any') request:answer_noun_phrase
    | prop:system_generic_proposal '<sep>' negative_proposal_answer_preamble request:anything_phrase
    | prop:system_generic_proposal '<sep>' ('no ,' | '') request:generic_answer
    ) => {
        if (!C.isSameFunction(prop.schema, request.schema))
            return null;
        const refined = D.refineFilterToChangeFilter(prop.filter, request.filter);
        if (refined === null)
            return null;
        return [prop, request];
    };
}

positive_recommendation_reply_pair = {
    prop:system_direct_proposal '<sep>' accept_phrase [weight=10] => prop;
}

positive_proposal_reply_pair = {
    prop:system_generic_proposal '<sep>' accept_phrase => [prop, prop];
}


initial_command = {
    ( stmt:action_command [weight=10]
    | stmt:search_command
    | stmt:complete_question [weight=0.1]
    | stmt:projection_question [weight=0.1]
    | greeting stmt:action_command
    | greeting stmt:complete_question [weight=0.1]
    | greeting stmt:projection_question [weight=0.1]
    ) => stmt;

    ( prog:initial_program
    | greeting prog:initial_program
    ) => {
        if (prog.rules.length !== 1)
            return null;
        return prog.rules[0];
    };
}

$root = {
    ctx:ctx_init greeting =>
        D.checkStateIsValid(ctx, null, new Ast.DialogueState(null, D.POLICY_NAME, 'greet', null, []));

    ctx:ctx_init stmt:initial_command => {
        const userState = D.initialRequest(stmt);
        if (userState === null)
            return null;
        return D.checkStateIsValid(ctx, null, userState);
    };

    ( ctx:ctx_greet greeting_reply '<sep>' stmt:action_command
    | ctx:ctx_greet greeting_reply '<sep>' stmt:search_command
    | ctx:ctx_greet greeting_reply '<sep>' stmt:complete_question [weight=0.1]
    | ctx:ctx_greet greeting_reply '<sep>' stmt:projection_question [weight=0.1]
    ) => {
        const userState = D.initialRequest(stmt);
        if (userState === null)
            return null;
        const sysState = D.makeSimpleSystemState(ctx, 'sys_greet', null);
        return D.checkStateIsValid(ctx, sysState, userState);
    };

    ctx:ctx_search_command qa:precise_search_question_answer_pair [weight=0.1] =>
        D.preciseSearchQuestionAnswer(ctx, qa);

    ctx:ctx_search_command qa:imprecise_search_question_answer_pair [weight=1] =>
        D.impreciseSearchQuestionAnswer(ctx, null, qa);

    ctx:ctx_search_command preamble:search_result_preamble qa:imprecise_search_question_answer_pair [weight=1] =>
        D.impreciseSearchQuestionAnswer(ctx, preamble, qa);

    ( ctx:ctx_search_command pair:negative_proposal_reply_pair
    | ctx:ctx_search_command pair:positive_proposal_reply_pair [weight=10]
    ) =>
        D.proposalReplyPair(ctx, pair);

    ctx:ctx_complete_search_command pair:negative_recommendation_reply_pair
        => D.negativeRecommendationReplyPair(ctx, pair);
    ctx:ctx_complete_search_command pair:positive_recommendation_reply_pair [weight=10]
        => D.positiveRecommendationReplyPair(ctx, pair);
}
