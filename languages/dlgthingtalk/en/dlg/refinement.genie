// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of Genie
//
// Copyright 2020 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

// Refinement templates: the search is NOT complete (0, or more than 1 result), and the
// agent doesn't want to show results
//
// These include proposals, and empty search errors.
// A proposal is when the agent proposed a refined search; the user answers:
// - some form of "yes"
// - some form of "no" followed by another search refinement

{
    const assert = require('assert');
    const ThingTalk = require('thingtalk');
    const Ast = ThingTalk.Ast;
    const Type = ThingTalk.Type;

    const C = require('../../ast_manip');
    const D = require('../../dialogue_utils');

    // import thingpedia info
    const _tpLoader = require('../../load-thingpedia');
}

search_result_preamble = {
    ctx:ctx_search_command ('there are' | 'i can see' | 'i have found' | 'i can recommend') ('many' | 'several') base:base_noun_phrase
        ('matching your request' | 'matching your constraints' | 'with those characteristics' | 'like that' | '') '.'
        => D.checkSearchResultPreamble(ctx, base, null, false);

    ctx:ctx_search_command ('there are' | 'i have found' | 'i have' | 'i can see') num:constant_Number base:base_noun_phrase
        ('in my database' | 'like that') '.'
        => D.checkSearchResultPreamble(ctx, base, num, false);
}

system_generic_proposal = {
    ( ctx:ctx_search_command ('are you looking for a' | 'how about a' | 'how about the') proposal:answer_noun_phrase '?'
    | ctx:ctx_search_command ('are you looking for' | 'how about') proposal:anything_phrase '?'
    ) => D.makeRefinementProposal(ctx, proposal);

    ( ctx:search_result_preamble ('are you looking for a' | 'how about a' | 'how about the') proposal:answer_noun_phrase '?'
    | ctx:search_result_preamble ('are you looking for' | 'how about' | 'how about') proposal:anything_phrase '?'
    ) => D.makeRefinementProposal(ctx, proposal);
}

verbose_negative_proposal_reply_pair = {
    /* FIXME
    ( prop:system_generic_proposal '<sep>' ('no ,' | 'no' | '') ('i am not in the mood for a' | 'i do not like' | 'i do not want') phrase:answer_noun_phrase
    | prop:system_generic_proposal '<sep>' ('no ,' | 'no' | '') ('i am not in the mood for' | 'i do not like' | 'i do not want') phrase:anything_phrase
    ) => {
        if (!D.isValidNegativePreambleForInfo(prop, preamble))
            return null;
        return [prop, preamble];
    };
    */
}

negative_proposal_reply_pair = {
    ( prop:system_generic_proposal '<sep>' ('no ,' | 'no' | '') negative_proposal_answer_preamble ('a' | 'any') request:answer_noun_phrase
    | prop:system_generic_proposal '<sep>' ('no ,' | 'no' | '') negative_proposal_answer_preamble request:anything_phrase
    ) => {
        if (!C.isSameFunction(prop.schema, request.schema))
            return null;
        const refined = D.refineFilterToChangeFilter(prop.filter, request.filter);
        if (refined === null)
            return null;
        return [prop, request];
    };

    pair:verbose_negative_proposal_reply_pair [weight=5] => {
        const [prop, preamble] = pair;
        // convert the preamble into a request by negating it
        const clone = preamble.clone();
        clone.filter = new Ast.BooleanExpression.Not(null, clone.filter);
        return [prop, clone];
    };

    ( pair:verbose_negative_proposal_reply_pair negative_proposal_answer_preamble ('a' | 'any') request:answer_noun_phrase
    | pair:verbose_negative_proposal_reply_pair negative_proposal_answer_preamble request:anything_phrase
    ) => D.mergePreambleAndRequest(pair, request);
}

positive_proposal_reply_pair = {
    prop:system_generic_proposal '<sep>' accept_phrase => [prop, prop];
}


empty_search_error = {
    ('sorry ,' | 'i am sorry ,' | '') ('there are no' | 'i cannot find any') base:base_table ('matching your request' | 'with those characteristics' | 'like that')
    '.' => [base, null];

    ('sorry ,' | 'i am sorry ,' | '') ('there are no' | 'i cannot find any') base:base_table ('matching your request' | 'with those characteristics' | 'like that')
    '.' 'would you like' ('a different' | 'another') p:out_param_Any '?' => {
        if (!base.schema.hasArgument(p))
            return null;
        return [base, p];
    };

    ('sorry ,' | 'i am sorry ,' | '') 'i cannot find any result for your search . would you like' ('a different' | 'another') p:out_param_Any '?'
        => [null, p];
}

empty_search_change_pair = {
    ( error:empty_search_error '<sep>' ('i see ,' | 'okay' | 'okay ,' | 'yeah' | 'yeah ,') ('do you have' | 'can you find' | 'is there' | 'how about') 'a' phrase:answer_noun_phrase '?'
    | error:empty_search_error '<sep>' ('i see ,' | 'okay' | 'okay ,' | 'yeah' | 'yeah ,') ('do you have' | 'can you find' | 'is there' | 'how about') phrase:anything_phrase '?'
    ) => {
        const [base, param] = error;
        if (base !== null && !C.isSameFunction(base.schema, phrase.schema))
            return null;
        if (param !== null && !C.filterUsesParam(phrase.filter, param.name))
            return null;
        return [param, phrase];
    };

    error:empty_search_error '<sep>' ('i see ,' | 'okay' | 'okay ,' | 'yeah' | 'yeah ,') ('do you have' | 'can you find' | 'is there' | 'how about') answer:imprecise_answer_phrase '?' => {
        const [base, param] = error;
        if (base === null || param === null)
            return null;
        if (answer instanceof Ast.Value)
            answer = C.makeFilter(param, '==', answer);
        if (answer === null)
            return null;
        if (answer.name !== param.name)
            return null;
        if (!C.checkFilter(base, answer))
            return null;
        return [param, new Ast.Table.Filter(null, base, answer, base.schema)];
    };
}
