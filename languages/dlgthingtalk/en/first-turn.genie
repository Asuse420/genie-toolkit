// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2020 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
    const assert = require('assert');
    const ThingTalk = require('thingtalk');
    const Ast = ThingTalk.Ast;

    const C = require('../ast_manip');
}

import '../common';
import './constants';
import './timers';
import './filters';
import './parameters';
import './aggregation';
import './computation';
import './who_questions';
import './stream_tables';
import './commands';

greeting = {
    'hello !';
    'hi !';
}

$root = {
    greeting => new Ast.DialogueState(null, 'org.thingpedia.dialogue.transaction', 'greet', []);

    ( prog:initial_program
    | greeting prog:initial_program
    ) => new Ast.DialogueState(null, 'org.thingpedia.dialogue.transaction', 'program', new Ast.DialogueHistoryItem(null, prog, null));

    ( stmt:action_command
    | stmt:complete_initial_question
    | stmt:projection_question
    | greeting stmt:action_command
    | greeting stmt:complete_initial_question
    | greeting stmt:projection_question
    ) => {
        if (stmt.stream && _loader.flags.no_stream)
            return null;

        let history = [];

        if (stmt.table && stmt.actions.some((a) => !a.isNotify)) {
            // split into two statements, one getting the data, and the other using it

            if (!stmt.table.isInvocation) {
                // if there is no filter, skip the statement
                const queryStmt = new Ast.Statement.Command(null, stmt.table, [C.notifyAction()]);
                history.push(new Ast.DialogueHistoryItem(null, queryStmt, null));
            }

            const newActions = stmt.actions.map((a) => a.clone());
            for (let action of newActions) {
                if (!action.isInvocation)
                    throw new TypeError('???');
                assert (action.invocation.selector.isDevice)

                const in_params = action.invocation.in_params;
                for (let in_param of in_params) {
                    if (!in_param.value.isVarRef)
                        continue;
                    if (in_param.value.name.startsWith('__const_'))
                        continue;

                    // parameter passing
                    // FIXME we need a new ThingTalk value type...
                    in_param.value = new Ast.Value.Undefined(true);
                }
            }
            const actionStmt = new Ast.Statement.Command(null, null, newActions);
            history.push(new Ast.DialogueHistoryItem(null, actionStmt, null));
        } else {
            history.push(new Ast.DialogueHistoryItem(null, stmt, null));
        }

        return new Ast.DialogueState(null, 'org.thingpedia.dialogue.transaction', 'program', history);
    };
}
