// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2019 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../../lib/sentence-generator/ast_manip');

}


complete_table = {
    thingpedia_query if complete;
    !primonly table_join_replace_placeholder if complete;
}
complete_get_command = {
    thingpedia_get_command if complete;
}
if_filtered_table = {
    complete_table;
    one_if_filter_table;
    !turking two_if_filter_table;
}

one_if_filter_table = {
    !nofilter table:complete_table 'if' filter:atom_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
two_if_filter_table = {
    !nofilter table:one_if_filter_table 'and' filter:atom_filter => {
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
with_filtered_table = {
    complete_table;
    one_with_filter_table;
    !turking two_with_filter_table;
}

one_with_filter_table = {
    !nofilter table:complete_table ('with' | 'having') filter:with_filter => {
        if (!table.schema.is_list)
            return null;
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}
two_with_filter_table = {
    !nofilter table:one_with_filter_table 'and' filter:with_filter => {
        if (!table.schema.is_list)
            return null;
        if (!C.checkFilter(table, filter))
            return null;
        return C.addFilter(table, filter, $options);
    };
}


edge_stream = {
    !turking ('when' | 'if') 'the' p:projection_Any ('becomes' | 'becomes equal to') x:constant_Any => {
         if (x.getType().isString)
             return C.makeEdgeFilterStream(p, '=~', x, $options);
         else
             return C.makeEdgeFilterStream(p, '==', x, $options);
    };
    ('when' | 'if') 'the' p:projection_Numeric ('becomes greater than' | 'becomes higher than' | 'goes above' | 'increases above') x:constant_Numeric => C.makeEdgeFilterStream(p, '>=', x, $options);
    ('when' | 'if') 'the' p:projection_Numeric ('becomes smaller than' | 'becomes lower than' | 'goes below' | 'decreases below') x:constant_Numeric => C.makeEdgeFilterStream(p, '<=', x, $options);
}

stream = {
    thingpedia_stream if complete;
    !turking {
        ('when' | 'if' | 'in case' | 'whenever' | 'any time' | 'should' | 'anytime') table:with_filtered_table ('change' | 'update') => C.tableToStream(table, null);
    }
    ?turking ('when' | 'if' | 'in case' | 'whenever' | 'any time' | 'should' | 'anytime') table:with_filtered_table 'update' => C.tableToStream(table, null);

    !turking {
        ('in case of changes' | 'in case of variations' | 'in case of updates' | 'if something changes' | 'when something changes' | 'if there are changes' | 'if there are updates') 'in' table:with_filtered_table => C.tableToStream(table, null);

        ('when' | 'if' | 'in case' | 'whenever' | 'any time' | 'anytime') proj:projection_Any 'changes' => {
            if (proj.args[0] === 'picture_url')
                return null;
            if (proj.table.isAggregation)
                return null;
            let outParams = Object.keys(proj.table.schema.out);
            let stream;
            if (outParams.length === 1 && $options.flags.turking)
                return null;
            if (outParams.length === 1)
                stream = C.tableToStream(proj.table, null);
            else
                stream = C.tableToStream(proj.table, proj.args);
            return stream;
        };
    }
    !nofilter ('when' | 'if' | 'in case' | 'whenever' | 'any time' | 'should' | 'anytime') table:complete_table 'change and' filter:edge_filter => {
        if (!table.schema.is_monitorable || !C.checkFilter(table, filter) || table.schema.is_list)
            return null;
        table = C.addFilter(table, filter, $options);
        if (!table)
            return null;
        return C.tableToStream(table, null);
    };
    !nofilter ('when' | 'if' | 'in case' | 'whenever' | 'any time' | 'should' | 'anytime') table:complete_table 'change and' filter:atom_filter => {
        if (!table.schema.is_monitorable || !C.checkFilter(table, filter))
            return null;
        if ($options.flags.turking && table.schema.is_list)
            return null;
        table = C.addFilter(table, filter, $options);
        if (!table)
            return null;
        return C.tableToStream(table, null);
    };
    !nofilter edge_stream;
    ?timer timer;
}
