// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2018 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
    const assert = require('assert');

    const ThingTalk = require('thingtalk');
    const Ast = ThingTalk.Ast;
    const Type = ThingTalk.Type;
    const Generate = ThingTalk.Generate;

// import the combinator library
    const C = require('../ast_manip');


    function makeComputeExpression(table, operation, operands, resultType) {
        const computeSchema = table.schema.addArguments([
            new Ast.ArgumentDef(Ast.ArgDirection.OUT, operation, resultType, {}, {})]);
        const expression = new Ast.ScalarExpression.Derived(operation, operands.map((op) => new Ast.ScalarExpression.Primary(op)));

        return new Ast.Table.Compute(table, expression, null, computeSchema);
    }

    function makeComputeProjExpression(table, operation, operands, resultType) {
        const compute = makeComputeExpression(table, operation, operands, resultType);
        const projSchema = compute.schema.filterArguments((arg) => arg.direction !== Ast.ArgDirection.OUT || arg.name === operation);

        return new Ast.Table.Projection(compute, [operation], projSchema);
    }

    function makeComputeArgMinMaxExpression(table, operation, operands, resultType, direction = 'desc') {
        if (C.hasUniqueFilter(table))
            return null;
        const compute = makeComputeExpression(table, operation, operands, resultType);
        const projSchema = compute.schema.filterArguments((arg) => arg.direction !== Ast.ArgDirection.OUT || arg.name === operation);
        const sort = new Ast.Table.Sort(compute, operation, direction, compute.schema);
        return new Ast.Table.Index(sort, [new Ast.Value.Number(1)], compute.schema);
    }

    function makeAggComputeExpression(table, operation, field, list, resultType) {
        if (C.hasUniqueFilter(table))
            return null;
        const computeSchema = table.schema.addArguments([
            new Ast.ArgumentDef(Ast.ArgDirection.OUT, operation, resultType, {}, {})]);
        const expression = new Ast.ScalarExpression.Aggregation(operation, field, list);

        return new Ast.Table.Compute(table, expression, null, computeSchema);
    }

    function makeAggComputeProjExpression(table, operation, field, list, resultType) {
        const compute = makeAggComputeExpression(table, operation, field, list, resultType);
        const projSchema = compute.schema.filterArguments((arg) => arg.direction !== Ast.ArgDirection.OUT || arg.name === operation);

        return new Ast.Table.Projection(compute, [operation], projSchema);
    }

    function makeAggComputeArgMinMaxExpression(table, operation, field, list, resultType, direction = 'desc') {
        if (C.hasUniqueFilter(table))
            return null;
        const compute = makeAggComputeExpression(table, operation, field, list, resultType);
        const sort = new Ast.Table.Sort(compute, operation, direction, compute.schema);
        return new Ast.Table.Index(sort, [new Ast.Value.Number(1)], compute.schema);

    }

    function makeProjectTable(table, pname) {
        const projectSchema = table.schema.filterArguments((arg) => arg.name === pname);
        return new Ast.Table.Projection(table, [pname], projectSchema);
    }

    function makeArgMinMaxTable(table, pname, direction = 'desc') {
        if (C.hasUniqueFilter(table))
            return null;
        const sort = new Ast.Table.Sort(table, pname, direction, table.schema.clone());
        return new Ast.Table.Index(sort, [new Ast.Value.Number(1)], sort.schema);
    }

    const HERE = Ast.Value.Location(Ast.Location.Relative('current_location'));

}

projection_Measure_m = {
    ( 'the distance' ('of' | 'to') table:with_filtered_table ('from here' | '')
    | 'the distance' ('of' | 'to') 'the' table:with_arg_min_max_table ('from here' | ''))=> {
        // the position of a place in schema.org is called "geo" - for speed
        // we hardcode the parameter name here

        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeProjExpression(table, 'distance', [Ast.Value.VarRef('geo'), HERE], Type.Measure('m'));
    };

    // these form sentences like "tell me how far X is", which is grammatical but
    // clunky, so we !turking them
    !turking ( 'how' ('far' | 'near' | 'close') table:with_filtered_table 'is' ('from here' | '')
    | 'how' ('far' | 'near' | 'close') 'the' table:with_arg_min_max_table 'is' ('from here' | '')
    ) => {
        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeProjExpression(table, 'distance', [Ast.Value.VarRef('geo'), HERE], Type.Measure('m'));
    };

    ( 'the distance' ('of' | 'to') table:with_filtered_table 'from' place:constant_Location
    | 'the distance from' place:constant_Location ('of' | 'to') table:with_filtered_table
    | 'the distance' ('of' | 'to') 'the' table:with_arg_min_max_table 'from' place:constant_Location
    | 'the distance from' place:constant_Location ('of' | 'to') 'the' table:with_arg_min_max_table
    ) => {
        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeProjExpression(table, 'distance', [Ast.Value.VarRef('geo'), place], Type.Measure('m'));
    };

    !turking {
    ( 'how' ('far' | 'near' | 'close') 'from' place:constant_Location table:with_filtered_table 'is'
    | 'how' ('far' | 'near' | 'close') table:with_filtered_table 'is from' place:constant_Location
    | 'how' ('far' | 'near' | 'close') 'from' place:constant_Location 'the' table:with_arg_min_max_table 'is'
    | 'how' ('far' | 'near' | 'close') 'the' table:with_arg_min_max_table 'is from' place:constant_Location
    ) => {
        if (!table.schema.out.geo || table.schema.out.geo.isLocation)
            return null;
        return makeComputeProjExpression(table, 'distance', [Ast.Value.VarRef('geo'), place], Type.Measure('m'));
    };
    }

    ( 'the number of' p:out_param_Array__Any ('of' | 'in' | 'in the') table:with_filtered_table
    | 'the number of' p:out_param_Array__Any ('of' | 'in') 'the' table:with_arg_min_max_table ) => {
        if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
            return null;
        const conflictParam = C.hasConflictParam(table, p.name, 'count');
        if (conflictParam)
            return makeProjectTable(table, conflictParam);
        return makeAggComputeProjExpression(table, 'count', null, new Ast.ListExpression(p.name, null), Type.Number);
    };

    ( 'the number of' p:out_param_Array__Any 'with' filter:with_filter ('of' | 'in' | 'in the') table:with_filtered_table
    | 'the number of' p:out_param_Array__Any 'with' filter:with_filter ('of' | 'in') 'the' table:with_arg_min_max_table) => {
        if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray || filter.isAtom)
            return null;
        const elementType = table.schema.out[p.name].elem;
        if (!elementType.isCompound || !elementType.fields[filter.name])
            return null;
        const list = C.makeListExpression($options, p, filter);
        if (!list)
            return null;
        return makeAggComputeProjExpression(table, 'count', null, list, Type.Number);
    };
}

compute_question = {
    ( 'how' ('far' | 'near' | 'close') ('is' | 'are') table:with_filtered_table ('from here' | '') ('?'|'')
    | 'how' ('far' | 'near' | 'close') ('is' | 'are') 'the' table:with_arg_min_max_table ('from here' | '') ('?'|'')
    )=> {
        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeProjExpression(table, 'distance', [Ast.Value.VarRef('geo'), HERE], Type.Measure('m'));
    };

    ( 'how' ('far' | 'near' | 'close') ('is' | 'are') table:with_filtered_table ('from' | 'to') place:constant_Location ('?'|'')
    | 'how' ('far' | 'near' | 'close') ('is' | 'are') 'the' table:with_arg_min_max_table ('from' | 'to') place:constant_Location ('?'|'')
    ) => {
        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeProjExpression(table, 'distance', [Ast.Value.VarRef('geo'), place], Type.Measure('m'));
    };

    ( 'how many' p:out_param_Array__Any ('does' | 'do') table:with_filtered_table 'have ?'
    | 'how many' p:out_param_Array__Any ('in a' | 'in' | 'in the') table:with_filtered_table '?'
    | 'how many' p:out_param_Array__Any 'are there' ('in a' | 'in' | 'in the') table:with_filtered_table '?'
    | 'how many' p:out_param_Array__Any ('does' | 'do') 'the' table:with_arg_min_max_table 'have ?'
    | 'how many' p:out_param_Array__Any 'in the' table:with_arg_min_max_table '?'
    | 'how many' p:out_param_Array__Any 'are there in the' table:with_arg_min_max_table '?'
    ) => {
        if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
            return null;
        const conflictParam = C.hasConflictParam(table, p.name, 'count');
        if (conflictParam)
            return makeProjectTable(table, conflictParam);
        return makeAggComputeProjExpression(table, 'count', null, new Ast.ListExpression(p.name, null), Type.Number);
    };

    ( 'how many' p:out_param_Array__Any 'with' filter:with_filter ('does' | 'do') table:with_filtered_table 'have ?'
    | 'how many' p:out_param_Array__Any 'with' filter:with_filter ('in a' | 'in' | 'in the') table:with_filtered_table '?'
    | 'how many' p:out_param_Array__Any 'with' filter:with_filter 'are there' ('in a' | 'in' | 'in the') table:with_filtered_table '?'
    | 'how many' p:out_param_Array__Any 'with' filter:with_filter ('does' | 'do') 'the'  table:with_arg_min_max_table 'have ?'
    | 'how many' p:out_param_Array__Any 'with' filter:with_filter 'in the' table:with_arg_min_max_table '?'
    | 'how many' p:out_param_Array__Any 'with' filter:with_filter 'are there in the' table:with_arg_min_max_table '?'
    ) => {
        if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
            return null;
        const elementType = table.schema.out[p.name].elem;
        if (!elementType.isCompound || !elementType.fields[filter.name])
            return null;
        const list = C.makeListExpression($options, p, filter);
        if (!list)
            return null;
        return makeAggComputeProjExpression(table, 'count', null, list, Type.Number);
    };

    // aggregation questions
    ?aggregation {
    ( 'how many' table:with_filtered_table 'are there ?'
    | ('please' | '') 'count the' table:with_filtered_table
    ) => {
        if (!table.schema.is_list)
            return null;
        const newSchema = table.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT)
            .addArguments([new Ast.ArgumentDef(Ast.ArgDirection.OUT, 'count', Type.Number)]);
        const agg = new Ast.Table.Aggregation(table, '*', 'count', null, newSchema);
        return new Ast.Table.Projection(agg, ['count'], newSchema);
    };


    !schema_org ( 'how many' p:out_param_Numeric 'are' ('in' | 'in the') t:with_filtered_table '?'
    | 'how many' p:out_param_Numeric ('do' | 'does') t:with_filtered_table 'have ?'
    ) => {
        if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
            return null;
        if (!t.schema.is_list)
            return null;

        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
        const agg = new Ast.Table.Aggregation(t, p.name, 'sum', null, newSchema);
        return new Ast.Table.Projection(agg, [p.name], newSchema);
    };
    }
}

with_arg_min_max_table = {
    ('nearest' | 'closest') table:complete_table ('' | 'from here' | 'to here' | 'to me')  => {
        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeArgMinMaxExpression(table, 'distance', [Ast.Value.VarRef('geo'), HERE], Type.Measure('m'), 'asc');
    };

    ('nearest' | 'closest') table:with_filtered_table => {
        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeArgMinMaxExpression(table, 'distance', [Ast.Value.VarRef('geo'), HERE], Type.Measure('m'), 'asc');
    };

    ('farthest' | 'most far away') table:with_filtered_table => {
        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeArgMinMaxExpression(table, 'distance', [Ast.Value.VarRef('geo'), HERE], Type.Measure('m'), 'desc');
    };

    ( ('nearest' | 'closest') table:complete_table 'to' place:constant_Location
    | table:complete_table ('that is' | 'which is') ('nearest' | 'closest') 'to' place:constant_Location
    | table:complete_table ('nearest' | 'closest') 'to' place:constant_Location
    ) => {
        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeArgMinMaxExpression(table, 'distance', [Ast.Value.VarRef('geo'), place], Type.Measure('m'), 'asc');
    };

    ( ('nearest' | 'closest') table:with_filtered_table 'to' place:constant_Location
    | table:with_filtered_table ('that is' | 'which is') ('nearest' | 'closest') 'to' place:constant_Location
    | table:with_filtered_table ('nearest' | 'closest') 'to' place:constant_Location
    ) => {
        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeArgMinMaxExpression(table, 'distance', [Ast.Value.VarRef('geo'), place], Type.Measure('m'), 'asc');
    };

    ( ('farthest' | 'most far away') table:with_filtered_table 'from' place:constant_Location
    | table:with_filtered_table ('that is' | 'which is') ('farthest' | 'most far away') 'from' place:constant_Location
    | table:with_filtered_table ('farthest' | 'most far away') 'from' place:constant_Location )
    => {
        if (!table.schema.out.geo || !table.schema.out.geo.isLocation)
            return null;
        return makeComputeArgMinMaxExpression(table, 'distance', [Ast.Value.VarRef('geo'), place], Type.Measure('m'), 'desc');
    };

    table:with_filtered_table 'with the' ('most' | 'highest number of' | 'largest number of' | 'largest count of') p:out_param_Array__Any => {
        if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
            return null;
        const conflictParam = C.hasConflictParam(table, p.name, 'count');
        if (conflictParam)
            return makeArgMinMaxTable(table, conflictParam, 'desc');
        return makeAggComputeArgMinMaxExpression(table, 'count', null, new Ast.ListExpression(p.name, null), Type.Number, 'desc');
    };

    table:with_filtered_table 'with the' ('least' | 'smallest number of' | 'tiniest number of' | 'smallest count of') p:out_param_Array__Any => {
        if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
            return null;
        const conflictParam = C.hasConflictParam(table, p.name, 'count');
        if (conflictParam)
            return makeArgMinMaxTable(table, conflictParam, 'asc');
        return makeAggComputeArgMinMaxExpression(table, 'count', null, new Ast.ListExpression(p.name, null), Type.Number, 'asc');
    };
}


