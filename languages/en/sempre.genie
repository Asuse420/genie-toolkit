{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;

// import the combinator library
const C = require('../ast_manip');

function makeComputeExpression(table, operation, operands, resultType) {
    const computeSchema = table.schema.addArguments([
        new Ast.ArgumentDef(Ast.ArgDirection.OUT, operation, resultType, {}, {})]);
    const expression = new Ast.ScalarExpression.Derived(operation, operands.map((op) => new Ast.ScalarExpression.Primary(op)));

    return new Ast.Table.Compute(table, expression, null, computeSchema);
}

function makeComputeProjExpression(table, operation, operands, resultType) {
    const compute = makeComputeExpression(table, operation, operands, resultType);
    const projSchema = compute.schema.filterArguments((arg) => arg.direction !== Ast.ArgDirection.OUT || arg.name === operation);

    return new Ast.Table.Projection(compute, [operation], projSchema);
}

function makeComputeArgMinMaxExpression(table, operation, operands, resultType, direction = 'desc') {
    if (C.hasUniqueFilter(table))
        return null;
    for (let [, filter] of C.iterateFilters(table)) {
        for (let atom of C.iterateFields(filter)) {
            if (atom.name === operands[0].name)
                return null;
        }
    }
    const compute = makeComputeExpression(table, operation, operands, resultType);
    const projSchema = compute.schema.filterArguments((arg) => arg.direction !== Ast.ArgDirection.OUT || arg.name === operation);
    const sort = new Ast.Table.Sort(compute, operation, direction, compute.schema);
    return new Ast.Table.Index(sort, [new Ast.Value.Number(1)], compute.schema);
}

function makeAggComputeExpression(table, operation, field, list, resultType) {
    if (C.hasUniqueFilter(table))
        return null;
    let name = list.name;
    let canonical = table.schema.getArgCanonical(name);
    for (let p of table.schema.iterateArguments()) {
        if (p.name === name + 'Count' || p.canonical === canonical + 'count' || p.canonical === canonical.slice(0,-1) + ' count') {
            const newSchema = table.schema.filterArguments((arg) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
            return new Ast.Table.Projection(table, [p.name], newSchema);
        }
    }
    const computeSchema = table.schema.addArguments([
        new Ast.ArgumentDef(Ast.ArgDirection.OUT, operation, resultType, {}, {})]);
    const expression = new Ast.ScalarExpression.Aggregation(operation, field, list);

    return new Ast.Table.Compute(table, expression, null, computeSchema);
}

function makeAggComputeProjExpression(table, operation, field, list, resultType) {
    const compute = makeAggComputeExpression(table, operation, field, list, resultType);
    if (!compute)
        return null;
    const projSchema = compute.schema.filterArguments((arg) => arg.direction !== Ast.ArgDirection.OUT || arg.name === operation);

    return new Ast.Table.Projection(compute, [operation], projSchema);
}

function makeAggComputeArgMinMaxExpression(table, operation, field, list, resultType, direction = 'desc') {
    if (C.hasUniqueFilter(table))
        return null;
    const compute = makeAggComputeExpression(table, operation, field, list, resultType);
    if (!compute)
        return null;
    const sort = new Ast.Table.Sort(compute, operation, direction, compute.schema);
    return new Ast.Table.Index(sort, [new Ast.Value.Number(1)], compute.schema);

}

function makeProjectTable(table, pname) {
    const projectSchema = table.schema.filterArguments((arg) => arg.name === pname);
    return new Ast.Table.Projection(table, [pname], projectSchema);
}

function makeArgMinMaxTable(table, pname, direction = 'desc') {
    if (C.hasUniqueFilter(table))
        return null;
    const sort = new Ast.Table.Sort(table, pname, direction, table.schema.clone());
    return new Ast.Table.Index(sort, [new Ast.Value.Number(1)], sort.schema);
}

const HERE = Ast.Value.Location(Ast.Location.Relative('current_location'));

}

import './constants';
import '../common-parameters';

table = thingpedia_query if complete;

filter = {
    'whose' p:out_param_Any 'is' v:constant_Any => C.makeFilter($options, p, v.getType().isString ? '=~' : '==', v);
    'whose' p:out_param_Any 'is not' v:constant_Any =>  C.makeFilter($options, p, v.getType().isString ? '=~' : '==', v, true);
    'whose' p:out_param_Array__Any 'is' v:constant_Any => C.makeFilter($options, p, 'contains', v);
    'whose' p:out_param_Array__Any 'is not' v:constant_Any =>  C.makeFilter($options, p, 'contains', v, true);
    'whose' p:out_param_Numeric ('is samller than' | 'at most') v:constant_Numeric => C.makeFilter($options, p, '<=', v);
    'whose' p:out_param_Numeric ('is larger than' | 'at least')  v:constant_Numeric => C.makeFilter($options, p, '>=', v);

    'that' p:out_param_avp v:constant_Any =>  C.makeFilter($options, p, v.getType().isString ? '=~' : '==', v);
    'that not' p:out_param_avp v:constant_Any => C.makeFilter($options, p, v.getType().isString ? '=~' : '==', v, true);
    'that' p:out_param_avp v:constant_Any =>  C.makeFilter($options, p, 'contains', v);
    'that not' p:out_param_avp v:constant_Any => C.makeFilter($options, p, 'contains', v, true);

    'that has' v:constant_Number p:out_param_Any => C.makeAggregateFilter($options, p, 'count', '*', '==', v);
    'that has' ('less than' | 'at most') v:constant_Number p:out_param_Any => C.makeAggregateFilter($options, p, 'count', '*', '<=', v);
    'that has' ('more than' | 'at least') v:constant_Number p:out_param_Any => C.makeAggregateFilter($options, p, 'count', '*', '>=', v);
}

filtered_table = {
    t:table f:filter => C.checkAndAddFilter(t, f, $options);
    t:filtered_table 'and' f:filter => C.checkAndAddFilter(t, f, $options);

    // noun reverse
    ( t1:table 'that is' p:out_param_Any 'of' t2:table
    | t1:table 'that is' p:out_param_Any 'of' t2:filtered_table
    | t1:table 'that is' p:out_param_Array__Any 'of' t2:table
    | t1:table 'that is' p:out_param_Array__Any 'of' t2:filtered_table) => {
        return C.addReverseGetPredicateJoin(t1, t2, p.name, $options);
    };
    ( t1:table 'that is not' p:out_param_Any 'of' t2:table
    | t1:table 'that is not' p:out_param_Any 'of' t2:filtered_table
    | t1:table 'that is not' p:out_param_Array__Any 'of' t2:table
    | t1:table 'that is not' p:out_param_Array__Any 'of' t2:filtered_table
    ) => {
        return C.addReverseGetPredicateJoin(t1, t2, p.name, $options, true);
    };

    // verb reverse
    ( t1:table 'that' t2:table p:out_param_avp
    | t1:table 'that' t2:filtered_table 'and' p:out_param_avp ) => {
        return C.addReverseGetPredicateJoin(t1, t2, p.name, $options);
    };
    ( t1:table 'that' t2:table 'not' p:out_param_avp
    | t1:table 'that' t2:filtered_table 'and not' p:out_param_avp ) => {
        return C.addReverseGetPredicateJoin(t1, t2, p.name, $options, true);
    };

    // arg minmax
    ( table:table 'that has the smallest' p:out_param_Numeric
    | table:filtered_table 'that has the smallest' p:out_param_Numeric ) => C.makeArgMaxMinTable(table, p, 'asc');
    ( table:table 'that has the largest' p:out_param_Numeric
    | table:filtered_table 'that has the largest' p:out_param_Numeric ) => C.makeArgMaxMinTable(table, p, 'desc');

    // arg minmax on count
    ( table:table 'that has the least number of' p:out_param_Array__Any
    | table:filtered_table 'that has the least number of' p:out_param_Array__Any ) => {
        if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
            return null;
        const conflictParam = C.hasConflictParam(table, p.name, 'count');
        if (conflictParam)
            return makeArgMinMaxTable(table, conflictParam, 'asc');
        return makeAggComputeArgMinMaxExpression(table, 'count', null, new Ast.ListExpression(p.name, null), Type.Number, 'desc');
    };
    ( table:table 'that has the most number of' p:out_param_Array__Any
    | table:filtered_table 'that has the most number of' p:out_param_Array__Any ) => {
        if (!table.schema.out[p.name] || !table.schema.out[p.name].isArray)
            return null;
        const conflictParam = C.hasConflictParam(table, p.name, 'count');
        if (conflictParam)
            return makeArgMinMaxTable(table, conflictParam, 'desc');
        return makeAggComputeArgMinMaxExpression(table, 'count', null, new Ast.ListExpression(p.name, null), Type.Number, 'desc');
    };

    // projection
    ( p:out_param_Any 'of' table:table
    | p:out_param_Any 'of' table:filtered_table
    | p:out_param_Array__Any 'of' table:table
    | p:out_param_Array__Any 'of' table:filtered_table ) => {
        const name = p.name;
        if ($options.flags.schema_org) {
            if (name === 'id')
                return null;
        }
        if (!table.schema.out[name])
            return null;

        if (name === 'picture_url' && $options.flags.turking)
            return null;
        const newSchema = table.schema.filterArguments((arg) => arg.direction !== Ast.ArgDirection.OUT || arg.name === name);
        return new Ast.Table.Projection(table, [name], newSchema);
    };

    // count
    ( 'number of' table:table
    | 'number of' table:filtered_table ) => {
        if (!table.schema.is_list)
            return null;
        const newSchema = table.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT)
            .addArguments([new Ast.ArgumentDef(Ast.ArgDirection.OUT, 'count', Type.Number)]);
        const agg = new Ast.Table.Aggregation(table, '*', 'count', null, newSchema);
        return new Ast.Table.Projection(agg, ['count'], newSchema);
    };

    // sum & avg
    ( 'total' p:out_param_Numeric 'of' t:table
    | 'total' p:out_param_Numeric 'of' t:filtered_table ) => {
        if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
            return null;
        if (!t.schema.is_list)
            return null;

        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
        const agg = new Ast.Table.Aggregation(t, p.name, 'sum', null, newSchema);
        return new Ast.Table.Projection(agg, [p.name], newSchema);
    };
    ( 'average' p:out_param_Numeric 'of' t:table
    | 'average' p:out_param_Numeric 'of' t:filtered_table ) => {
        if (!t.schema.out[p.name] || !t.schema.out[p.name].isNumeric())
            return null;
        if (!t.schema.is_list)
            return null;

        const newSchema = t.schema.filterArguments((arg, i) => arg.direction !== Ast.ArgDirection.OUT || arg.name === p.name);
        const agg = new Ast.Table.Aggregation(t, p.name, 'avg', null, newSchema);
        return new Ast.Table.Projection(agg, [p.name], newSchema);
    };
}


$root = {
    t:table => C.sayProjectionProgram($options, t);
    t:filtered_table => C.sayProjectionProgram($options, t);
}
