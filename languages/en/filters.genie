// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingTalk
//
// Copyright 2017-2018 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details

{
const assert = require('assert');

const ThingTalk = require('thingtalk');
const Ast = ThingTalk.Ast;
const Type = ThingTalk.Type;
const { clean } = require('../../lib/utils');

// import the combinator library
const C = require('../../lib/sentence-generator/ast_manip');
}

// generic filters (npp)
get_predicate_filter = {
    'before' t1:constant_Time => C.timeGetPredicate($options, null, t1);
    'after' t2:constant_Time  => C.timeGetPredicate($options, t2, null);
    'between' t1:constant_Time 'and' t2:constant_Time => C.timeGetPredicate($options, t1, t2);

    'my location is' loc:constant_Location     => C.locationGetPredicate($options, loc);
    'my location is not' loc:constant_Location => C.locationGetPredicate($options, loc, true);
    'i am at' loc:constant_Location            => C.locationGetPredicate($options, loc);
    'i am not at' loc:constant_Location        => C.locationGetPredicate($options, loc, true);
    
    proj:projection_Any ('is' | 'is exactly' | 'is equal to') x:constant_Any        => C.makeGetPredicate(proj, '==', x);
    proj:projection_Any ('is not' | 'is n\'t' | 'is different than') x:constant_Any => C.makeGetPredicate(proj, '==', x, true);
}

atom_filter = {
    'the' p:out_param_Any ('is' | 'is exactly' | 'is equal to') x:constant_Any        => {
        if (x.getType().isString)
            return C.makeFilter($options, p, '=~', x);
        else
            return C.makeFilter($options, p, '==', x);
    };
    'the' p:out_param_Any ('is not' | 'is n\'t' | 'is different than') x:constant_Any => {
        if (x.getType().isString)
            return C.makeFilter($options, p, '=~', x, true);
        else
            return C.makeFilter($options, p, '==', x, true);
    };

    p:the_out_param_Numeric 'is' ('greater' | 'higher' | 'bigger' | 'more' | 'at least' | 'not less than') x:constant_Numeric => C.makeFilter($options, p, '>=', x);
    p:the_out_param_Numeric 'is' ('smaller' | 'lower' | 'less' | 'at most' | 'not more than') x:constant_Numeric             => C.makeFilter($options, p, '<=', x);

    !turking {
        p:the_out_param_Date 'is' ('after' | 'later than') x:constant_Date => C.makeFilter($options, p, '>=', x);
        p:the_out_param_Date 'is' ('before' | 'earlier than') x:constant_Date => C.makeFilter($options, p, '<=', x);
    }

    // there are too few arrays, so keep both
    p:the_out_param_Array__Any 'contain' x:constant_Any => C.makeFilter($options, p, 'contains', x);
    p:the_out_param_Array__Any 'do not contain' x:constant_Any => C.makeFilter($options, p, 'contains', x, true);
    p:the_out_param_Array__Any 'include' x:constant_Any => C.makeFilter($options, p, 'contains', x);
    p:the_out_param_Array__Any 'do not include' x:constant_Any => C.makeFilter($options, p, 'contains', x, true);

    p:the_out_param_String ('contains' | 'includes') x:constant_String => C.makeFilter($options, p, '=~', x);
    p:the_out_param_String 'does not' ('contain' | 'include') x:constant_String => C.makeFilter($options, p, '=~', x, true);
    x:constant_String 'is in' p:the_out_param_String => C.makeFilter($options, p, '=~', x);

    !turking range_filter;
    //!turking f:either_filter => f;
}

edge_filter = {
    !turking 'the' p:out_param_Any ('becomes' | 'becomes equal to') x:constant_Any => {
        if (x.getType().isString)
            return C.makeFilter($options, p, '=~', x);
        else
            return C.makeFilter($options, p, '==', x);
    };
    p:the_out_param_Numeric ('is now greater than' | 'becomes greater than' | 'becomes higher than' | 'goes above' | 'increases above' | 'goes over' | 'rises above') x:constant_Numeric => C.makeFilter($options, p, '>=', x);
    p:the_out_param_Numeric ('is now smaller than' | 'becomes smaller than' | 'becomes lower than' | 'goes below' | 'decreases below' | 'goes under') x:constant_Numeric => C.makeFilter($options, p, '<=', x);
}

either_filter = {
    'the' param:out_param_Any ('is' | 'is equal to' | 'is one of' | 'is either') v1:constant_Any 'or' v2:constant_Any => {
        // param is a Value.VarRef
        //console.log('param: ' + param.name);
        if (!v1.getType().equals(v2.getType()))
            return null;
        if (v1.equals(v2)) // can happen with constants (now, 0, 1, etc.)
            return null;
        if (v1.isVarRef && v1.constNumber !== undefined && v2.isVarRef && v2.constNumber !== undefined &&
            v1.constNumber + 1 !== v2.constNumber) // optimization: avoid CONST_X CONST_Y with X + 1 != Y earlier (before the NN catches it)
            return null;
        let vtype = v1.getType();
        if (vtype.isBoolean) // "is equal to true or false" does not make sense
            return null;
        if (!$options.allOutParams.has(param.name + '+' + vtype))
            return null;
        return new Ast.BooleanExpression.Atom(param.name, 'in_array', Ast.Value.Array([v1, v2]));
    };
    'the' param:out_param_Any 'is' ('not' | 'neither') v1:constant_Any 'nor' v2:constant_Any => {
        // param is a Value.VarRef
        //console.log('param: ' + param.name);
        if (!v1.getType().equals(v2.getType()))
            return null;
        if (v1.equals(v2)) // can happen with constants (now, 0, 1, etc.)
            return null;
        if (v1.isVarRef && v1.constNumber !== undefined && v2.isVarRef && v2.constNumber !== undefined &&
            v1.constNumber + 1 !== v2.constNumber) // optimization: avoid CONST_X CONST_Y with X + 1 != Y earlier (before the NN catches it)
            return null;
        let vtype = v1.getType();
        if (vtype.isBoolean) // "is neither true nor false" does not make sense
            return null;
        if (!$options.allOutParams.has(param.name + '+' + vtype))
            return null;
        return new Ast.BooleanExpression.Not(new Ast.BooleanExpression.Atom(param.name, 'in_array', Ast.Value.Array([v1, v2])));
    };
}

range = {
    'between' v1:constant_Numeric 'and' v2:constant_Numeric => {
        if (!v1.getType().equals(v2.getType()))
            return null;
        if (v1.equals(v2)) // can happen with constants (now, 0, 1, etc.)
            return null;
        if (v1.isVarRef && v1.constNumber !== undefined && v2.isVarRef && v2.constNumber !== undefined &&
            v1.constNumber + 1 !== v2.constNumber) // optimization: avoid CONST_X CONST_Y with X + 1 != Y earlier (before the NN catches it)
            return null;
        return [v1, v2];
    };
    'in the range from' v1:constant_Numeric 'to' v2:constant_Numeric => {
        if (!v1.getType().equals(v2.getType()))
            return null;
        if (v1.equals(v2)) // can happen with constants (now, 0, 1, etc.)
            return null;
        if (v1.isVarRef && v1.constNumber !== undefined && v2.isVarRef && v2.constNumber !== undefined &&
            v1.constNumber + 1 !== v2.constNumber) // optimization: avoid CONST_X CONST_Y with X + 1 != Y earlier (before the NN catches it)
            return null;
        return [v1, v2];
    };
}
range_filter = {
    param:the_out_param_Numeric 'is' range:range => {
        const [v1, v2] = range;
        return new Ast.BooleanExpression.And([
            Ast.BooleanExpression.Atom(param.name, '>=', v1),
            Ast.BooleanExpression.Atom(param.name, '<=', v2)
        ]);
    };
}

with_filter = {
    p:out_param_Any 'equal to' x:constant_Any => {
        if (x.getType().isString)
            return C.makeFilter($options, p, '=~', x);
        else
            return C.makeFilter($options, p, '==', x);
    };
    !turking p:out_param_String ('containing' | 'including') x:constant_String => C.makeFilter($options, p, '=~', x);
    !turking x:constant_String ('in the' | 'in its' | 'in their') p:out_param_String => C.makeFilter($options, p, '=~', x);

    p:out_param_Numeric ('higher' | 'larger' | 'bigger') 'than' x:constant_Numeric => C.makeFilter($options, p, '>=', x);
    p:out_param_Numeric ('smaller' | 'lower') 'than' x:constant_Numeric => C.makeFilter($options, p, '<=', x);
    ('higher' | 'larger' | 'bigger') p:out_param_Numeric 'than' x:constant_Numeric => C.makeFilter($options, p, '>=', x);
    ('smaller' | 'lower') p:out_param_Numeric 'than' x:constant_Numeric => C.makeFilter($options, p, '<=', x);

    !turking {
        f:range_with_filter => f;
        'no' param:out_param_Number => new Ast.BooleanExpression.Atom(param.name, '==', Ast.Value.Number(0));
        'zero' param:out_param_Number => new Ast.BooleanExpression.Atom(param.name, '==', Ast.Value.Number(0));
    }
}
range_with_filter = {
    param:out_param_Numeric range:range => {
        const [v1, v2] = range;
        return new Ast.BooleanExpression.And([
            Ast.BooleanExpression.Atom(param.name, '>=', v1),
            Ast.BooleanExpression.Atom(param.name, '<=', v2)
        ]);
    };
}

// filters on npp parameters
// nnp: Noun-Phrase parameter for Property of the subject
// e.g.: "name", "date of birth"
npp_filter = {
    p:out_param_npp x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    p:out_param_npp x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}

// filters on npi parameters
// npi: Noun-phrase parameter for Identity of the subejct
// e.g.: "owner of <company>", "student in <university>"
npi_filter = {
    ('that' | '') 'is' 'the' p:out_param_npi x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    ('that' | '') 'is' 'the' p:out_param_npi x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}

// filters on pvp parameters
// pvp: Passive-Verb Phrase parameter
// e.g.: "called <nickname>", "born on <date>"
pvp_filter = {
    p:out_param_pvp x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    p:out_param_pvp x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}

// filters on avp parameters
// avp: Active-Verb Phrase parameter
// e.g.: "owns <company>", "studied in <university>"
avp_filter = {
    p:out_param_avp x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    p:out_param_avp x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}

// filters on npv parameters
// npv: implicit parameter with Noun-Phrase Value, i.e., the parameter itself will not appear in the sentence
// e.g.: "Bob is a PhD", the parameter `academic_degree` is implicit, and should be inferred by the value "PhD"
npv_filter = {
    ('that' | '') 'is' 'a' p:out_param_npv x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    ('that' | '') 'is' 'a' p:out_param_npv x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}

// filters on apv parameter
// apv: implicit parameter with Adjective-Phrase Value (similar to npv, but in adjective form)
// e.g.: "Bob is left-handed"
apv_filter = {
    ('that' | '') 'is' p:out_param_apv x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    ('that' | '') 'is' p:out_param_apv x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}

// filters on npp parameter for "whose" question
// e.g.: whose nickname is boogie?
whose_npp_filter = {
    p:out_param_npp 'is' x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    p:out_param_npp 'is' x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}

// npp filters for "who" questions
who_npp_filter = {
    p:out_param_npp x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    p:out_param_npp x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}

// pvp filters for "who" questions
who_pvp_filter = {
    p:out_param_pvp x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    p:out_param_pvp x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}

// avp filters for "who" questions
who_avp_filter = {
    p:out_param_avp x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    p:out_param_avp x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}


// npi filters for "who" questions
who_npi_filter = {
    p:out_param_npi x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    p:out_param_npi x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}


// npv filters for "who" questions
who_npv_filter = {
    p:out_param_npv x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    p:out_param_npv x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}


// apv filters for "who" questions
who_apv_filter = {
    p:out_param_apv x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };

    p:out_param_apv x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}

// generic filters on parameters in all 6 grammar categories for "who" questions
who_generic_filter = {
    ('has' | 'got') p:out_param_npp x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };
    ('has' | 'got') p:out_param_npp x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };

    'is the' p:out_param_npi x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };
    'is the' p:out_param_npi x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };

    p:out_param_avp x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };
    p:out_param_apv x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };

    'is' p:out_param_pvp x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };
    'is' p:out_param_pvp x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };

    'is a' p:out_param_npv x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };
    'is a' p:out_param_npv x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };

    'is' p:out_param_apv x:constant_Any => {
        const op = x.getType().isString ? '=~' : '==';
        return C.makeFilter($options, p, op, x);
    };
    'is' p:out_param_apv x:constant_Any => {
        return C.makeFilter($options, p, 'contains', x);
    };
}
